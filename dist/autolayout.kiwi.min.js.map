{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///autolayout.kiwi.min.js","webpack:///webpack/bootstrap b5e47908d82523734b4a","webpack:///./src/index.js","webpack:///./src/Attribute.js","webpack:///./src/Relation.js","webpack:///./src/Priority.js","webpack:///./src/VisualFormat.js","webpack:///./src/parser/parser.js","webpack:///./src/parser/parserExt.js","webpack:///./src/View.js","webpack:///./~/kiwi-solver/bin/kiwi.js","webpack:///./src/SubView.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_Attribute","_Attribute2","_Relation","_Relation2","_Priority","_Priority2","_VisualFormat","_VisualFormat2","_View","_View2","_SubView","_SubView2","AutoLayout","Attribute","Relation","Priority","VisualFormat","View","SubView","CONST","NOTANATTRIBUTE","VARIABLE","LEFT","RIGHT","TOP","BOTTOM","WIDTH","HEIGHT","CENTERX","CENTERY","ZINDEX","LEQ","EQU","GEQ","REQUIRED","DEFAULTHIGH","DEFAULTLOW","_classCallCheck","instance","Constructor","TypeError","_processEqualSpacer","context","stackView","equalSpacerIndex","name","lineIndex","constraints","push","view1","attr1","horizontal","relation","view2","attr2","priority","view","multiplier","undefined","constant","i","prevViews","length","prevView","orientation","Orientation","HORIZONTAL","prevAttr","curAttr","VERTICAL","_processProportionalSpacer","proportionalSpacerIndex","_processStackView","subView","viewName","orientations","stack","processedOrientations","type","j","subViews","_getRange","range","match","substring","parseInt","start","res","_processCascade","cascade","parentItem","curViews","item","Array","isArray","hasOwnProperty","items","z","viewRange","r","curView","n","attribute","variable","equalSpacing","err","Error","column","$parserOffset","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_parser","_parser2","_parserExt","_parserExt2","metaInfoCategories","visualFormat","options","extended","indexOf","parse","outFormat","predicates","attr","lineSeperator","parseLine","source","lines","line","parseOptions","strict","split","trim","concat","prefix","metaInfo","k","s","category","prefixedCategory","names","viewport","aspectRatio","height","width","widths","isNaN","heights","spacing","JSON","sIdx","len","peg$subclass","child","parent","ctor","constructor","SyntaxError","message","expected","found","offset","input","peg$reportedPos","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$currPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","a","b","description","splice","buildMessage","stringEscape","hex","charCodeAt","toString","toUpperCase","replace","expectedDesc","foundDesc","expectedDescs","slice","join","posDetails","peg$parsevisualFormatString","s0","s1","s2","s3","s4","s5","s6","s7","peg$parseorientation","peg$FAILED","peg$c2","peg$silentFails","peg$c3","peg$c0","peg$c1","peg$parsesuperview","peg$parseconnection","peg$parseview","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$parseviewName","peg$parsepredicateListWithParens","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$parsepredicateList","peg$c21","peg$c22","peg$c23","peg$c24","peg$parsesimplePredicate","peg$parsenumber","peg$c25","peg$c26","peg$c27","peg$parsepredicate","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$parserelation","peg$parseobjectOfPredicate","peg$c33","peg$c34","peg$parsepriority","peg$c35","substr","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$parseconstant","peg$c45","test","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","extend","dst","arguments","peg$result","peg$startRuleFunctions","visualFormatString","peg$startRuleFunction","o","superto","views","tosuper","apply","orient","predicateList","ps","map","digits","f","v","decimals","parseFloat","startRule","peg$parsevisualFormatStringExt","peg$parsevisualFormatStringAttributeExpression","peg$parseattributeMark","peg$parseattributeSignifier","peg$parsecomments","peg$c4","peg$parseattribute","peg$parseviewGroup","peg$parseviewNameRange","peg$parsecascadedViews","peg$parseequalSpacingPredicateList","peg$parsepercentage","peg$c58","peg$c59","peg$c60","peg$c61","peg$parseequalSpacingPredicate","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$parseviewPredicate","peg$c72","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$parsemultiplier","peg$parseconstantExpr","peg$c83","peg$c84","peg$c85","peg$c86","peg$c87","peg$c88","peg$c89","peg$c90","peg$c91","peg$c92","peg$c93","peg$c94","peg$c95","peg$c96","peg$c97","peg$c98","peg$c99","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","peg$c110","peg$c111","peg$c112","peg$c113","peg$c114","peg$c115","peg$c116","peg$c117","peg$c118","peg$c119","peg$c120","peg$c121","peg$c122","peg$c123","peg$c124","peg$c125","peg$c126","peg$c127","peg$parserange","peg$c128","peg$c129","peg$c130","peg$c131","peg$c132","peg$c133","peg$c134","peg$c135","peg$c136","visualFormatStringExt","viewAttrLeft","comments","cascadedViews","connection","vn","d","_getConst","_vr","_kiwiSolver2","Variable","_solver","addConstraint","Constraint","Operator","Eq","_getSubView","_subViews","solver","_type","_parentSubView","_getSpacing","constraint","index","_spacingVars","_spacingExpr","addEditVariable","Strength","create","multiply","suggestValue","_spacing","_addConstraint","_getAttr","plus","_strength","defaultPriorityStrength","Ge","Le","_compareSpacing","old","newz","_kiwiSolver","Solver","setSpacing","setSize","addConstraints","intrinsicWidth","intrinsicHeight","updateVariables","get","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","tsu","iter","object","ArrayIterator","__iter__","reversed","ReverseArrayIterator","__reversed__","next","iterator","__next__","forEach","callback","it","array","_array","_index","Math","max","min","Pair","first","second","copy","lowerBound","compare","half","middle","begin","binarySearch","binaryFind","ArrayBase","size","empty","itemAt","takeAt","clear","swap","other","__extends","__","wrapCompare","cmp","pair","merge","len1","len2","merged","AssociativeArray","_super","_compare","_wrapped","comparitor","contains","find","setDefault","currPair","insert","update","_this","erase","theCopy","copyArray","thisArray","kiwi","expression","operator","rhs","strength","required","_id","CnId","_operator","clip","Expression","_expression","minus","Compare","op","createMap","_value","_context","VarId","_name","setName","setContext","setValue","coefficient","divide","toJSON","parseArgs","args","terms","terms2","termPair","value2","parsed","_terms","_constant","result","w","strong","medium","weak","nearZero","eps","createCnMap","createRowMap","Symbol","createVarMap","createEditMap","_cnMap","_rowMap","_varMap","_editMap","_infeasibleRows","_objective","Row","_artificial","_idTick","createConstraint","lhs","cn","cnPair","data","_createRow","row","tag","subject","_chooseSubject","allDummies","marker","_addWithArtificialVariable","solveFor","_substitute","_optimize","removeConstraint","_removeConstraintEffects","rowPair","leaving","_getMarkerLeavingSymbol","solveForEx","hasConstraint","editPair","expr","info","removeEditVariable","hasEditVariable","rows","delta","add","_dualOptimize","coeff","coefficientFor","vars","_getVarSymbol","_makeSymbol","symbol","basicPair","insertRow","insertSymbol","objective","INVALID_SYMBOL","slack","error","errplus","errminus","dummy","reverseSign","cells","art","success","basicRow","isConstant","entering","_anyPivotableSymbol","removeSymbol","substitute","_getEnteringSymbol","_getLeavingSymbol","infeasible","pop","_getDualEnteringSymbol","ratio","Number","MAX_VALUE","temp","temp_ratio","dmax","r1","r2","invalid","third","_removeMarkerEffects","SymbolType","_cellMap","_attr","left","top","stringify","_getAttrValue","_intrinsicWidth","set","_intrinsicHeight"],"mappings":"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","file":"autolayout.kiwi.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"autolayout\"] = factory();\n\telse\n\t\troot[\"autolayout\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"autolayout\"] = factory();\n\telse\n\t\troot[\"autolayout\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Attribute = __webpack_require__(1);\n\t\n\tvar _Attribute2 = _interopRequireDefault(_Attribute);\n\t\n\tvar _Relation = __webpack_require__(2);\n\t\n\tvar _Relation2 = _interopRequireDefault(_Relation);\n\t\n\tvar _Priority = __webpack_require__(3);\n\t\n\tvar _Priority2 = _interopRequireDefault(_Priority);\n\t\n\tvar _VisualFormat = __webpack_require__(4);\n\t\n\tvar _VisualFormat2 = _interopRequireDefault(_VisualFormat);\n\t\n\tvar _View = __webpack_require__(7);\n\t\n\tvar _View2 = _interopRequireDefault(_View);\n\t\n\tvar _SubView = __webpack_require__(9);\n\t\n\tvar _SubView2 = _interopRequireDefault(_SubView);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t//import DOM from './DOM';\n\t\n\t/**\n\t * AutoLayout.\n\t *\n\t * @namespace AutoLayout\n\t * @property {Attribute} Attribute\n\t * @property {Relation} Relation\n\t * @property {Priority} Priority\n\t * @property {VisualFormat} VisualFormat\n\t * @property {View} View\n\t * @property {SubView} SubView\n\t */\n\tvar AutoLayout = {\n\t  Attribute: _Attribute2.default,\n\t  Relation: _Relation2.default,\n\t  Priority: _Priority2.default,\n\t  VisualFormat: _VisualFormat2.default,\n\t  View: _View2.default,\n\t  SubView: _SubView2.default\n\t  //DOM: DOM\n\t};\n\t\n\texports.default = AutoLayout;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\n\t * Layout attributes.\n\t * @enum {String}\n\t */\n\tvar Attribute = {\n\t    CONST: 'const',\n\t    NOTANATTRIBUTE: 'const',\n\t    VARIABLE: 'var',\n\t    LEFT: 'left',\n\t    RIGHT: 'right',\n\t    TOP: 'top',\n\t    BOTTOM: 'bottom',\n\t    WIDTH: 'width',\n\t    HEIGHT: 'height',\n\t    CENTERX: 'centerX',\n\t    CENTERY: 'centerY',\n\t    /*LEADING: 'leading',\n\t    TRAILING: 'trailing'*/\n\t    /** Used by the extended VFL syntax. */\n\t    ZINDEX: 'zIndex'\n\t};\n\texports.default = Attribute;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\n\t * Relation types.\n\t * @enum {String}\n\t */\n\tvar Relation = {\n\t    /** Less than or equal */\n\t    LEQ: 'leq',\n\t    /** Equal */\n\t    EQU: 'equ',\n\t    /** Greater than or equal */\n\t    GEQ: 'geq'\n\t};\n\texports.default = Relation;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\n\t * Layout priorities.\n\t * @enum {String}\n\t */\n\tvar Priority = {\n\t    REQUIRED: 1000,\n\t    DEFAULTHIGH: 750,\n\t    DEFAULTLOW: 250\n\t    //FITTINGSIZELEVEL: 50,\n\t};\n\texports.default = Priority;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _parser = __webpack_require__(5);\n\t\n\tvar _parser2 = _interopRequireDefault(_parser);\n\t\n\tvar _parserExt = __webpack_require__(6);\n\t\n\tvar _parserExt2 = _interopRequireDefault(_parserExt);\n\t\n\tvar _Attribute = __webpack_require__(1);\n\t\n\tvar _Attribute2 = _interopRequireDefault(_Attribute);\n\t\n\tvar _Relation = __webpack_require__(2);\n\t\n\tvar _Relation2 = _interopRequireDefault(_Relation);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Orientation = {\n\t    HORIZONTAL: 1,\n\t    VERTICAL: 2,\n\t    ZINDEX: 4\n\t};\n\t\n\t/**\n\t * Helper function that inserts equal spacers (~).\n\t * @private\n\t */\n\tfunction _processEqualSpacer(context, stackView) {\n\t\n\t    // Determine unique name for the spacer\n\t    context.equalSpacerIndex = context.equalSpacerIndex || 1;\n\t    var name = '_~' + context.lineIndex + ':' + context.equalSpacerIndex + '~';\n\t    if (context.equalSpacerIndex > 1) {\n\t\n\t        // Ensure that all spacers have the same width/height\n\t        context.constraints.push({\n\t            view1: '_~' + context.lineIndex + ':1~',\n\t            attr1: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t            relation: context.relation.relation || _Relation2.default.EQU,\n\t            view2: name,\n\t            attr2: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t            priority: context.relation.priority\n\t        });\n\t    }\n\t    context.equalSpacerIndex++;\n\t\n\t    // Enforce view/proportional width/height\n\t    if (context.relation.view || context.relation.multiplier && context.relation.multiplier !== 1) {\n\t        context.constraints.push({\n\t            view1: name,\n\t            attr1: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t            relation: context.relation.relation || _Relation2.default.EQU,\n\t            view2: context.relation.view,\n\t            attr2: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t            priority: context.relation.priority,\n\t            multiplier: context.relation.multiplier\n\t        });\n\t        context.relation.multiplier = undefined;\n\t    } else if (context.relation.constant) {\n\t        context.constraints.push({\n\t            view1: name,\n\t            attr1: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t            relation: _Relation2.default.EQU,\n\t            view2: null,\n\t            attr2: _Attribute2.default.CONST,\n\t            priority: context.relation.priority,\n\t            constant: context.relation.constant\n\t        });\n\t        context.relation.constant = undefined;\n\t    }\n\t\n\t    // Add constraint\n\t    for (var i = 0; i < context.prevViews.length; i++) {\n\t        var prevView = context.prevViews[i];\n\t        switch (context.orientation) {\n\t            case Orientation.HORIZONTAL:\n\t                context.prevAttr = prevView !== stackView ? _Attribute2.default.RIGHT : _Attribute2.default.LEFT;\n\t                context.curAttr = _Attribute2.default.LEFT;\n\t                break;\n\t            case Orientation.VERTICAL:\n\t                context.prevAttr = prevView !== stackView ? _Attribute2.default.BOTTOM : _Attribute2.default.TOP;\n\t                context.curAttr = _Attribute2.default.TOP;\n\t                break;\n\t            case Orientation.ZINDEX:\n\t                context.prevAttr = _Attribute2.default.ZINDEX;\n\t                context.curAttr = _Attribute2.default.ZINDEX;\n\t                context.relation.constant = prevView !== stackView ? 'default' : 0;\n\t                break;\n\t        }\n\t        context.constraints.push({\n\t            view1: prevView,\n\t            attr1: context.prevAttr,\n\t            relation: context.relation.relation,\n\t            view2: name,\n\t            attr2: context.curAttr,\n\t            priority: context.relation.priority\n\t        });\n\t    }\n\t    context.prevViews = [name];\n\t}\n\t\n\t/**\n\t * Helper function that inserts proportional spacers (-12%-).\n\t * @private\n\t */\n\tfunction _processProportionalSpacer(context, stackView) {\n\t    context.proportionalSpacerIndex = context.proportionalSpacerIndex || 1;\n\t    var name = '_-' + context.lineIndex + ':' + context.proportionalSpacerIndex + '-';\n\t    context.proportionalSpacerIndex++;\n\t    context.constraints.push({\n\t        view1: name,\n\t        attr1: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t        relation: context.relation.relation || _Relation2.default.EQU,\n\t        view2: context.relation.view, // or relative to the stackView... food for thought\n\t        attr2: context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT,\n\t        priority: context.relation.priority,\n\t        multiplier: context.relation.multiplier\n\t    });\n\t    context.relation.multiplier = undefined;\n\t\n\t    // Add constraint\n\t    for (var i = 0; i < context.prevViews.length; i++) {\n\t        var prevView = context.prevViews[i];\n\t        switch (context.orientation) {\n\t            case Orientation.HORIZONTAL:\n\t                context.prevAttr = prevView !== stackView ? _Attribute2.default.RIGHT : _Attribute2.default.LEFT;\n\t                context.curAttr = _Attribute2.default.LEFT;\n\t                break;\n\t            case Orientation.VERTICAL:\n\t                context.prevAttr = prevView !== stackView ? _Attribute2.default.BOTTOM : _Attribute2.default.TOP;\n\t                context.curAttr = _Attribute2.default.TOP;\n\t                break;\n\t            case Orientation.ZINDEX:\n\t                context.prevAttr = _Attribute2.default.ZINDEX;\n\t                context.curAttr = _Attribute2.default.ZINDEX;\n\t                context.relation.constant = prevView !== stackView ? 'default' : 0;\n\t                break;\n\t        }\n\t        context.constraints.push({\n\t            view1: prevView,\n\t            attr1: context.prevAttr,\n\t            relation: context.relation.relation,\n\t            view2: name,\n\t            attr2: context.curAttr,\n\t            priority: context.relation.priority\n\t        });\n\t    }\n\t    context.prevViews = [name];\n\t}\n\t\n\t/**\n\t * In case of a stack-view, set constraints for opposite orientations\n\t * @private\n\t */\n\tfunction _processStackView(context, name, subView) {\n\t    var viewName = void 0;\n\t    for (var orientation = 1; orientation <= 4; orientation *= 2) {\n\t        if (subView.orientations & orientation && subView.stack.orientation !== orientation && !(subView.stack.processedOrientations & orientation)) {\n\t            subView.stack.processedOrientations = subView.stack.processedOrientations | orientation;\n\t            viewName = viewName || {\n\t                name: name,\n\t                type: 'stack'\n\t            };\n\t            for (var i = 0, j = subView.stack.subViews.length; i < j; i++) {\n\t                if (orientation === Orientation.ZINDEX) {\n\t                    context.constraints.push({\n\t                        view1: viewName,\n\t                        attr1: _Attribute2.default.ZINDEX,\n\t                        relation: _Relation2.default.EQU,\n\t                        view2: subView.stack.subViews[i],\n\t                        attr2: _Attribute2.default.ZINDEX\n\t                    });\n\t                } else {\n\t                    context.constraints.push({\n\t                        view1: viewName,\n\t                        attr1: orientation === Orientation.VERTICAL ? _Attribute2.default.HEIGHT : _Attribute2.default.WIDTH,\n\t                        relation: _Relation2.default.EQU,\n\t                        view2: subView.stack.subViews[i],\n\t                        attr2: orientation === Orientation.VERTICAL ? _Attribute2.default.HEIGHT : _Attribute2.default.WIDTH\n\t                    });\n\t                    context.constraints.push({\n\t                        view1: viewName,\n\t                        attr1: orientation === Orientation.VERTICAL ? _Attribute2.default.TOP : _Attribute2.default.LEFT,\n\t                        relation: _Relation2.default.EQU,\n\t                        view2: subView.stack.subViews[i],\n\t                        attr2: orientation === Orientation.VERTICAL ? _Attribute2.default.TOP : _Attribute2.default.LEFT\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * Recursive helper function converts a view-name and a range to a series\n\t * of view-names (e.g. [child1, child2, child3, ...]).\n\t * @private\n\t */\n\tfunction _getRange(name, range) {\n\t    if (range === true) {\n\t        range = name.match(/\\.\\.\\d+$/);\n\t        if (range) {\n\t            name = name.substring(0, name.length - range[0].length);\n\t            range = parseInt(range[0].substring(2));\n\t        }\n\t    }\n\t    if (!range) {\n\t        return [name];\n\t    }\n\t    var start = name.match(/\\d+$/);\n\t    var res = [];\n\t    var i;\n\t    if (start) {\n\t        name = name.substring(0, name.length - start[0].length);\n\t        for (i = parseInt(start); i <= range; i++) {\n\t            res.push(name + i);\n\t        }\n\t    } else {\n\t        res.push(name);\n\t        for (i = 2; i <= range; i++) {\n\t            res.push(name + i);\n\t        }\n\t    }\n\t    return res;\n\t}\n\t\n\t/**\n\t * Recursive helper function that processes the cascaded data.\n\t * @private\n\t */\n\tfunction _processCascade(context, cascade, parentItem) {\n\t    var stackView = parentItem ? parentItem.view : null;\n\t    var subViews = [];\n\t    var curViews = [];\n\t    var subView = void 0;\n\t    if (stackView) {\n\t        cascade.push({ view: stackView });\n\t        curViews.push(stackView);\n\t    }\n\t    for (var i = 0; i < cascade.length; i++) {\n\t        var item = cascade[i];\n\t        if (!Array.isArray(item) && item.hasOwnProperty('view') || Array.isArray(item) && item[0].view && !item[0].relation) {\n\t            var items = Array.isArray(item) ? item : [item];\n\t            for (var z = 0; z < items.length; z++) {\n\t                item = items[z];\n\t                var viewRange = item === ',' ? [] : item.view ? _getRange(item.view, item.range) : [null];\n\t                for (var r = 0; r < viewRange.length; r++) {\n\t                    var curView = viewRange[r];\n\t                    curViews.push(curView);\n\t\n\t                    //\n\t                    // Add this view to the collection of subViews\n\t                    //\n\t                    if (curView !== stackView) {\n\t                        subViews.push(curView);\n\t                        subView = context.subViews[curView];\n\t                        if (!subView) {\n\t                            subView = { orientations: 0 };\n\t                            context.subViews[curView] = subView;\n\t                        }\n\t                        subView.orientations = subView.orientations | context.orientation;\n\t                        if (subView.stack) {\n\t                            _processStackView(context, curView, subView);\n\t                        }\n\t                    }\n\t\n\t                    //\n\t                    // Process the relationship between this and the previous views\n\t                    //\n\t                    if (context.prevViews !== undefined && curView !== undefined && context.relation) {\n\t                        if (context.relation.relation !== 'none') {\n\t                            for (var p = 0; p < context.prevViews.length; p++) {\n\t                                var prevView = context.prevViews[p];\n\t                                switch (context.orientation) {\n\t                                    case Orientation.HORIZONTAL:\n\t                                        context.prevAttr = prevView !== stackView ? _Attribute2.default.RIGHT : _Attribute2.default.LEFT;\n\t                                        context.curAttr = curView !== stackView ? _Attribute2.default.LEFT : _Attribute2.default.RIGHT;\n\t                                        break;\n\t                                    case Orientation.VERTICAL:\n\t                                        context.prevAttr = prevView !== stackView ? _Attribute2.default.BOTTOM : _Attribute2.default.TOP;\n\t                                        context.curAttr = curView !== stackView ? _Attribute2.default.TOP : _Attribute2.default.BOTTOM;\n\t                                        break;\n\t                                    case Orientation.ZINDEX:\n\t                                        context.prevAttr = _Attribute2.default.ZINDEX;\n\t                                        context.curAttr = _Attribute2.default.ZINDEX;\n\t                                        context.relation.constant = !prevView ? 0 : context.relation.constant || 'default';\n\t                                        break;\n\t                                }\n\t                                context.constraints.push({\n\t                                    view1: prevView,\n\t                                    attr1: context.prevAttr,\n\t                                    relation: context.relation.relation,\n\t                                    view2: curView,\n\t                                    attr2: context.curAttr,\n\t                                    multiplier: context.relation.multiplier,\n\t                                    constant: context.relation.constant === 'default' || !context.relation.constant ? context.relation.constant : -context.relation.constant,\n\t                                    priority: context.relation.priority\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    //\n\t                    // Process view size constraints\n\t                    //\n\t                    var constraints = item.constraints;\n\t                    if (constraints) {\n\t                        for (var n = 0; n < constraints.length; n++) {\n\t                            context.prevAttr = context.horizontal ? _Attribute2.default.WIDTH : _Attribute2.default.HEIGHT;\n\t                            context.curAttr = constraints[n].view || constraints[n].multiplier ? constraints[n].attribute || context.prevAttr : constraints[n].variable ? _Attribute2.default.VARIABLE : _Attribute2.default.CONST;\n\t                            context.constraints.push({\n\t                                view1: curView,\n\t                                attr1: context.prevAttr,\n\t                                relation: constraints[n].relation,\n\t                                view2: constraints[n].view,\n\t                                attr2: context.curAttr,\n\t                                multiplier: constraints[n].multiplier,\n\t                                constant: constraints[n].constant,\n\t                                priority: constraints[n].priority\n\t                            });\n\t                        }\n\t                    }\n\t\n\t                    //\n\t                    // Process cascaded data (child stack-views)\n\t                    //\n\t                    if (item.cascade) {\n\t                        _processCascade(context, item.cascade, item);\n\t                    }\n\t                }\n\t            }\n\t        } else if (item !== ',') {\n\t            context.prevViews = curViews;\n\t            curViews = [];\n\t            context.relation = item[0];\n\t            if (context.prevViews !== undefined) {\n\t                if (context.relation.equalSpacing) {\n\t                    _processEqualSpacer(context, stackView);\n\t                }\n\t                if (context.relation.multiplier) {\n\t                    _processProportionalSpacer(context, stackView);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (stackView) {\n\t        subView = context.subViews[stackView];\n\t        if (!subView) {\n\t            subView = { orientations: context.orientation };\n\t            context.subViews[stackView] = subView;\n\t        } else if (subView.stack) {\n\t            var err = new Error('A stack named \"' + stackView + '\" has already been created');\n\t            err.column = parentItem.$parserOffset + 1;\n\t            throw err;\n\t        }\n\t        subView.stack = {\n\t            orientation: context.orientation,\n\t            processedOrientations: context.orientation,\n\t            subViews: subViews\n\t        };\n\t        _processStackView(context, stackView, subView);\n\t    }\n\t}\n\t\n\tvar metaInfoCategories = ['viewport', 'spacing', 'colors', 'shapes', 'widths', 'heights'];\n\t\n\t/**\n\t * VisualFormat\n\t *\n\t * @namespace VisualFormat\n\t */\n\t\n\tvar VisualFormat = function () {\n\t    function VisualFormat() {\n\t        _classCallCheck(this, VisualFormat);\n\t    }\n\t\n\t    _createClass(VisualFormat, null, [{\n\t        key: 'parseLine',\n\t\n\t\n\t        /**\n\t         * Parses a single line of vfl into an array of constraint definitions.\n\t         *\n\t         * When the visual-format could not be succesfully parsed an exception is thrown containing\n\t         * additional info about the parse error and column position.\n\t         *\n\t         * @param {String} visualFormat Visual format string (cannot contain line-endings!).\n\t         * @param {Object} [options] Configuration options.\n\t         * @param {Boolean} [options.extended] When set to true uses the extended syntax (default: false).\n\t         * @param {String} [options.outFormat] Output format (`constraints` or `raw`) (default: `constraints`).\n\t         * @param {Number} [options.lineIndex] Line-index used when auto generating equal-spacing constraints.\n\t         * @return {Array} Array of constraint definitions.\n\t         */\n\t        value: function parseLine(visualFormat, options) {\n\t            if (visualFormat.length === 0 || options && options.extended && visualFormat.indexOf('//') === 0) {\n\t                return [];\n\t            }\n\t            var res = options && options.extended ? _parserExt2.default.parse(visualFormat) : _parser2.default.parse(visualFormat);\n\t            if (options && options.outFormat === 'raw') {\n\t                return [res];\n\t            }\n\t            var context = {\n\t                constraints: [],\n\t                lineIndex: (options ? options.lineIndex : undefined) || 1,\n\t                subViews: (options ? options.subViews : undefined) || {}\n\t            };\n\t            if (res.type === 'attribute') {\n\t                for (var n = 0; n < res.predicates.length; n++) {\n\t                    context.constraints.push({\n\t                        view1: res.view,\n\t                        attr1: res.attr,\n\t                        relation: res.predicates[n].relation,\n\t                        view2: res.predicates[n].view,\n\t                        attr2: res.predicates[n].attribute,\n\t                        multiplier: res.predicates[n].multiplier,\n\t                        constant: res.predicates[n].constant,\n\t                        priority: res.predicates[n].priority\n\t                    });\n\t                }\n\t            } else {\n\t                switch (res.orientation) {\n\t                    case 'horizontal':\n\t                        context.orientation = Orientation.HORIZONTAL;\n\t                        context.horizontal = true;\n\t                        _processCascade(context, res.cascade, null);\n\t                        break;\n\t                    case 'vertical':\n\t                        context.orientation = Orientation.VERTICAL;\n\t                        _processCascade(context, res.cascade, null);\n\t                        break;\n\t                    case 'horzvert':\n\t                        context.orientation = Orientation.HORIZONTAL;\n\t                        context.horizontal = true;\n\t                        _processCascade(context, res.cascade, null);\n\t                        context = {\n\t                            constraints: context.constraints,\n\t                            lineIndex: context.lineIndex,\n\t                            subViews: context.subViews,\n\t                            orientation: Orientation.VERTICAL\n\t                        };\n\t                        _processCascade(context, res.cascade, null);\n\t                        break;\n\t                    case 'zIndex':\n\t                        context.orientation = Orientation.ZINDEX;\n\t                        _processCascade(context, res.cascade, null);\n\t                        break;\n\t                }\n\t            }\n\t            return context.constraints;\n\t        }\n\t\n\t        /**\n\t         * Parses one or more visual format strings into an array of constraint definitions.\n\t         *\n\t         * When the visual-format could not be succesfully parsed an exception is thrown containing\n\t         * additional info about the parse error and column position.\n\t         *\n\t         * @param {String|Array} visualFormat One or more visual format strings.\n\t         * @param {Object} [options] Configuration options.\n\t         * @param {Boolean} [options.extended] When set to true uses the extended syntax (default: false).\n\t         * @param {Boolean} [options.strict] When set to false trims any leading/trailing spaces and ignores empty lines (default: true).\n\t         * @param {String} [options.lineSeperator] String that defines the end of a line (default `\\n`).\n\t         * @param {String} [options.outFormat] Output format (`constraints` or `raw`) (default: `constraints`).\n\t         * @return {Array} Array of constraint definitions.\n\t         */\n\t\n\t    }, {\n\t        key: 'parse',\n\t        value: function parse(visualFormat, options) {\n\t            var lineSeperator = options && options.lineSeperator ? options.lineSeperator : '\\n';\n\t            if (!Array.isArray(visualFormat) && visualFormat.indexOf(lineSeperator) < 0) {\n\t                try {\n\t                    return this.parseLine(visualFormat, options);\n\t                } catch (err) {\n\t                    err.source = visualFormat;\n\t                    throw err;\n\t                }\n\t            }\n\t\n\t            // Decompose visual-format into an array of strings, and within those strings\n\t            // search for line-endings, and treat each line as a seperate visual-format.\n\t            visualFormat = Array.isArray(visualFormat) ? visualFormat : [visualFormat];\n\t            var lines = void 0;\n\t            var constraints = [];\n\t            var lineIndex = 0;\n\t            var line = void 0;\n\t            var parseOptions = {\n\t                lineIndex: lineIndex,\n\t                extended: options && options.extended,\n\t                strict: options && options.strict !== undefined ? options.strict : true,\n\t                outFormat: options ? options.outFormat : undefined,\n\t                subViews: {}\n\t            };\n\t            try {\n\t                for (var i = 0; i < visualFormat.length; i++) {\n\t                    lines = visualFormat[i].split(lineSeperator);\n\t                    for (var j = 0; j < lines.length; j++) {\n\t                        line = lines[j];\n\t                        lineIndex++;\n\t                        parseOptions.lineIndex = lineIndex;\n\t                        if (!parseOptions.strict) {\n\t                            line = line.trim();\n\t                        }\n\t                        if (parseOptions.strict || line.length) {\n\t                            constraints = constraints.concat(this.parseLine(line, parseOptions));\n\t                        }\n\t                    }\n\t                }\n\t            } catch (err) {\n\t                err.source = line;\n\t                err.line = lineIndex;\n\t                throw err;\n\t            }\n\t            return constraints;\n\t        }\n\t\n\t        /**\n\t         * Parses meta information from the comments in the VFL.\n\t         *\n\t         * Additional meta information can be specified in the comments\n\t         * for previewing and rendering purposes. For instance, the view-port\n\t         * aspect-ratio, sub-view widths and colors, can be specified. The\n\t         * following example renders three colored circles in the visual-format editor:\n\t         *\n\t         * ```vfl\n\t         * //viewport aspect-ratio:3/1 max-height:300\n\t         * //colors red:#FF0000 green:#00FF00 blue:#0000FF\n\t         * //shapes red:circle green:circle blue:circle\n\t         * H:|-[row:[red(green,blue)]-[green]-[blue]]-|\n\t         * V:|[row]|\n\t         * ```\n\t         *\n\t         * Supported categories and properties:\n\t         *\n\t         * |Category|Property|Example|\n\t         * |--------|--------|-------|\n\t         * |`viewport`|`aspect-ratio:{width}/{height}`|`//viewport aspect-ratio:16/9`|\n\t         * ||`width:[{number}/intrinsic]`|`//viewport width:10`|\n\t         * ||`height:[{number}/intrinsic]`|`//viewport height:intrinsic`|\n\t         * ||`min-width:{number}`|\n\t         * ||`max-width:{number}`|\n\t         * ||`min-height:{number}`|\n\t         * ||`max-height:{number}`|\n\t         * |`spacing`|`[{number}/array]`|`//spacing:8` or `//spacing:[10, 20, 5]`|\n\t         * |`widths`|`{view-name}:[{number}/intrinsic]`|`//widths subview1:100`|\n\t         * |`heights`|`{view-name}:[{number}/intrinsic]`|`//heights subview1:intrinsic`|\n\t         * |`colors`|`{view-name}:{color}`|`//colors redview:#FF0000 blueview:#00FF00`|\n\t         * |`shapes`|`{view-name}:[circle/square]`|`//shapes avatar:circle`|\n\t         *\n\t         * @param {String|Array} visualFormat One or more visual format strings.\n\t         * @param {Object} [options] Configuration options.\n\t         * @param {String} [options.lineSeperator] String that defines the end of a line (default `\\n`).\n\t         * @param {String} [options.prefix] When specified, also processes the categories using that prefix (e.g. \"-dev-viewport max-height:10\").\n\t         * @return {Object} meta-info\n\t         */\n\t\n\t    }, {\n\t        key: 'parseMetaInfo',\n\t        value: function parseMetaInfo(visualFormat, options) {\n\t            var lineSeperator = options && options.lineSeperator ? options.lineSeperator : '\\n';\n\t            var prefix = options ? options.prefix : undefined;\n\t            visualFormat = Array.isArray(visualFormat) ? visualFormat : [visualFormat];\n\t            var metaInfo = {};\n\t            var key;\n\t            for (var k = 0; k < visualFormat.length; k++) {\n\t                var lines = visualFormat[k].split(lineSeperator);\n\t                for (var i = 0; i < lines.length; i++) {\n\t                    var line = lines[i];\n\t                    for (var c = 0; c < metaInfoCategories.length; c++) {\n\t                        for (var s = 0; s < (prefix ? 2 : 1); s++) {\n\t                            var category = metaInfoCategories[c];\n\t                            var prefixedCategory = (s === 0 ? '' : prefix) + category;\n\t                            if (line.indexOf('//' + prefixedCategory + ' ') === 0) {\n\t                                var items = line.substring(3 + prefixedCategory.length).split(' ');\n\t                                for (var j = 0; j < items.length; j++) {\n\t                                    metaInfo[category] = metaInfo[category] || {};\n\t                                    var item = items[j].split(':');\n\t                                    var names = _getRange(item[0], true);\n\t                                    for (var r = 0; r < names.length; r++) {\n\t                                        metaInfo[category][names[r]] = item.length > 1 ? item[1] : '';\n\t                                    }\n\t                                }\n\t                            } else if (line.indexOf('//' + prefixedCategory + ':') === 0) {\n\t                                metaInfo[category] = line.substring(3 + prefixedCategory.length);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            if (metaInfo.viewport) {\n\t                var viewport = metaInfo.viewport;\n\t                var aspectRatio = viewport['aspect-ratio'];\n\t                if (aspectRatio) {\n\t                    aspectRatio = aspectRatio.split('/');\n\t                    viewport['aspect-ratio'] = parseInt(aspectRatio[0]) / parseInt(aspectRatio[1]);\n\t                }\n\t                if (viewport.height !== undefined) {\n\t                    viewport.height = viewport.height === 'intrinsic' ? true : parseInt(viewport.height);\n\t                }\n\t                if (viewport.width !== undefined) {\n\t                    viewport.width = viewport.width === 'intrinsic' ? true : parseInt(viewport.width);\n\t                }\n\t                if (viewport['max-height'] !== undefined) {\n\t                    viewport['max-height'] = parseInt(viewport['max-height']);\n\t                }\n\t                if (viewport['max-width'] !== undefined) {\n\t                    viewport['max-width'] = parseInt(viewport['max-width']);\n\t                }\n\t                if (viewport['min-height'] !== undefined) {\n\t                    viewport['min-height'] = parseInt(viewport['min-height']);\n\t                }\n\t                if (viewport['min-width'] !== undefined) {\n\t                    viewport['min-width'] = parseInt(viewport['min-width']);\n\t                }\n\t            }\n\t            if (metaInfo.widths) {\n\t                for (key in metaInfo.widths) {\n\t                    var width = metaInfo.widths[key] === 'intrinsic' ? true : parseInt(metaInfo.widths[key]);\n\t                    metaInfo.widths[key] = width;\n\t                    if (width === undefined || isNaN(width)) {\n\t                        delete metaInfo.widths[key];\n\t                    }\n\t                }\n\t            }\n\t            if (metaInfo.heights) {\n\t                for (key in metaInfo.heights) {\n\t                    var height = metaInfo.heights[key] === 'intrinsic' ? true : parseInt(metaInfo.heights[key]);\n\t                    metaInfo.heights[key] = height;\n\t                    if (height === undefined || isNaN(height)) {\n\t                        delete metaInfo.heights[key];\n\t                    }\n\t                }\n\t            }\n\t            if (metaInfo.spacing) {\n\t                var value = JSON.parse(metaInfo.spacing);\n\t                metaInfo.spacing = value;\n\t                if (Array.isArray(value)) {\n\t                    for (var sIdx = 0, len = value.length; sIdx < len; sIdx++) {\n\t                        if (isNaN(value[sIdx])) {\n\t                            delete metaInfo.spacing;\n\t                            break;\n\t                        }\n\t                    }\n\t                } else if (value === undefined || isNaN(value)) {\n\t                    delete metaInfo.spacing;\n\t                }\n\t            }\n\t            return metaInfo;\n\t        }\n\t    }]);\n\t\n\t    return VisualFormat;\n\t}();\n\t\n\texports.default = VisualFormat;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  /*\n\t   * Generated by PEG.js 0.8.0.\n\t   *\n\t   * http://pegjs.majda.cz/\n\t   */\n\t\n\t  function peg$subclass(child, parent) {\n\t    function ctor() {\n\t      this.constructor = child;\n\t    }\n\t    ctor.prototype = parent.prototype;\n\t    child.prototype = new ctor();\n\t  }\n\t\n\t  function SyntaxError(message, expected, found, offset, line, column) {\n\t    this.message = message;\n\t    this.expected = expected;\n\t    this.found = found;\n\t    this.offset = offset;\n\t    this.line = line;\n\t    this.column = column;\n\t\n\t    this.name = \"SyntaxError\";\n\t  }\n\t\n\t  peg$subclass(SyntaxError, Error);\n\t\n\t  function parse(input) {\n\t    var options = arguments.length > 1 ? arguments[1] : {},\n\t        peg$FAILED = {},\n\t        peg$startRuleFunctions = { visualFormatString: peg$parsevisualFormatString },\n\t        peg$startRuleFunction = peg$parsevisualFormatString,\n\t        peg$c0 = peg$FAILED,\n\t        peg$c1 = null,\n\t        peg$c2 = \":\",\n\t        peg$c3 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n\t        peg$c4 = [],\n\t        peg$c5 = function peg$c5(o, superto, view, views, tosuper) {\n\t      return {\n\t        orientation: o ? o[0] : 'horizontal',\n\t        cascade: (superto || []).concat([view], [].concat.apply([], views), tosuper || [])\n\t      };\n\t    },\n\t        peg$c6 = \"H\",\n\t        peg$c7 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n\t        peg$c8 = \"V\",\n\t        peg$c9 = { type: \"literal\", value: \"V\", description: \"\\\"V\\\"\" },\n\t        peg$c10 = function peg$c10(orient) {\n\t      return orient == 'H' ? 'horizontal' : 'vertical';\n\t    },\n\t        peg$c11 = \"|\",\n\t        peg$c12 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n\t        peg$c13 = function peg$c13() {\n\t      return { view: null };\n\t    },\n\t        peg$c14 = \"[\",\n\t        peg$c15 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n\t        peg$c16 = \"]\",\n\t        peg$c17 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n\t        peg$c18 = function peg$c18(view, predicates) {\n\t      return extend(view, predicates ? { constraints: predicates } : {});\n\t    },\n\t        peg$c19 = \"-\",\n\t        peg$c20 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n\t        peg$c21 = function peg$c21(predicateList) {\n\t      return predicateList;\n\t    },\n\t        peg$c22 = function peg$c22() {\n\t      return [{ relation: 'equ', constant: 'default', $parserOffset: offset() }];\n\t    },\n\t        peg$c23 = \"\",\n\t        peg$c24 = function peg$c24() {\n\t      return [{ relation: 'equ', constant: 0, $parserOffset: offset() }];\n\t    },\n\t        peg$c25 = function peg$c25(n) {\n\t      return [{ relation: 'equ', constant: n, $parserOffset: offset() }];\n\t    },\n\t        peg$c26 = \"(\",\n\t        peg$c27 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n\t        peg$c28 = \",\",\n\t        peg$c29 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n\t        peg$c30 = \")\",\n\t        peg$c31 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n\t        peg$c32 = function peg$c32(p, ps) {\n\t      return [p].concat(ps.map(function (p) {\n\t        return p[1];\n\t      }));\n\t    },\n\t        peg$c33 = \"@\",\n\t        peg$c34 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n\t        peg$c35 = function peg$c35(r, o, p) {\n\t      return extend({ relation: 'equ' }, r || {}, o, p ? p[1] : {});\n\t    },\n\t        peg$c36 = \"==\",\n\t        peg$c37 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n\t        peg$c38 = function peg$c38() {\n\t      return { relation: 'equ', $parserOffset: offset() };\n\t    },\n\t        peg$c39 = \"<=\",\n\t        peg$c40 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n\t        peg$c41 = function peg$c41() {\n\t      return { relation: 'leq', $parserOffset: offset() };\n\t    },\n\t        peg$c42 = \">=\",\n\t        peg$c43 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n\t        peg$c44 = function peg$c44() {\n\t      return { relation: 'geq', $parserOffset: offset() };\n\t    },\n\t        peg$c45 = /^[0-9]/,\n\t        peg$c46 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n\t        peg$c47 = function peg$c47(digits) {\n\t      return { priority: parseInt(digits.join(\"\"), 10) };\n\t    },\n\t        peg$c48 = function peg$c48(n) {\n\t      return { constant: n };\n\t    },\n\t        peg$c49 = /^[a-zA-Z_]/,\n\t        peg$c50 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n\t        peg$c51 = /^[a-zA-Z0-9_]/,\n\t        peg$c52 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\n\t        peg$c53 = function peg$c53(f, v) {\n\t      return { view: f + v };\n\t    },\n\t        peg$c54 = \".\",\n\t        peg$c55 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n\t        peg$c56 = function peg$c56(digits, decimals) {\n\t      return parseFloat(digits.concat(\".\").concat(decimals).join(\"\"), 10);\n\t    },\n\t        peg$c57 = function peg$c57(digits) {\n\t      return parseInt(digits.join(\"\"), 10);\n\t    },\n\t        peg$currPos = 0,\n\t        peg$reportedPos = 0,\n\t        peg$cachedPos = 0,\n\t        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n\t        peg$maxFailPos = 0,\n\t        peg$maxFailExpected = [],\n\t        peg$silentFails = 0,\n\t        peg$result;\n\t\n\t    if (\"startRule\" in options) {\n\t      if (!(options.startRule in peg$startRuleFunctions)) {\n\t        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n\t      }\n\t\n\t      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n\t    }\n\t\n\t    function text() {\n\t      return input.substring(peg$reportedPos, peg$currPos);\n\t    }\n\t\n\t    function offset() {\n\t      return peg$reportedPos;\n\t    }\n\t\n\t    function line() {\n\t      return peg$computePosDetails(peg$reportedPos).line;\n\t    }\n\t\n\t    function column() {\n\t      return peg$computePosDetails(peg$reportedPos).column;\n\t    }\n\t\n\t    function expected(description) {\n\t      throw peg$buildException(null, [{ type: \"other\", description: description }], peg$reportedPos);\n\t    }\n\t\n\t    function error(message) {\n\t      throw peg$buildException(message, null, peg$reportedPos);\n\t    }\n\t\n\t    function peg$computePosDetails(pos) {\n\t      function advance(details, startPos, endPos) {\n\t        var p, ch;\n\t\n\t        for (p = startPos; p < endPos; p++) {\n\t          ch = input.charAt(p);\n\t          if (ch === \"\\n\") {\n\t            if (!details.seenCR) {\n\t              details.line++;\n\t            }\n\t            details.column = 1;\n\t            details.seenCR = false;\n\t          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\t            details.line++;\n\t            details.column = 1;\n\t            details.seenCR = true;\n\t          } else {\n\t            details.column++;\n\t            details.seenCR = false;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (peg$cachedPos !== pos) {\n\t        if (peg$cachedPos > pos) {\n\t          peg$cachedPos = 0;\n\t          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n\t        }\n\t        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n\t        peg$cachedPos = pos;\n\t      }\n\t\n\t      return peg$cachedPosDetails;\n\t    }\n\t\n\t    function peg$fail(expected) {\n\t      if (peg$currPos < peg$maxFailPos) {\n\t        return;\n\t      }\n\t\n\t      if (peg$currPos > peg$maxFailPos) {\n\t        peg$maxFailPos = peg$currPos;\n\t        peg$maxFailExpected = [];\n\t      }\n\t\n\t      peg$maxFailExpected.push(expected);\n\t    }\n\t\n\t    function peg$buildException(message, expected, pos) {\n\t      function cleanupExpected(expected) {\n\t        var i = 1;\n\t\n\t        expected.sort(function (a, b) {\n\t          if (a.description < b.description) {\n\t            return -1;\n\t          } else if (a.description > b.description) {\n\t            return 1;\n\t          } else {\n\t            return 0;\n\t          }\n\t        });\n\t\n\t        while (i < expected.length) {\n\t          if (expected[i - 1] === expected[i]) {\n\t            expected.splice(i, 1);\n\t          } else {\n\t            i++;\n\t          }\n\t        }\n\t      }\n\t\n\t      function buildMessage(expected, found) {\n\t        function stringEscape(s) {\n\t          function hex(ch) {\n\t            return ch.charCodeAt(0).toString(16).toUpperCase();\n\t          }\n\t\n\t          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n\t            return '\\\\x0' + hex(ch);\n\t          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n\t            return '\\\\x' + hex(ch);\n\t          }).replace(/[\\u0180-\\u0FFF]/g, function (ch) {\n\t            return \"\\\\u0\" + hex(ch);\n\t          }).replace(/[\\u1080-\\uFFFF]/g, function (ch) {\n\t            return \"\\\\u\" + hex(ch);\n\t          });\n\t        }\n\t\n\t        var expectedDescs = new Array(expected.length),\n\t            expectedDesc,\n\t            foundDesc,\n\t            i;\n\t\n\t        for (i = 0; i < expected.length; i++) {\n\t          expectedDescs[i] = expected[i].description;\n\t        }\n\t\n\t        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n\t\n\t        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\t\n\t        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n\t      }\n\t\n\t      var posDetails = peg$computePosDetails(pos),\n\t          found = pos < input.length ? input.charAt(pos) : null;\n\t\n\t      if (expected !== null) {\n\t        cleanupExpected(expected);\n\t      }\n\t\n\t      return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);\n\t    }\n\t\n\t    function peg$parsevisualFormatString() {\n\t      var s0, s1, s2, s3, s4, s5, s6, s7;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$currPos;\n\t      s2 = peg$parseorientation();\n\t      if (s2 !== peg$FAILED) {\n\t        if (input.charCodeAt(peg$currPos) === 58) {\n\t          s3 = peg$c2;\n\t          peg$currPos++;\n\t        } else {\n\t          s3 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c3);\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          s2 = [s2, s3];\n\t          s1 = s2;\n\t        } else {\n\t          peg$currPos = s1;\n\t          s1 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s1;\n\t        s1 = peg$c0;\n\t      }\n\t      if (s1 === peg$FAILED) {\n\t        s1 = peg$c1;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$currPos;\n\t        s3 = peg$parsesuperview();\n\t        if (s3 !== peg$FAILED) {\n\t          s4 = peg$parseconnection();\n\t          if (s4 !== peg$FAILED) {\n\t            s3 = [s3, s4];\n\t            s2 = s3;\n\t          } else {\n\t            peg$currPos = s2;\n\t            s2 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s2;\n\t          s2 = peg$c0;\n\t        }\n\t        if (s2 === peg$FAILED) {\n\t          s2 = peg$c1;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parseview();\n\t          if (s3 !== peg$FAILED) {\n\t            s4 = [];\n\t            s5 = peg$currPos;\n\t            s6 = peg$parseconnection();\n\t            if (s6 !== peg$FAILED) {\n\t              s7 = peg$parseview();\n\t              if (s7 !== peg$FAILED) {\n\t                s6 = [s6, s7];\n\t                s5 = s6;\n\t              } else {\n\t                peg$currPos = s5;\n\t                s5 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s5;\n\t              s5 = peg$c0;\n\t            }\n\t            while (s5 !== peg$FAILED) {\n\t              s4.push(s5);\n\t              s5 = peg$currPos;\n\t              s6 = peg$parseconnection();\n\t              if (s6 !== peg$FAILED) {\n\t                s7 = peg$parseview();\n\t                if (s7 !== peg$FAILED) {\n\t                  s6 = [s6, s7];\n\t                  s5 = s6;\n\t                } else {\n\t                  peg$currPos = s5;\n\t                  s5 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s5;\n\t                s5 = peg$c0;\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              s5 = peg$currPos;\n\t              s6 = peg$parseconnection();\n\t              if (s6 !== peg$FAILED) {\n\t                s7 = peg$parsesuperview();\n\t                if (s7 !== peg$FAILED) {\n\t                  s6 = [s6, s7];\n\t                  s5 = s6;\n\t                } else {\n\t                  peg$currPos = s5;\n\t                  s5 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s5;\n\t                s5 = peg$c0;\n\t              }\n\t              if (s5 === peg$FAILED) {\n\t                s5 = peg$c1;\n\t              }\n\t              if (s5 !== peg$FAILED) {\n\t                peg$reportedPos = s0;\n\t                s1 = peg$c5(s1, s2, s3, s4, s5);\n\t                s0 = s1;\n\t              } else {\n\t                peg$currPos = s0;\n\t                s0 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseorientation() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 72) {\n\t        s1 = peg$c6;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c7);\n\t        }\n\t      }\n\t      if (s1 === peg$FAILED) {\n\t        if (input.charCodeAt(peg$currPos) === 86) {\n\t          s1 = peg$c8;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c9);\n\t          }\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c10(s1);\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsesuperview() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 124) {\n\t        s1 = peg$c11;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c12);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c13();\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseview() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 91) {\n\t        s1 = peg$c14;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c15);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseviewName();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parsepredicateListWithParens();\n\t          if (s3 === peg$FAILED) {\n\t            s3 = peg$c1;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 93) {\n\t              s4 = peg$c16;\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c17);\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c18(s2, s3);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseconnection() {\n\t      var s0, s1, s2, s3;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 45) {\n\t        s1 = peg$c19;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c20);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parsepredicateList();\n\t        if (s2 !== peg$FAILED) {\n\t          if (input.charCodeAt(peg$currPos) === 45) {\n\t            s3 = peg$c19;\n\t            peg$currPos++;\n\t          } else {\n\t            s3 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c20);\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c21(s2);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.charCodeAt(peg$currPos) === 45) {\n\t          s1 = peg$c19;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c20);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c22();\n\t        }\n\t        s0 = s1;\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          s1 = peg$c23;\n\t          if (s1 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c24();\n\t          }\n\t          s0 = s1;\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepredicateList() {\n\t      var s0;\n\t\n\t      s0 = peg$parsesimplePredicate();\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$parsepredicateListWithParens();\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsesimplePredicate() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parsenumber();\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c25(s1);\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepredicateListWithParens() {\n\t      var s0, s1, s2, s3, s4, s5, s6;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 40) {\n\t        s1 = peg$c26;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c27);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parsepredicate();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          s4 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 44) {\n\t            s5 = peg$c28;\n\t            peg$currPos++;\n\t          } else {\n\t            s5 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c29);\n\t            }\n\t          }\n\t          if (s5 !== peg$FAILED) {\n\t            s6 = peg$parsepredicate();\n\t            if (s6 !== peg$FAILED) {\n\t              s5 = [s5, s6];\n\t              s4 = s5;\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s4;\n\t            s4 = peg$c0;\n\t          }\n\t          while (s4 !== peg$FAILED) {\n\t            s3.push(s4);\n\t            s4 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 44) {\n\t              s5 = peg$c28;\n\t              peg$currPos++;\n\t            } else {\n\t              s5 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c29);\n\t              }\n\t            }\n\t            if (s5 !== peg$FAILED) {\n\t              s6 = peg$parsepredicate();\n\t              if (s6 !== peg$FAILED) {\n\t                s5 = [s5, s6];\n\t                s4 = s5;\n\t              } else {\n\t                peg$currPos = s4;\n\t                s4 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 41) {\n\t              s4 = peg$c30;\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c31);\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c32(s2, s3);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepredicate() {\n\t      var s0, s1, s2, s3, s4, s5;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parserelation();\n\t      if (s1 === peg$FAILED) {\n\t        s1 = peg$c1;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseobjectOfPredicate();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 64) {\n\t            s4 = peg$c33;\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c34);\n\t            }\n\t          }\n\t          if (s4 !== peg$FAILED) {\n\t            s5 = peg$parsepriority();\n\t            if (s5 !== peg$FAILED) {\n\t              s4 = [s4, s5];\n\t              s3 = s4;\n\t            } else {\n\t              peg$currPos = s3;\n\t              s3 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s3;\n\t            s3 = peg$c0;\n\t          }\n\t          if (s3 === peg$FAILED) {\n\t            s3 = peg$c1;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c35(s1, s2, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parserelation() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 2) === peg$c36) {\n\t        s1 = peg$c36;\n\t        peg$currPos += 2;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c37);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c38();\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.substr(peg$currPos, 2) === peg$c39) {\n\t          s1 = peg$c39;\n\t          peg$currPos += 2;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c40);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c41();\n\t        }\n\t        s0 = s1;\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.substr(peg$currPos, 2) === peg$c42) {\n\t            s1 = peg$c42;\n\t            peg$currPos += 2;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c43);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c44();\n\t          }\n\t          s0 = s1;\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseobjectOfPredicate() {\n\t      var s0;\n\t\n\t      s0 = peg$parseconstant();\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$parseviewName();\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepriority() {\n\t      var s0, s1, s2;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = [];\n\t      if (peg$c45.test(input.charAt(peg$currPos))) {\n\t        s2 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s2 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c46);\n\t        }\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        while (s2 !== peg$FAILED) {\n\t          s1.push(s2);\n\t          if (peg$c45.test(input.charAt(peg$currPos))) {\n\t            s2 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s2 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c46);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s1 = peg$c0;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c47(s1);\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseconstant() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parsenumber();\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c48(s1);\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseviewName() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$currPos;\n\t      s2 = [];\n\t      if (peg$c49.test(input.charAt(peg$currPos))) {\n\t        s3 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s3 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c50);\n\t        }\n\t      }\n\t      if (s3 !== peg$FAILED) {\n\t        while (s3 !== peg$FAILED) {\n\t          s2.push(s3);\n\t          if (peg$c49.test(input.charAt(peg$currPos))) {\n\t            s3 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s3 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c50);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s2 = peg$c0;\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        s2 = input.substring(s1, peg$currPos);\n\t      }\n\t      s1 = s2;\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$currPos;\n\t        s3 = [];\n\t        if (peg$c51.test(input.charAt(peg$currPos))) {\n\t          s4 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s4 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c52);\n\t          }\n\t        }\n\t        while (s4 !== peg$FAILED) {\n\t          s3.push(s4);\n\t          if (peg$c51.test(input.charAt(peg$currPos))) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c52);\n\t            }\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          s3 = input.substring(s2, peg$currPos);\n\t        }\n\t        s2 = s3;\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c53(s1, s2);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsenumber() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = [];\n\t      if (peg$c45.test(input.charAt(peg$currPos))) {\n\t        s2 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s2 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c46);\n\t        }\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        while (s2 !== peg$FAILED) {\n\t          s1.push(s2);\n\t          if (peg$c45.test(input.charAt(peg$currPos))) {\n\t            s2 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s2 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c46);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s1 = peg$c0;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        if (input.charCodeAt(peg$currPos) === 46) {\n\t          s2 = peg$c54;\n\t          peg$currPos++;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c55);\n\t          }\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          if (peg$c45.test(input.charAt(peg$currPos))) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c46);\n\t            }\n\t          }\n\t          if (s4 !== peg$FAILED) {\n\t            while (s4 !== peg$FAILED) {\n\t              s3.push(s4);\n\t              if (peg$c45.test(input.charAt(peg$currPos))) {\n\t                s4 = input.charAt(peg$currPos);\n\t                peg$currPos++;\n\t              } else {\n\t                s4 = peg$FAILED;\n\t                if (peg$silentFails === 0) {\n\t                  peg$fail(peg$c46);\n\t                }\n\t              }\n\t            }\n\t          } else {\n\t            s3 = peg$c0;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c56(s1, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        s1 = [];\n\t        if (peg$c45.test(input.charAt(peg$currPos))) {\n\t          s2 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c46);\n\t          }\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          while (s2 !== peg$FAILED) {\n\t            s1.push(s2);\n\t            if (peg$c45.test(input.charAt(peg$currPos))) {\n\t              s2 = input.charAt(peg$currPos);\n\t              peg$currPos++;\n\t            } else {\n\t              s2 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c46);\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          s1 = peg$c0;\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c57(s1);\n\t        }\n\t        s0 = s1;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function extend(dst) {\n\t      for (var i = 1; i < arguments.length; i++) {\n\t        for (var k in arguments[i]) {\n\t          dst[k] = arguments[i][k];\n\t        }\n\t      }\n\t      return dst;\n\t    }\n\t\n\t    peg$result = peg$startRuleFunction();\n\t\n\t    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n\t      return peg$result;\n\t    } else {\n\t      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n\t        peg$fail({ type: \"end\", description: \"end of input\" });\n\t      }\n\t\n\t      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n\t    }\n\t  }\n\t\n\t  return {\n\t    SyntaxError: SyntaxError,\n\t    parse: parse\n\t  };\n\t}();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\texports.default = function () {\n\t  /*\n\t   * Generated by PEG.js 0.8.0.\n\t   *\n\t   * http://pegjs.majda.cz/\n\t   */\n\t\n\t  function peg$subclass(child, parent) {\n\t    function ctor() {\n\t      this.constructor = child;\n\t    }\n\t    ctor.prototype = parent.prototype;\n\t    child.prototype = new ctor();\n\t  }\n\t\n\t  function SyntaxError(message, expected, found, offset, line, column) {\n\t    this.message = message;\n\t    this.expected = expected;\n\t    this.found = found;\n\t    this.offset = offset;\n\t    this.line = line;\n\t    this.column = column;\n\t\n\t    this.name = \"SyntaxError\";\n\t  }\n\t\n\t  peg$subclass(SyntaxError, Error);\n\t\n\t  function parse(input) {\n\t    var options = arguments.length > 1 ? arguments[1] : {},\n\t        peg$FAILED = {},\n\t        peg$startRuleFunctions = { visualFormatStringExt: peg$parsevisualFormatStringExt },\n\t        peg$startRuleFunction = peg$parsevisualFormatStringExt,\n\t        peg$c0 = peg$FAILED,\n\t        peg$c1 = null,\n\t        peg$c2 = function peg$c2(viewAttrLeft, predicates, comments) {\n\t      return {\n\t        type: 'attribute',\n\t        view: viewAttrLeft.view,\n\t        attr: viewAttrLeft.attr,\n\t        predicates: predicates\n\t      };\n\t    },\n\t        peg$c3 = \"A:\",\n\t        peg$c4 = { type: \"literal\", value: \"A:\", description: \"\\\"A:\\\"\" },\n\t        peg$c5 = function peg$c5() {\n\t      return 'attribute';\n\t    },\n\t        peg$c6 = function peg$c6(view, attr) {\n\t      return { view: view.view, attr: attr };\n\t    },\n\t        peg$c7 = \":\",\n\t        peg$c8 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n\t        peg$c9 = [],\n\t        peg$c10 = function peg$c10(o, superto, view, views, tosuper, comments) {\n\t      return {\n\t        type: 'vfl',\n\t        orientation: o ? o[0] : 'horizontal',\n\t        cascade: (superto || []).concat(view, [].concat.apply([], views), tosuper || [])\n\t      };\n\t    },\n\t        peg$c11 = \"HV\",\n\t        peg$c12 = { type: \"literal\", value: \"HV\", description: \"\\\"HV\\\"\" },\n\t        peg$c13 = function peg$c13() {\n\t      return 'horzvert';\n\t    },\n\t        peg$c14 = \"H\",\n\t        peg$c15 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n\t        peg$c16 = function peg$c16() {\n\t      return 'horizontal';\n\t    },\n\t        peg$c17 = \"V\",\n\t        peg$c18 = { type: \"literal\", value: \"V\", description: \"\\\"V\\\"\" },\n\t        peg$c19 = function peg$c19() {\n\t      return 'vertical';\n\t    },\n\t        peg$c20 = \"Z\",\n\t        peg$c21 = { type: \"literal\", value: \"Z\", description: \"\\\"Z\\\"\" },\n\t        peg$c22 = function peg$c22() {\n\t      return 'zIndex';\n\t    },\n\t        peg$c23 = \" \",\n\t        peg$c24 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n\t        peg$c25 = \"//\",\n\t        peg$c26 = { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n\t        peg$c27 = { type: \"any\", description: \"any character\" },\n\t        peg$c28 = \"|\",\n\t        peg$c29 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n\t        peg$c30 = function peg$c30() {\n\t      return { view: null };\n\t    },\n\t        peg$c31 = \"[\",\n\t        peg$c32 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n\t        peg$c33 = \",\",\n\t        peg$c34 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n\t        peg$c35 = \"]\",\n\t        peg$c36 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n\t        peg$c37 = function peg$c37(view, views) {\n\t      return views.length ? [view].concat([].concat.apply([], views)) : view;\n\t    },\n\t        peg$c38 = function peg$c38(view, predicates, cascadedViews) {\n\t      return extend(extend(view, predicates ? { constraints: predicates } : {}), cascadedViews ? {\n\t        cascade: cascadedViews\n\t      } : {});\n\t    },\n\t        peg$c39 = function peg$c39(views, connection) {\n\t      return [].concat([].concat.apply([], views), [connection]);\n\t    },\n\t        peg$c40 = \"->\",\n\t        peg$c41 = { type: \"literal\", value: \"->\", description: \"\\\"->\\\"\" },\n\t        peg$c42 = function peg$c42() {\n\t      return [{ relation: 'none' }];\n\t    },\n\t        peg$c43 = \"-\",\n\t        peg$c44 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n\t        peg$c45 = function peg$c45(predicateList) {\n\t      return predicateList;\n\t    },\n\t        peg$c46 = function peg$c46() {\n\t      return [{ relation: 'equ', constant: 'default' }];\n\t    },\n\t        peg$c47 = \"~\",\n\t        peg$c48 = { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n\t        peg$c49 = function peg$c49() {\n\t      return [{ relation: 'equ', equalSpacing: true }];\n\t    },\n\t        peg$c50 = \"\",\n\t        peg$c51 = function peg$c51() {\n\t      return [{ relation: 'equ', constant: 0 }];\n\t    },\n\t        peg$c52 = function peg$c52(p) {\n\t      return [{ relation: 'equ', multiplier: p.multiplier }];\n\t    },\n\t        peg$c53 = function peg$c53(n) {\n\t      return [{ relation: 'equ', constant: n }];\n\t    },\n\t        peg$c54 = \"(\",\n\t        peg$c55 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n\t        peg$c56 = \")\",\n\t        peg$c57 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n\t        peg$c58 = function peg$c58(p, ps) {\n\t      return [p].concat(ps.map(function (p) {\n\t        return p[1];\n\t      }));\n\t    },\n\t        peg$c59 = \"@\",\n\t        peg$c60 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n\t        peg$c61 = function peg$c61(r, o, p) {\n\t      return extend({ relation: 'equ' }, r || {}, o, p ? p[1] : {});\n\t    },\n\t        peg$c62 = function peg$c62(r, o, p) {\n\t      return extend({ relation: 'equ', equalSpacing: true }, r || {}, o, p ? p[1] : {});\n\t    },\n\t        peg$c63 = \"==\",\n\t        peg$c64 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n\t        peg$c65 = function peg$c65() {\n\t      return { relation: 'equ' };\n\t    },\n\t        peg$c66 = \"<=\",\n\t        peg$c67 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n\t        peg$c68 = function peg$c68() {\n\t      return { relation: 'leq' };\n\t    },\n\t        peg$c69 = \">=\",\n\t        peg$c70 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n\t        peg$c71 = function peg$c71() {\n\t      return { relation: 'geq' };\n\t    },\n\t        peg$c72 = /^[0-9]/,\n\t        peg$c73 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n\t        peg$c74 = function peg$c74(digits) {\n\t      return { priority: parseInt(digits.join(\"\"), 10) };\n\t    },\n\t        peg$c75 = function peg$c75(n) {\n\t      return { constant: n };\n\t    },\n\t        peg$c76 = function peg$c76(n) {\n\t      return { constant: -n };\n\t    },\n\t        peg$c77 = \"+\",\n\t        peg$c78 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n\t        peg$c79 = \"%\",\n\t        peg$c80 = { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n\t        peg$c81 = function peg$c81(n) {\n\t      return { view: null, multiplier: n / 100 };\n\t    },\n\t        peg$c82 = function peg$c82(n) {\n\t      return { view: null, multiplier: n / -100 };\n\t    },\n\t        peg$c83 = function peg$c83(vn, a, m, c) {\n\t      return { view: vn.view, attribute: a ? a : undefined, multiplier: m ? m : 1, constant: c ? c : undefined };\n\t    },\n\t        peg$c84 = \".left\",\n\t        peg$c85 = { type: \"literal\", value: \".left\", description: \"\\\".left\\\"\" },\n\t        peg$c86 = function peg$c86() {\n\t      return 'left';\n\t    },\n\t        peg$c87 = \".right\",\n\t        peg$c88 = { type: \"literal\", value: \".right\", description: \"\\\".right\\\"\" },\n\t        peg$c89 = function peg$c89() {\n\t      return 'right';\n\t    },\n\t        peg$c90 = \".top\",\n\t        peg$c91 = { type: \"literal\", value: \".top\", description: \"\\\".top\\\"\" },\n\t        peg$c92 = function peg$c92() {\n\t      return 'top';\n\t    },\n\t        peg$c93 = \".bottom\",\n\t        peg$c94 = { type: \"literal\", value: \".bottom\", description: \"\\\".bottom\\\"\" },\n\t        peg$c95 = function peg$c95() {\n\t      return 'bottom';\n\t    },\n\t        peg$c96 = \".width\",\n\t        peg$c97 = { type: \"literal\", value: \".width\", description: \"\\\".width\\\"\" },\n\t        peg$c98 = function peg$c98() {\n\t      return 'width';\n\t    },\n\t        peg$c99 = \".height\",\n\t        peg$c100 = { type: \"literal\", value: \".height\", description: \"\\\".height\\\"\" },\n\t        peg$c101 = function peg$c101() {\n\t      return 'height';\n\t    },\n\t        peg$c102 = \".centerX\",\n\t        peg$c103 = { type: \"literal\", value: \".centerX\", description: \"\\\".centerX\\\"\" },\n\t        peg$c104 = function peg$c104() {\n\t      return 'centerX';\n\t    },\n\t        peg$c105 = \".centerY\",\n\t        peg$c106 = { type: \"literal\", value: \".centerY\", description: \"\\\".centerY\\\"\" },\n\t        peg$c107 = function peg$c107() {\n\t      return 'centerY';\n\t    },\n\t        peg$c108 = \"/\",\n\t        peg$c109 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n\t        peg$c110 = function peg$c110(n) {\n\t      return 1 / n;\n\t    },\n\t        peg$c111 = \"/+\",\n\t        peg$c112 = { type: \"literal\", value: \"/+\", description: \"\\\"/+\\\"\" },\n\t        peg$c113 = \"/-\",\n\t        peg$c114 = { type: \"literal\", value: \"/-\", description: \"\\\"/-\\\"\" },\n\t        peg$c115 = function peg$c115(n) {\n\t      return -1 / n;\n\t    },\n\t        peg$c116 = \"*\",\n\t        peg$c117 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n\t        peg$c118 = function peg$c118(n) {\n\t      return n;\n\t    },\n\t        peg$c119 = \"*+\",\n\t        peg$c120 = { type: \"literal\", value: \"*+\", description: \"\\\"*+\\\"\" },\n\t        peg$c121 = \"*-\",\n\t        peg$c122 = { type: \"literal\", value: \"*-\", description: \"\\\"*-\\\"\" },\n\t        peg$c123 = function peg$c123(n) {\n\t      return -n;\n\t    },\n\t        peg$c124 = /^[a-zA-Z_]/,\n\t        peg$c125 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n\t        peg$c126 = /^[a-zA-Z0-9_]/,\n\t        peg$c127 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\n\t        peg$c128 = function peg$c128(f, v, r) {\n\t      return { view: f + v, range: r, $parserOffset: offset() };\n\t    },\n\t        peg$c129 = function peg$c129(f, v) {\n\t      return { view: f + v, $parserOffset: offset() };\n\t    },\n\t        peg$c130 = \"..\",\n\t        peg$c131 = { type: \"literal\", value: \"..\", description: \"\\\"..\\\"\" },\n\t        peg$c132 = function peg$c132(d) {\n\t      return parseInt(d);\n\t    },\n\t        peg$c133 = \".\",\n\t        peg$c134 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n\t        peg$c135 = function peg$c135(digits, decimals) {\n\t      return parseFloat(digits.concat(\".\").concat(decimals).join(\"\"), 10);\n\t    },\n\t        peg$c136 = function peg$c136(digits) {\n\t      return parseInt(digits.join(\"\"), 10);\n\t    },\n\t        peg$currPos = 0,\n\t        peg$reportedPos = 0,\n\t        peg$cachedPos = 0,\n\t        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n\t        peg$maxFailPos = 0,\n\t        peg$maxFailExpected = [],\n\t        peg$silentFails = 0,\n\t        peg$result;\n\t\n\t    if (\"startRule\" in options) {\n\t      if (!(options.startRule in peg$startRuleFunctions)) {\n\t        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n\t      }\n\t\n\t      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n\t    }\n\t\n\t    function text() {\n\t      return input.substring(peg$reportedPos, peg$currPos);\n\t    }\n\t\n\t    function offset() {\n\t      return peg$reportedPos;\n\t    }\n\t\n\t    function line() {\n\t      return peg$computePosDetails(peg$reportedPos).line;\n\t    }\n\t\n\t    function column() {\n\t      return peg$computePosDetails(peg$reportedPos).column;\n\t    }\n\t\n\t    function expected(description) {\n\t      throw peg$buildException(null, [{ type: \"other\", description: description }], peg$reportedPos);\n\t    }\n\t\n\t    function error(message) {\n\t      throw peg$buildException(message, null, peg$reportedPos);\n\t    }\n\t\n\t    function peg$computePosDetails(pos) {\n\t      function advance(details, startPos, endPos) {\n\t        var p, ch;\n\t\n\t        for (p = startPos; p < endPos; p++) {\n\t          ch = input.charAt(p);\n\t          if (ch === \"\\n\") {\n\t            if (!details.seenCR) {\n\t              details.line++;\n\t            }\n\t            details.column = 1;\n\t            details.seenCR = false;\n\t          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\t            details.line++;\n\t            details.column = 1;\n\t            details.seenCR = true;\n\t          } else {\n\t            details.column++;\n\t            details.seenCR = false;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (peg$cachedPos !== pos) {\n\t        if (peg$cachedPos > pos) {\n\t          peg$cachedPos = 0;\n\t          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n\t        }\n\t        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n\t        peg$cachedPos = pos;\n\t      }\n\t\n\t      return peg$cachedPosDetails;\n\t    }\n\t\n\t    function peg$fail(expected) {\n\t      if (peg$currPos < peg$maxFailPos) {\n\t        return;\n\t      }\n\t\n\t      if (peg$currPos > peg$maxFailPos) {\n\t        peg$maxFailPos = peg$currPos;\n\t        peg$maxFailExpected = [];\n\t      }\n\t\n\t      peg$maxFailExpected.push(expected);\n\t    }\n\t\n\t    function peg$buildException(message, expected, pos) {\n\t      function cleanupExpected(expected) {\n\t        var i = 1;\n\t\n\t        expected.sort(function (a, b) {\n\t          if (a.description < b.description) {\n\t            return -1;\n\t          } else if (a.description > b.description) {\n\t            return 1;\n\t          } else {\n\t            return 0;\n\t          }\n\t        });\n\t\n\t        while (i < expected.length) {\n\t          if (expected[i - 1] === expected[i]) {\n\t            expected.splice(i, 1);\n\t          } else {\n\t            i++;\n\t          }\n\t        }\n\t      }\n\t\n\t      function buildMessage(expected, found) {\n\t        function stringEscape(s) {\n\t          function hex(ch) {\n\t            return ch.charCodeAt(0).toString(16).toUpperCase();\n\t          }\n\t\n\t          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n\t            return '\\\\x0' + hex(ch);\n\t          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n\t            return '\\\\x' + hex(ch);\n\t          }).replace(/[\\u0180-\\u0FFF]/g, function (ch) {\n\t            return \"\\\\u0\" + hex(ch);\n\t          }).replace(/[\\u1080-\\uFFFF]/g, function (ch) {\n\t            return \"\\\\u\" + hex(ch);\n\t          });\n\t        }\n\t\n\t        var expectedDescs = new Array(expected.length),\n\t            expectedDesc,\n\t            foundDesc,\n\t            i;\n\t\n\t        for (i = 0; i < expected.length; i++) {\n\t          expectedDescs[i] = expected[i].description;\n\t        }\n\t\n\t        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n\t\n\t        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\t\n\t        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n\t      }\n\t\n\t      var posDetails = peg$computePosDetails(pos),\n\t          found = pos < input.length ? input.charAt(pos) : null;\n\t\n\t      if (expected !== null) {\n\t        cleanupExpected(expected);\n\t      }\n\t\n\t      return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);\n\t    }\n\t\n\t    function peg$parsevisualFormatStringExt() {\n\t      var s0;\n\t\n\t      s0 = peg$parsevisualFormatString();\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$parsevisualFormatStringAttributeExpression();\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsevisualFormatStringAttributeExpression() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parseattributeMark();\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseattributeSignifier();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parsepredicateList();\n\t          if (s3 !== peg$FAILED) {\n\t            s4 = peg$parsecomments();\n\t            if (s4 === peg$FAILED) {\n\t              s4 = peg$c1;\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c2(s2, s3, s4);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseattributeMark() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 2) === peg$c3) {\n\t        s1 = peg$c3;\n\t        peg$currPos += 2;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c4);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c5();\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseattributeSignifier() {\n\t      var s0, s1, s2;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parseviewName();\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseattribute();\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c6(s1, s2);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsevisualFormatString() {\n\t      var s0, s1, s2, s3, s4, s5, s6, s7;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$currPos;\n\t      s2 = peg$parseorientation();\n\t      if (s2 !== peg$FAILED) {\n\t        if (input.charCodeAt(peg$currPos) === 58) {\n\t          s3 = peg$c7;\n\t          peg$currPos++;\n\t        } else {\n\t          s3 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c8);\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          s2 = [s2, s3];\n\t          s1 = s2;\n\t        } else {\n\t          peg$currPos = s1;\n\t          s1 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s1;\n\t        s1 = peg$c0;\n\t      }\n\t      if (s1 === peg$FAILED) {\n\t        s1 = peg$c1;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$currPos;\n\t        s3 = peg$parsesuperview();\n\t        if (s3 !== peg$FAILED) {\n\t          s4 = peg$parseconnection();\n\t          if (s4 !== peg$FAILED) {\n\t            s3 = [s3, s4];\n\t            s2 = s3;\n\t          } else {\n\t            peg$currPos = s2;\n\t            s2 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s2;\n\t          s2 = peg$c0;\n\t        }\n\t        if (s2 === peg$FAILED) {\n\t          s2 = peg$c1;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parseviewGroup();\n\t          if (s3 !== peg$FAILED) {\n\t            s4 = [];\n\t            s5 = peg$currPos;\n\t            s6 = peg$parseconnection();\n\t            if (s6 !== peg$FAILED) {\n\t              s7 = peg$parseviewGroup();\n\t              if (s7 !== peg$FAILED) {\n\t                s6 = [s6, s7];\n\t                s5 = s6;\n\t              } else {\n\t                peg$currPos = s5;\n\t                s5 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s5;\n\t              s5 = peg$c0;\n\t            }\n\t            while (s5 !== peg$FAILED) {\n\t              s4.push(s5);\n\t              s5 = peg$currPos;\n\t              s6 = peg$parseconnection();\n\t              if (s6 !== peg$FAILED) {\n\t                s7 = peg$parseviewGroup();\n\t                if (s7 !== peg$FAILED) {\n\t                  s6 = [s6, s7];\n\t                  s5 = s6;\n\t                } else {\n\t                  peg$currPos = s5;\n\t                  s5 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s5;\n\t                s5 = peg$c0;\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              s5 = peg$currPos;\n\t              s6 = peg$parseconnection();\n\t              if (s6 !== peg$FAILED) {\n\t                s7 = peg$parsesuperview();\n\t                if (s7 !== peg$FAILED) {\n\t                  s6 = [s6, s7];\n\t                  s5 = s6;\n\t                } else {\n\t                  peg$currPos = s5;\n\t                  s5 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s5;\n\t                s5 = peg$c0;\n\t              }\n\t              if (s5 === peg$FAILED) {\n\t                s5 = peg$c1;\n\t              }\n\t              if (s5 !== peg$FAILED) {\n\t                s6 = peg$parsecomments();\n\t                if (s6 === peg$FAILED) {\n\t                  s6 = peg$c1;\n\t                }\n\t                if (s6 !== peg$FAILED) {\n\t                  peg$reportedPos = s0;\n\t                  s1 = peg$c10(s1, s2, s3, s4, s5, s6);\n\t                  s0 = s1;\n\t                } else {\n\t                  peg$currPos = s0;\n\t                  s0 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s0;\n\t                s0 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseorientation() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 2) === peg$c11) {\n\t        s1 = peg$c11;\n\t        peg$currPos += 2;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c12);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c13();\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.charCodeAt(peg$currPos) === 72) {\n\t          s1 = peg$c14;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c15);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c16();\n\t        }\n\t        s0 = s1;\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 86) {\n\t            s1 = peg$c17;\n\t            peg$currPos++;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c18);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c19();\n\t          }\n\t          s0 = s1;\n\t          if (s0 === peg$FAILED) {\n\t            s0 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 90) {\n\t              s1 = peg$c20;\n\t              peg$currPos++;\n\t            } else {\n\t              s1 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c21);\n\t              }\n\t            }\n\t            if (s1 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c22();\n\t            }\n\t            s0 = s1;\n\t          }\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsecomments() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = [];\n\t      if (input.charCodeAt(peg$currPos) === 32) {\n\t        s2 = peg$c23;\n\t        peg$currPos++;\n\t      } else {\n\t        s2 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c24);\n\t        }\n\t      }\n\t      while (s2 !== peg$FAILED) {\n\t        s1.push(s2);\n\t        if (input.charCodeAt(peg$currPos) === 32) {\n\t          s2 = peg$c23;\n\t          peg$currPos++;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c24);\n\t          }\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        if (input.substr(peg$currPos, 2) === peg$c25) {\n\t          s2 = peg$c25;\n\t          peg$currPos += 2;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c26);\n\t          }\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          if (input.length > peg$currPos) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c27);\n\t            }\n\t          }\n\t          while (s4 !== peg$FAILED) {\n\t            s3.push(s4);\n\t            if (input.length > peg$currPos) {\n\t              s4 = input.charAt(peg$currPos);\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c27);\n\t              }\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            s1 = [s1, s2, s3];\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsesuperview() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 124) {\n\t        s1 = peg$c28;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c29);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c30();\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseviewGroup() {\n\t      var s0, s1, s2, s3, s4, s5, s6;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 91) {\n\t        s1 = peg$c31;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c32);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseview();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          s4 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 44) {\n\t            s5 = peg$c33;\n\t            peg$currPos++;\n\t          } else {\n\t            s5 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c34);\n\t            }\n\t          }\n\t          if (s5 !== peg$FAILED) {\n\t            s6 = peg$parseview();\n\t            if (s6 !== peg$FAILED) {\n\t              s5 = [s5, s6];\n\t              s4 = s5;\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s4;\n\t            s4 = peg$c0;\n\t          }\n\t          while (s4 !== peg$FAILED) {\n\t            s3.push(s4);\n\t            s4 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 44) {\n\t              s5 = peg$c33;\n\t              peg$currPos++;\n\t            } else {\n\t              s5 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c34);\n\t              }\n\t            }\n\t            if (s5 !== peg$FAILED) {\n\t              s6 = peg$parseview();\n\t              if (s6 !== peg$FAILED) {\n\t                s5 = [s5, s6];\n\t                s4 = s5;\n\t              } else {\n\t                peg$currPos = s4;\n\t                s4 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 93) {\n\t              s4 = peg$c35;\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c36);\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c37(s2, s3);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseview() {\n\t      var s0, s1, s2, s3;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parseviewNameRange();\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parsepredicateListWithParens();\n\t        if (s2 === peg$FAILED) {\n\t          s2 = peg$c1;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parsecascadedViews();\n\t          if (s3 === peg$FAILED) {\n\t            s3 = peg$c1;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c38(s1, s2, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsecascadedViews() {\n\t      var s0, s1, s2, s3, s4, s5;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 58) {\n\t        s1 = peg$c7;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c8);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = [];\n\t        s3 = peg$currPos;\n\t        s4 = peg$parseconnection();\n\t        if (s4 !== peg$FAILED) {\n\t          s5 = peg$parseviewGroup();\n\t          if (s5 !== peg$FAILED) {\n\t            s4 = [s4, s5];\n\t            s3 = s4;\n\t          } else {\n\t            peg$currPos = s3;\n\t            s3 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s3;\n\t          s3 = peg$c0;\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          while (s3 !== peg$FAILED) {\n\t            s2.push(s3);\n\t            s3 = peg$currPos;\n\t            s4 = peg$parseconnection();\n\t            if (s4 !== peg$FAILED) {\n\t              s5 = peg$parseviewGroup();\n\t              if (s5 !== peg$FAILED) {\n\t                s4 = [s4, s5];\n\t                s3 = s4;\n\t              } else {\n\t                peg$currPos = s3;\n\t                s3 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s3;\n\t              s3 = peg$c0;\n\t            }\n\t          }\n\t        } else {\n\t          s2 = peg$c0;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parseconnection();\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c39(s2, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseconnection() {\n\t      var s0, s1, s2, s3;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 2) === peg$c40) {\n\t        s1 = peg$c40;\n\t        peg$currPos += 2;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c41);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c42();\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.charCodeAt(peg$currPos) === 45) {\n\t          s1 = peg$c43;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c44);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          s2 = peg$parsepredicateList();\n\t          if (s2 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 45) {\n\t              s3 = peg$c43;\n\t              peg$currPos++;\n\t            } else {\n\t              s3 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c44);\n\t              }\n\t            }\n\t            if (s3 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c45(s2);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 45) {\n\t            s1 = peg$c43;\n\t            peg$currPos++;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c44);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c46();\n\t          }\n\t          s0 = s1;\n\t          if (s0 === peg$FAILED) {\n\t            s0 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 126) {\n\t              s1 = peg$c47;\n\t              peg$currPos++;\n\t            } else {\n\t              s1 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c48);\n\t              }\n\t            }\n\t            if (s1 !== peg$FAILED) {\n\t              s2 = peg$parseequalSpacingPredicateList();\n\t              if (s2 !== peg$FAILED) {\n\t                if (input.charCodeAt(peg$currPos) === 126) {\n\t                  s3 = peg$c47;\n\t                  peg$currPos++;\n\t                } else {\n\t                  s3 = peg$FAILED;\n\t                  if (peg$silentFails === 0) {\n\t                    peg$fail(peg$c48);\n\t                  }\n\t                }\n\t                if (s3 !== peg$FAILED) {\n\t                  peg$reportedPos = s0;\n\t                  s1 = peg$c45(s2);\n\t                  s0 = s1;\n\t                } else {\n\t                  peg$currPos = s0;\n\t                  s0 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s0;\n\t                s0 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t            if (s0 === peg$FAILED) {\n\t              s0 = peg$currPos;\n\t              if (input.charCodeAt(peg$currPos) === 126) {\n\t                s1 = peg$c47;\n\t                peg$currPos++;\n\t              } else {\n\t                s1 = peg$FAILED;\n\t                if (peg$silentFails === 0) {\n\t                  peg$fail(peg$c48);\n\t                }\n\t              }\n\t              if (s1 !== peg$FAILED) {\n\t                peg$reportedPos = s0;\n\t                s1 = peg$c49();\n\t              }\n\t              s0 = s1;\n\t              if (s0 === peg$FAILED) {\n\t                s0 = peg$currPos;\n\t                s1 = peg$c50;\n\t                if (s1 !== peg$FAILED) {\n\t                  peg$reportedPos = s0;\n\t                  s1 = peg$c51();\n\t                }\n\t                s0 = s1;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepredicateList() {\n\t      var s0;\n\t\n\t      s0 = peg$parsesimplePredicate();\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$parsepredicateListWithParens();\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsesimplePredicate() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parsepercentage();\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c52(s1);\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        s1 = peg$parsenumber();\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c53(s1);\n\t        }\n\t        s0 = s1;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepredicateListWithParens() {\n\t      var s0, s1, s2, s3, s4, s5, s6;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 40) {\n\t        s1 = peg$c54;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c55);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parsepredicate();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          s4 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 44) {\n\t            s5 = peg$c33;\n\t            peg$currPos++;\n\t          } else {\n\t            s5 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c34);\n\t            }\n\t          }\n\t          if (s5 !== peg$FAILED) {\n\t            s6 = peg$parsepredicate();\n\t            if (s6 !== peg$FAILED) {\n\t              s5 = [s5, s6];\n\t              s4 = s5;\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s4;\n\t            s4 = peg$c0;\n\t          }\n\t          while (s4 !== peg$FAILED) {\n\t            s3.push(s4);\n\t            s4 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 44) {\n\t              s5 = peg$c33;\n\t              peg$currPos++;\n\t            } else {\n\t              s5 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c34);\n\t              }\n\t            }\n\t            if (s5 !== peg$FAILED) {\n\t              s6 = peg$parsepredicate();\n\t              if (s6 !== peg$FAILED) {\n\t                s5 = [s5, s6];\n\t                s4 = s5;\n\t              } else {\n\t                peg$currPos = s4;\n\t                s4 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 41) {\n\t              s4 = peg$c56;\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c57);\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c58(s2, s3);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepredicate() {\n\t      var s0, s1, s2, s3, s4, s5;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parserelation();\n\t      if (s1 === peg$FAILED) {\n\t        s1 = peg$c1;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseobjectOfPredicate();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 64) {\n\t            s4 = peg$c59;\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c60);\n\t            }\n\t          }\n\t          if (s4 !== peg$FAILED) {\n\t            s5 = peg$parsepriority();\n\t            if (s5 !== peg$FAILED) {\n\t              s4 = [s4, s5];\n\t              s3 = s4;\n\t            } else {\n\t              peg$currPos = s3;\n\t              s3 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s3;\n\t            s3 = peg$c0;\n\t          }\n\t          if (s3 === peg$FAILED) {\n\t            s3 = peg$c1;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c61(s1, s2, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseequalSpacingPredicateList() {\n\t      var s0, s1, s2, s3, s4, s5, s6;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 40) {\n\t        s1 = peg$c54;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c55);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseequalSpacingPredicate();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          s4 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 44) {\n\t            s5 = peg$c33;\n\t            peg$currPos++;\n\t          } else {\n\t            s5 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c34);\n\t            }\n\t          }\n\t          if (s5 !== peg$FAILED) {\n\t            s6 = peg$parseequalSpacingPredicate();\n\t            if (s6 !== peg$FAILED) {\n\t              s5 = [s5, s6];\n\t              s4 = s5;\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s4;\n\t            s4 = peg$c0;\n\t          }\n\t          while (s4 !== peg$FAILED) {\n\t            s3.push(s4);\n\t            s4 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 44) {\n\t              s5 = peg$c33;\n\t              peg$currPos++;\n\t            } else {\n\t              s5 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c34);\n\t              }\n\t            }\n\t            if (s5 !== peg$FAILED) {\n\t              s6 = peg$parseequalSpacingPredicate();\n\t              if (s6 !== peg$FAILED) {\n\t                s5 = [s5, s6];\n\t                s4 = s5;\n\t              } else {\n\t                peg$currPos = s4;\n\t                s4 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s4;\n\t              s4 = peg$c0;\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 41) {\n\t              s4 = peg$c56;\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c57);\n\t              }\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c58(s2, s3);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseequalSpacingPredicate() {\n\t      var s0, s1, s2, s3, s4, s5;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parserelation();\n\t      if (s1 === peg$FAILED) {\n\t        s1 = peg$c1;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseobjectOfPredicate();\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 64) {\n\t            s4 = peg$c59;\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c60);\n\t            }\n\t          }\n\t          if (s4 !== peg$FAILED) {\n\t            s5 = peg$parsepriority();\n\t            if (s5 !== peg$FAILED) {\n\t              s4 = [s4, s5];\n\t              s3 = s4;\n\t            } else {\n\t              peg$currPos = s3;\n\t              s3 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s3;\n\t            s3 = peg$c0;\n\t          }\n\t          if (s3 === peg$FAILED) {\n\t            s3 = peg$c1;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c62(s1, s2, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parserelation() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 2) === peg$c63) {\n\t        s1 = peg$c63;\n\t        peg$currPos += 2;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c64);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c65();\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.substr(peg$currPos, 2) === peg$c66) {\n\t          s1 = peg$c66;\n\t          peg$currPos += 2;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c67);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c68();\n\t        }\n\t        s0 = s1;\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.substr(peg$currPos, 2) === peg$c69) {\n\t            s1 = peg$c69;\n\t            peg$currPos += 2;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c70);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c71();\n\t          }\n\t          s0 = s1;\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseobjectOfPredicate() {\n\t      var s0;\n\t\n\t      s0 = peg$parsepercentage();\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$parseconstant();\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$parseviewPredicate();\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepriority() {\n\t      var s0, s1, s2;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = [];\n\t      if (peg$c72.test(input.charAt(peg$currPos))) {\n\t        s2 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s2 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c73);\n\t        }\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        while (s2 !== peg$FAILED) {\n\t          s1.push(s2);\n\t          if (peg$c72.test(input.charAt(peg$currPos))) {\n\t            s2 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s2 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c73);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s1 = peg$c0;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c74(s1);\n\t      }\n\t      s0 = s1;\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseconstant() {\n\t      var s0, s1, s2;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parsenumber();\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c75(s1);\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.charCodeAt(peg$currPos) === 45) {\n\t          s1 = peg$c43;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c44);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          s2 = peg$parsenumber();\n\t          if (s2 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c76(s2);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 43) {\n\t            s1 = peg$c77;\n\t            peg$currPos++;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c78);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            s2 = peg$parsenumber();\n\t            if (s2 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c75(s2);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsepercentage() {\n\t      var s0, s1, s2, s3;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parsenumber();\n\t      if (s1 !== peg$FAILED) {\n\t        if (input.charCodeAt(peg$currPos) === 37) {\n\t          s2 = peg$c79;\n\t          peg$currPos++;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c80);\n\t          }\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c81(s1);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.charCodeAt(peg$currPos) === 45) {\n\t          s1 = peg$c43;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c44);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          s2 = peg$parsenumber();\n\t          if (s2 !== peg$FAILED) {\n\t            if (input.charCodeAt(peg$currPos) === 37) {\n\t              s3 = peg$c79;\n\t              peg$currPos++;\n\t            } else {\n\t              s3 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c80);\n\t              }\n\t            }\n\t            if (s3 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c82(s2);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.charCodeAt(peg$currPos) === 43) {\n\t            s1 = peg$c77;\n\t            peg$currPos++;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c78);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            s2 = peg$parsenumber();\n\t            if (s2 !== peg$FAILED) {\n\t              if (input.charCodeAt(peg$currPos) === 37) {\n\t                s3 = peg$c79;\n\t                peg$currPos++;\n\t              } else {\n\t                s3 = peg$FAILED;\n\t                if (peg$silentFails === 0) {\n\t                  peg$fail(peg$c80);\n\t                }\n\t              }\n\t              if (s3 !== peg$FAILED) {\n\t                peg$reportedPos = s0;\n\t                s1 = peg$c81(s2);\n\t                s0 = s1;\n\t              } else {\n\t                peg$currPos = s0;\n\t                s0 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseviewPredicate() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$parseviewName();\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parseattribute();\n\t        if (s2 === peg$FAILED) {\n\t          s2 = peg$c1;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parsemultiplier();\n\t          if (s3 === peg$FAILED) {\n\t            s3 = peg$c1;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            s4 = peg$parseconstantExpr();\n\t            if (s4 === peg$FAILED) {\n\t              s4 = peg$c1;\n\t            }\n\t            if (s4 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c83(s1, s2, s3, s4);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseattribute() {\n\t      var s0, s1;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 5) === peg$c84) {\n\t        s1 = peg$c84;\n\t        peg$currPos += 5;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c85);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        peg$reportedPos = s0;\n\t        s1 = peg$c86();\n\t      }\n\t      s0 = s1;\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.substr(peg$currPos, 6) === peg$c87) {\n\t          s1 = peg$c87;\n\t          peg$currPos += 6;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c88);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c89();\n\t        }\n\t        s0 = s1;\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.substr(peg$currPos, 4) === peg$c90) {\n\t            s1 = peg$c90;\n\t            peg$currPos += 4;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c91);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c92();\n\t          }\n\t          s0 = s1;\n\t          if (s0 === peg$FAILED) {\n\t            s0 = peg$currPos;\n\t            if (input.substr(peg$currPos, 7) === peg$c93) {\n\t              s1 = peg$c93;\n\t              peg$currPos += 7;\n\t            } else {\n\t              s1 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c94);\n\t              }\n\t            }\n\t            if (s1 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c95();\n\t            }\n\t            s0 = s1;\n\t            if (s0 === peg$FAILED) {\n\t              s0 = peg$currPos;\n\t              if (input.substr(peg$currPos, 6) === peg$c96) {\n\t                s1 = peg$c96;\n\t                peg$currPos += 6;\n\t              } else {\n\t                s1 = peg$FAILED;\n\t                if (peg$silentFails === 0) {\n\t                  peg$fail(peg$c97);\n\t                }\n\t              }\n\t              if (s1 !== peg$FAILED) {\n\t                peg$reportedPos = s0;\n\t                s1 = peg$c98();\n\t              }\n\t              s0 = s1;\n\t              if (s0 === peg$FAILED) {\n\t                s0 = peg$currPos;\n\t                if (input.substr(peg$currPos, 7) === peg$c99) {\n\t                  s1 = peg$c99;\n\t                  peg$currPos += 7;\n\t                } else {\n\t                  s1 = peg$FAILED;\n\t                  if (peg$silentFails === 0) {\n\t                    peg$fail(peg$c100);\n\t                  }\n\t                }\n\t                if (s1 !== peg$FAILED) {\n\t                  peg$reportedPos = s0;\n\t                  s1 = peg$c101();\n\t                }\n\t                s0 = s1;\n\t                if (s0 === peg$FAILED) {\n\t                  s0 = peg$currPos;\n\t                  if (input.substr(peg$currPos, 8) === peg$c102) {\n\t                    s1 = peg$c102;\n\t                    peg$currPos += 8;\n\t                  } else {\n\t                    s1 = peg$FAILED;\n\t                    if (peg$silentFails === 0) {\n\t                      peg$fail(peg$c103);\n\t                    }\n\t                  }\n\t                  if (s1 !== peg$FAILED) {\n\t                    peg$reportedPos = s0;\n\t                    s1 = peg$c104();\n\t                  }\n\t                  s0 = s1;\n\t                  if (s0 === peg$FAILED) {\n\t                    s0 = peg$currPos;\n\t                    if (input.substr(peg$currPos, 8) === peg$c105) {\n\t                      s1 = peg$c105;\n\t                      peg$currPos += 8;\n\t                    } else {\n\t                      s1 = peg$FAILED;\n\t                      if (peg$silentFails === 0) {\n\t                        peg$fail(peg$c106);\n\t                      }\n\t                    }\n\t                    if (s1 !== peg$FAILED) {\n\t                      peg$reportedPos = s0;\n\t                      s1 = peg$c107();\n\t                    }\n\t                    s0 = s1;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsemultiplier() {\n\t      var s0, s1, s2;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 47) {\n\t        s1 = peg$c108;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c109);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parsenumber();\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c110(s2);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.substr(peg$currPos, 2) === peg$c111) {\n\t          s1 = peg$c111;\n\t          peg$currPos += 2;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c112);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          s2 = peg$parsenumber();\n\t          if (s2 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c110(s2);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t        if (s0 === peg$FAILED) {\n\t          s0 = peg$currPos;\n\t          if (input.substr(peg$currPos, 2) === peg$c113) {\n\t            s1 = peg$c113;\n\t            peg$currPos += 2;\n\t          } else {\n\t            s1 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c114);\n\t            }\n\t          }\n\t          if (s1 !== peg$FAILED) {\n\t            s2 = peg$parsenumber();\n\t            if (s2 !== peg$FAILED) {\n\t              peg$reportedPos = s0;\n\t              s1 = peg$c115(s2);\n\t              s0 = s1;\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t          if (s0 === peg$FAILED) {\n\t            s0 = peg$currPos;\n\t            if (input.charCodeAt(peg$currPos) === 42) {\n\t              s1 = peg$c116;\n\t              peg$currPos++;\n\t            } else {\n\t              s1 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c117);\n\t              }\n\t            }\n\t            if (s1 !== peg$FAILED) {\n\t              s2 = peg$parsenumber();\n\t              if (s2 !== peg$FAILED) {\n\t                peg$reportedPos = s0;\n\t                s1 = peg$c118(s2);\n\t                s0 = s1;\n\t              } else {\n\t                peg$currPos = s0;\n\t                s0 = peg$c0;\n\t              }\n\t            } else {\n\t              peg$currPos = s0;\n\t              s0 = peg$c0;\n\t            }\n\t            if (s0 === peg$FAILED) {\n\t              s0 = peg$currPos;\n\t              if (input.substr(peg$currPos, 2) === peg$c119) {\n\t                s1 = peg$c119;\n\t                peg$currPos += 2;\n\t              } else {\n\t                s1 = peg$FAILED;\n\t                if (peg$silentFails === 0) {\n\t                  peg$fail(peg$c120);\n\t                }\n\t              }\n\t              if (s1 !== peg$FAILED) {\n\t                s2 = peg$parsenumber();\n\t                if (s2 !== peg$FAILED) {\n\t                  peg$reportedPos = s0;\n\t                  s1 = peg$c118(s2);\n\t                  s0 = s1;\n\t                } else {\n\t                  peg$currPos = s0;\n\t                  s0 = peg$c0;\n\t                }\n\t              } else {\n\t                peg$currPos = s0;\n\t                s0 = peg$c0;\n\t              }\n\t              if (s0 === peg$FAILED) {\n\t                s0 = peg$currPos;\n\t                if (input.substr(peg$currPos, 2) === peg$c121) {\n\t                  s1 = peg$c121;\n\t                  peg$currPos += 2;\n\t                } else {\n\t                  s1 = peg$FAILED;\n\t                  if (peg$silentFails === 0) {\n\t                    peg$fail(peg$c122);\n\t                  }\n\t                }\n\t                if (s1 !== peg$FAILED) {\n\t                  s2 = peg$parsenumber();\n\t                  if (s2 !== peg$FAILED) {\n\t                    peg$reportedPos = s0;\n\t                    s1 = peg$c123(s2);\n\t                    s0 = s1;\n\t                  } else {\n\t                    peg$currPos = s0;\n\t                    s0 = peg$c0;\n\t                  }\n\t                } else {\n\t                  peg$currPos = s0;\n\t                  s0 = peg$c0;\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseconstantExpr() {\n\t      var s0, s1, s2;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.charCodeAt(peg$currPos) === 45) {\n\t        s1 = peg$c43;\n\t        peg$currPos++;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c44);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$parsenumber();\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c123(s2);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        if (input.charCodeAt(peg$currPos) === 43) {\n\t          s1 = peg$c77;\n\t          peg$currPos++;\n\t        } else {\n\t          s1 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c78);\n\t          }\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          s2 = peg$parsenumber();\n\t          if (s2 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c118(s2);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseviewNameRange() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$currPos;\n\t      s2 = [];\n\t      if (peg$c124.test(input.charAt(peg$currPos))) {\n\t        s3 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s3 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c125);\n\t        }\n\t      }\n\t      if (s3 !== peg$FAILED) {\n\t        while (s3 !== peg$FAILED) {\n\t          s2.push(s3);\n\t          if (peg$c124.test(input.charAt(peg$currPos))) {\n\t            s3 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s3 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c125);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s2 = peg$c0;\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        s2 = input.substring(s1, peg$currPos);\n\t      }\n\t      s1 = s2;\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$currPos;\n\t        s3 = [];\n\t        if (peg$c126.test(input.charAt(peg$currPos))) {\n\t          s4 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s4 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c127);\n\t          }\n\t        }\n\t        while (s4 !== peg$FAILED) {\n\t          s3.push(s4);\n\t          if (peg$c126.test(input.charAt(peg$currPos))) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c127);\n\t            }\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          s3 = input.substring(s2, peg$currPos);\n\t        }\n\t        s2 = s3;\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = peg$parserange();\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c128(s1, s2, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        s1 = peg$currPos;\n\t        s2 = [];\n\t        if (peg$c124.test(input.charAt(peg$currPos))) {\n\t          s3 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s3 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c125);\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          while (s3 !== peg$FAILED) {\n\t            s2.push(s3);\n\t            if (peg$c124.test(input.charAt(peg$currPos))) {\n\t              s3 = input.charAt(peg$currPos);\n\t              peg$currPos++;\n\t            } else {\n\t              s3 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c125);\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          s2 = peg$c0;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s2 = input.substring(s1, peg$currPos);\n\t        }\n\t        s1 = s2;\n\t        if (s1 !== peg$FAILED) {\n\t          s2 = peg$currPos;\n\t          s3 = [];\n\t          if (peg$c126.test(input.charAt(peg$currPos))) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c127);\n\t            }\n\t          }\n\t          while (s4 !== peg$FAILED) {\n\t            s3.push(s4);\n\t            if (peg$c126.test(input.charAt(peg$currPos))) {\n\t              s4 = input.charAt(peg$currPos);\n\t              peg$currPos++;\n\t            } else {\n\t              s4 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c127);\n\t              }\n\t            }\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            s3 = input.substring(s2, peg$currPos);\n\t          }\n\t          s2 = s3;\n\t          if (s2 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c129(s1, s2);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parseviewName() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = peg$currPos;\n\t      s2 = [];\n\t      if (peg$c124.test(input.charAt(peg$currPos))) {\n\t        s3 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s3 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c125);\n\t        }\n\t      }\n\t      if (s3 !== peg$FAILED) {\n\t        while (s3 !== peg$FAILED) {\n\t          s2.push(s3);\n\t          if (peg$c124.test(input.charAt(peg$currPos))) {\n\t            s3 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s3 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c125);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s2 = peg$c0;\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        s2 = input.substring(s1, peg$currPos);\n\t      }\n\t      s1 = s2;\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = peg$currPos;\n\t        s3 = [];\n\t        if (peg$c126.test(input.charAt(peg$currPos))) {\n\t          s4 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s4 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c127);\n\t          }\n\t        }\n\t        while (s4 !== peg$FAILED) {\n\t          s3.push(s4);\n\t          if (peg$c126.test(input.charAt(peg$currPos))) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c127);\n\t            }\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          s3 = input.substring(s2, peg$currPos);\n\t        }\n\t        s2 = s3;\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c129(s1, s2);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parserange() {\n\t      var s0, s1, s2, s3;\n\t\n\t      s0 = peg$currPos;\n\t      if (input.substr(peg$currPos, 2) === peg$c130) {\n\t        s1 = peg$c130;\n\t        peg$currPos += 2;\n\t      } else {\n\t        s1 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c131);\n\t        }\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        s2 = [];\n\t        if (peg$c72.test(input.charAt(peg$currPos))) {\n\t          s3 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s3 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c73);\n\t          }\n\t        }\n\t        if (s3 !== peg$FAILED) {\n\t          while (s3 !== peg$FAILED) {\n\t            s2.push(s3);\n\t            if (peg$c72.test(input.charAt(peg$currPos))) {\n\t              s3 = input.charAt(peg$currPos);\n\t              peg$currPos++;\n\t            } else {\n\t              s3 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c73);\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          s2 = peg$c0;\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c132(s2);\n\t          s0 = s1;\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function peg$parsenumber() {\n\t      var s0, s1, s2, s3, s4;\n\t\n\t      s0 = peg$currPos;\n\t      s1 = [];\n\t      if (peg$c72.test(input.charAt(peg$currPos))) {\n\t        s2 = input.charAt(peg$currPos);\n\t        peg$currPos++;\n\t      } else {\n\t        s2 = peg$FAILED;\n\t        if (peg$silentFails === 0) {\n\t          peg$fail(peg$c73);\n\t        }\n\t      }\n\t      if (s2 !== peg$FAILED) {\n\t        while (s2 !== peg$FAILED) {\n\t          s1.push(s2);\n\t          if (peg$c72.test(input.charAt(peg$currPos))) {\n\t            s2 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s2 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c73);\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        s1 = peg$c0;\n\t      }\n\t      if (s1 !== peg$FAILED) {\n\t        if (input.charCodeAt(peg$currPos) === 46) {\n\t          s2 = peg$c133;\n\t          peg$currPos++;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c134);\n\t          }\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          s3 = [];\n\t          if (peg$c72.test(input.charAt(peg$currPos))) {\n\t            s4 = input.charAt(peg$currPos);\n\t            peg$currPos++;\n\t          } else {\n\t            s4 = peg$FAILED;\n\t            if (peg$silentFails === 0) {\n\t              peg$fail(peg$c73);\n\t            }\n\t          }\n\t          if (s4 !== peg$FAILED) {\n\t            while (s4 !== peg$FAILED) {\n\t              s3.push(s4);\n\t              if (peg$c72.test(input.charAt(peg$currPos))) {\n\t                s4 = input.charAt(peg$currPos);\n\t                peg$currPos++;\n\t              } else {\n\t                s4 = peg$FAILED;\n\t                if (peg$silentFails === 0) {\n\t                  peg$fail(peg$c73);\n\t                }\n\t              }\n\t            }\n\t          } else {\n\t            s3 = peg$c0;\n\t          }\n\t          if (s3 !== peg$FAILED) {\n\t            peg$reportedPos = s0;\n\t            s1 = peg$c135(s1, s3);\n\t            s0 = s1;\n\t          } else {\n\t            peg$currPos = s0;\n\t            s0 = peg$c0;\n\t          }\n\t        } else {\n\t          peg$currPos = s0;\n\t          s0 = peg$c0;\n\t        }\n\t      } else {\n\t        peg$currPos = s0;\n\t        s0 = peg$c0;\n\t      }\n\t      if (s0 === peg$FAILED) {\n\t        s0 = peg$currPos;\n\t        s1 = [];\n\t        if (peg$c72.test(input.charAt(peg$currPos))) {\n\t          s2 = input.charAt(peg$currPos);\n\t          peg$currPos++;\n\t        } else {\n\t          s2 = peg$FAILED;\n\t          if (peg$silentFails === 0) {\n\t            peg$fail(peg$c73);\n\t          }\n\t        }\n\t        if (s2 !== peg$FAILED) {\n\t          while (s2 !== peg$FAILED) {\n\t            s1.push(s2);\n\t            if (peg$c72.test(input.charAt(peg$currPos))) {\n\t              s2 = input.charAt(peg$currPos);\n\t              peg$currPos++;\n\t            } else {\n\t              s2 = peg$FAILED;\n\t              if (peg$silentFails === 0) {\n\t                peg$fail(peg$c73);\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          s1 = peg$c0;\n\t        }\n\t        if (s1 !== peg$FAILED) {\n\t          peg$reportedPos = s0;\n\t          s1 = peg$c136(s1);\n\t        }\n\t        s0 = s1;\n\t      }\n\t\n\t      return s0;\n\t    }\n\t\n\t    function extend(dst) {\n\t      for (var i = 1; i < arguments.length; i++) {\n\t        for (var k in arguments[i]) {\n\t          dst[k] = arguments[i][k];\n\t        }\n\t      }\n\t      return dst;\n\t    }\n\t\n\t    peg$result = peg$startRuleFunction();\n\t\n\t    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n\t      return peg$result;\n\t    } else {\n\t      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n\t        peg$fail({ type: \"end\", description: \"end of input\" });\n\t      }\n\t\n\t      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n\t    }\n\t  }\n\t\n\t  return {\n\t    SyntaxError: SyntaxError,\n\t    parse: parse\n\t  };\n\t}();\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _kiwiSolver = __webpack_require__(8);\n\t\n\tvar _kiwiSolver2 = _interopRequireDefault(_kiwiSolver);\n\t\n\tvar _Attribute = __webpack_require__(1);\n\t\n\tvar _Attribute2 = _interopRequireDefault(_Attribute);\n\t\n\tvar _Relation = __webpack_require__(2);\n\t\n\tvar _Relation2 = _interopRequireDefault(_Relation);\n\t\n\tvar _SubView = __webpack_require__(9);\n\t\n\tvar _SubView2 = _interopRequireDefault(_SubView);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar defaultPriorityStrength = undefined ? new _kiwiSolver2.default.Strength('defaultPriority', 0, 1000, 1000) : _kiwiSolver2.default.Strength.create(0, 1000, 1000);\n\t\n\tfunction _getConst(name, value) {\n\t    if (undefined) {\n\t        var vr = new _kiwiSolver2.default.Variable({ value: value });\n\t        this._solver.addConstraint(new _kiwiSolver2.default.StayConstraint(vr, _kiwiSolver2.default.Strength.required, 0));\n\t        return vr;\n\t    } else {\n\t        var _vr = new _kiwiSolver2.default.Variable();\n\t        this._solver.addConstraint(new _kiwiSolver2.default.Constraint(_vr, _kiwiSolver2.default.Operator.Eq, value));\n\t        return _vr;\n\t    }\n\t}\n\t\n\tfunction _getSubView(viewName) {\n\t    if (!viewName) {\n\t        return this._parentSubView;\n\t    } else if (viewName.name) {\n\t        this._subViews[viewName.name] = this._subViews[viewName.name] || new _SubView2.default({\n\t            name: viewName.name,\n\t            solver: this._solver\n\t        });\n\t        this._subViews[viewName.name]._type = this._subViews[viewName.name]._type || viewName.type;\n\t        return this._subViews[viewName.name];\n\t    } else {\n\t        this._subViews[viewName] = this._subViews[viewName] || new _SubView2.default({\n\t            name: viewName,\n\t            solver: this._solver\n\t        });\n\t        return this._subViews[viewName];\n\t    }\n\t}\n\t\n\tfunction _getSpacing(constraint) {\n\t    var index = 4;\n\t    if (!constraint.view1 && constraint.attr1 === 'left') {\n\t        index = 3;\n\t    } else if (!constraint.view1 && constraint.attr1 === 'top') {\n\t        index = 0;\n\t    } else if (!constraint.view2 && constraint.attr2 === 'right') {\n\t        index = 1;\n\t    } else if (!constraint.view2 && constraint.attr2 === 'bottom') {\n\t        index = 2;\n\t    } else {\n\t        switch (constraint.attr1) {\n\t            case 'left':\n\t            case 'right':\n\t            case 'centerX':\n\t            case 'leading':\n\t            case 'trailing':\n\t                index = 4;\n\t                break;\n\t            case 'zIndex':\n\t                index = 6;\n\t                break;\n\t            default:\n\t                index = 5;\n\t        }\n\t    }\n\t    this._spacingVars = this._spacingVars || new Array(7);\n\t    this._spacingExpr = this._spacingExpr || new Array(7);\n\t    if (!this._spacingVars[index]) {\n\t        if (undefined) {\n\t            this._spacingVars[index] = new _kiwiSolver2.default.Variable();\n\t            this._solver.addEditVar(this._spacingVars[index]);\n\t            this._spacingExpr[index] = _kiwiSolver2.default.minus(0, this._spacingVars[index]);\n\t        } else {\n\t            this._spacingVars[index] = new _kiwiSolver2.default.Variable();\n\t            this._solver.addEditVariable(this._spacingVars[index], _kiwiSolver2.default.Strength.create(999, 1000, 1000));\n\t            this._spacingExpr[index] = this._spacingVars[index].multiply(-1);\n\t        }\n\t        this._solver.suggestValue(this._spacingVars[index], this._spacing[index]);\n\t    }\n\t    return this._spacingExpr[index];\n\t}\n\t\n\tfunction _addConstraint(constraint) {\n\t    //this.constraints.push(constraint);\n\t    var relation = void 0;\n\t    var multiplier = constraint.multiplier !== undefined ? constraint.multiplier : 1;\n\t    var constant = constraint.constant !== undefined ? constraint.constant : 0;\n\t    if (constant === 'default') {\n\t        constant = _getSpacing.call(this, constraint);\n\t    }\n\t    var attr1 = _getSubView.call(this, constraint.view1)._getAttr(constraint.attr1);\n\t    var attr2 = void 0;\n\t    if (undefined) {\n\t        if (constraint.attr2 === _Attribute2.default.CONST) {\n\t            attr2 = _getConst.call(this, undefined, constraint.constant);\n\t        } else {\n\t            attr2 = _getSubView.call(this, constraint.view2)._getAttr(constraint.attr2);\n\t            if (multiplier !== 1 && constant) {\n\t                attr2 = _kiwiSolver2.default.plus(_kiwiSolver2.default.times(attr2, multiplier), constant);\n\t            } else if (constant) {\n\t                attr2 = _kiwiSolver2.default.plus(attr2, constant);\n\t            } else if (multiplier !== 1) {\n\t                attr2 = _kiwiSolver2.default.times(attr2, multiplier);\n\t            }\n\t        }\n\t        var strength = constraint.priority !== undefined && constraint.priority < 1000 ? new _kiwiSolver2.default.Strength('priority', 0, constraint.priority, 1000) : defaultPriorityStrength;\n\t        switch (constraint.relation) {\n\t            case _Relation2.default.EQU:\n\t                relation = new _kiwiSolver2.default.Equation(attr1, attr2, strength);\n\t                break;\n\t            case _Relation2.default.GEQ:\n\t                relation = new _kiwiSolver2.default.Inequality(attr1, _kiwiSolver2.default.GEQ, attr2, strength);\n\t                break;\n\t            case _Relation2.default.LEQ:\n\t                relation = new _kiwiSolver2.default.Inequality(attr1, _kiwiSolver2.default.LEQ, attr2, strength);\n\t                break;\n\t            default:\n\t                throw 'Invalid relation specified: ' + constraint.relation;\n\t        }\n\t    } else {\n\t        if (constraint.attr2 === _Attribute2.default.CONST) {\n\t            attr2 = _getConst.call(this, undefined, constraint.constant);\n\t        } else {\n\t            attr2 = _getSubView.call(this, constraint.view2)._getAttr(constraint.attr2);\n\t            if (multiplier !== 1 && constant) {\n\t                attr2 = attr2.multiply(multiplier).plus(constant);\n\t            } else if (constant) {\n\t                attr2 = attr2.plus(constant);\n\t            } else if (multiplier !== 1) {\n\t                attr2 = attr2.multiply(multiplier);\n\t            }\n\t        }\n\t        var _strength = constraint.priority !== undefined && constraint.priority < 1000 ? _kiwiSolver2.default.Strength.create(0, constraint.priority, 1000) : defaultPriorityStrength;\n\t        switch (constraint.relation) {\n\t            case _Relation2.default.EQU:\n\t                relation = new _kiwiSolver2.default.Constraint(attr1, _kiwiSolver2.default.Operator.Eq, attr2, _strength);\n\t                break;\n\t            case _Relation2.default.GEQ:\n\t                relation = new _kiwiSolver2.default.Constraint(attr1, _kiwiSolver2.default.Operator.Ge, attr2, _strength);\n\t                break;\n\t            case _Relation2.default.LEQ:\n\t                relation = new _kiwiSolver2.default.Constraint(attr1, _kiwiSolver2.default.Operator.Le, attr2, _strength);\n\t                break;\n\t            default:\n\t                throw 'Invalid relation specified: ' + constraint.relation;\n\t        }\n\t    }\n\t    this._solver.addConstraint(relation);\n\t}\n\t\n\tfunction _compareSpacing(old, newz) {\n\t    if (old === newz) {\n\t        return true;\n\t    }\n\t    if (!old || !newz) {\n\t        return false;\n\t    }\n\t    for (var i = 0; i < 7; i++) {\n\t        if (old[i] !== newz[i]) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\t\n\t/**\n\t * AutoLayoutJS API reference.\n\t *\n\t * ### Index\n\t *\n\t * |Entity|Type|Description|\n\t * |---|---|---|\n\t * |[AutoLayout](#autolayout)|`namespace`|Top level AutoLayout object.|\n\t * |[VisualFormat](#autolayoutvisualformat--object)|`namespace`|Parses VFL into constraints.|\n\t * |[View](#autolayoutview)|`class`|Main entity for adding & evaluating constraints.|\n\t * |[SubView](#autolayoutsubview--object)|`class`|SubView's are automatically created when constraints are added to views. They give access to the evaluated results.|\n\t * |[Attribute](#autolayoutattribute--enum)|`enum`|Attribute types that are supported when adding constraints.|\n\t * |[Relation](#autolayoutrelation--enum)|`enum`|Relationship types that are supported when adding constraints.|\n\t * |[Priority](#autolayoutpriority--enum)|`enum`|Default priority values for when adding constraints.|\n\t *\n\t * ### AutoLayout\n\t *\n\t * @module AutoLayout\n\t */\n\t\n\tvar View = function () {\n\t\n\t    /**\n\t     * @class View\n\t     * @param {Object} [options] Configuration options.\n\t     * @param {Number} [options.width] Initial width of the view.\n\t     * @param {Number} [options.height] Initial height of the view.\n\t     * @param {Number|Object} [options.spacing] Spacing for the view (default: 8) (see `setSpacing`).\n\t     * @param {Array} [options.constraints] One or more constraint definitions (see `addConstraints`).\n\t     */\n\t\n\t    function View(options) {\n\t        _classCallCheck(this, View);\n\t\n\t        this._solver = undefined ? new _kiwiSolver2.default.SimplexSolver() : new _kiwiSolver2.default.Solver();\n\t        this._subViews = {};\n\t        //this._spacing = undefined;\n\t        this._parentSubView = new _SubView2.default({\n\t            solver: this._solver\n\t        });\n\t        this.setSpacing(options && options.spacing !== undefined ? options.spacing : 8);\n\t        //this.constraints = [];\n\t        if (options) {\n\t            if (options.width !== undefined || options.height !== undefined) {\n\t                this.setSize(options.width, options.height);\n\t            }\n\t            if (options.constraints) {\n\t                this.addConstraints(options.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Sets the width and height of the view.\n\t     *\n\t     * @param {Number} width Width of the view.\n\t     * @param {Number} height Height of the view.\n\t     * @return {View} this\n\t     */\n\t\n\t\n\t    _createClass(View, [{\n\t        key: 'setSize',\n\t        value: function setSize(width, height /*, depth*/) {\n\t            this._parentSubView.intrinsicWidth = width;\n\t            this._parentSubView.intrinsicHeight = height;\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Width that was set using `setSize`.\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'setSpacing',\n\t\n\t\n\t        /**\n\t         * Sets the spacing for the view.\n\t         *\n\t         * The spacing can be set for 7 different variables:\n\t         * `top`, `right`, `bottom`, `left`, `width`, `height` and `zIndex`. The `left`-spacing is\n\t         * used when a spacer is used between the parent-view and a sub-view (e.g. `|-[subView]`).\n\t         * The same is true for the `right`, `top` and `bottom` spacers. The `width` and `height` are\n\t         * used for spacers in between sub-views (e.g. `[view1]-[view2]`).\n\t         *\n\t         * Instead of using the full spacing syntax, it is also possible to use shorthand notations:\n\t         *\n\t         * |Syntax|Type|Description|\n\t         * |---|---|---|\n\t         * |`[top, right, bottom, left, width, height, zIndex]`|Array(7)|Full syntax including z-index **(clockwise order)**.|\n\t         * |`[top, right, bottom, left, width, height]`|Array(6)|Full horizontal & vertical spacing syntax (no z-index) **(clockwise order)**.|\n\t         * |`[horizontal, vertical, zIndex]`|Array(3)|Horizontal = left, right, width, vertical = top, bottom, height.|\n\t         * |`[horizontal, vertical]`|Array(2)|Horizontal = left, right, width, vertical = top, bottom, height, z-index = 1.|\n\t         * |`spacing`|Number|Horizontal & vertical spacing are all the same, z-index = 1.|\n\t         *\n\t         * Examples:\n\t         * ```javascript\n\t         * view.setSpacing(10); // horizontal & vertical spacing 10\n\t         * view.setSpacing([10, 15, 2]); // horizontal spacing 10, vertical spacing 15, z-axis spacing 2\n\t         * view.setSpacing([10, 20, 10, 20, 5, 5]); // top, right, bottom, left, horizontal, vertical\n\t         * view.setSpacing([10, 20, 10, 20, 5, 5, 1]); // top, right, bottom, left, horizontal, vertical, z\n\t         * ```\n\t         *\n\t         * @param {Number|Array} spacing\n\t         * @return {View} this\n\t         */\n\t        value: function setSpacing(spacing) {\n\t            // convert spacing into array: [top, right, bottom, left, horz, vert, z-index]\n\t            switch (Array.isArray(spacing) ? spacing.length : -1) {\n\t                case -1:\n\t                    spacing = [spacing, spacing, spacing, spacing, spacing, spacing, 1];break;\n\t                case 1:\n\t                    spacing = [spacing[0], spacing[0], spacing[0], spacing[0], spacing[0], spacing[0], 1];break;\n\t                case 2:\n\t                    spacing = [spacing[1], spacing[0], spacing[1], spacing[0], spacing[0], spacing[1], 1];break;\n\t                case 3:\n\t                    spacing = [spacing[1], spacing[0], spacing[1], spacing[0], spacing[0], spacing[1], spacing[2]];break;\n\t                case 6:\n\t                    spacing = [spacing[0], spacing[1], spacing[2], spacing[3], spacing[4], spacing[5], 1];break;\n\t                case 7:\n\t                    break;\n\t                default:\n\t                    throw 'Invalid spacing syntax';\n\t            }\n\t            if (!_compareSpacing(this._spacing, spacing)) {\n\t                this._spacing = spacing;\n\t                // update spacing variables\n\t                if (this._spacingVars) {\n\t                    for (var i = 0; i < this._spacingVars.length; i++) {\n\t                        if (this._spacingVars[i]) {\n\t                            this._solver.suggestValue(this._spacingVars[i], this._spacing[i]);\n\t                        }\n\t                    }\n\t                    if (undefined) {\n\t                        this._solver.resolve();\n\t                    } else {\n\t                        this._solver.updateVariables();\n\t                    }\n\t                }\n\t            }\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Adds a constraint definition.\n\t         *\n\t         * A constraint definition has the following format:\n\t         *\n\t         * ```javascript\n\t         * constraint: {\n\t         *   view1: {String},\n\t         *   attr1: {AutoLayout.Attribute},\n\t         *   relation: {AutoLayout.Relation},\n\t         *   view2: {String},\n\t         *   attr2: {AutoLayout.Attribute},\n\t         *   multiplier: {Number},\n\t         *   constant: {Number},\n\t         *   priority: {Number}(0..1000)\n\t         * }\n\t         * ```\n\t         * @param {Object} constraint Constraint definition.\n\t         * @return {View} this\n\t         */\n\t\n\t    }, {\n\t        key: 'addConstraint',\n\t        value: function addConstraint(constraint) {\n\t            _addConstraint.call(this, constraint);\n\t            if (!undefined) {\n\t                this._solver.updateVariables();\n\t            }\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Adds one or more constraint definitions.\n\t         *\n\t         * A constraint definition has the following format:\n\t         *\n\t         * ```javascript\n\t         * constraint: {\n\t         *   view1: {String},\n\t         *   attr1: {AutoLayout.Attribute},\n\t         *   relation: {AutoLayout.Relation},\n\t         *   view2: {String},\n\t         *   attr2: {AutoLayout.Attribute},\n\t         *   multiplier: {Number},\n\t         *   constant: {Number},\n\t         *   priority: {Number}(0..1000)\n\t         * }\n\t         * ```\n\t         * @param {Array} constraints One or more constraint definitions.\n\t         * @return {View} this\n\t         */\n\t\n\t    }, {\n\t        key: 'addConstraints',\n\t        value: function addConstraints(constraints) {\n\t            for (var j = 0; j < constraints.length; j++) {\n\t                _addConstraint.call(this, constraints[j]);\n\t            }\n\t            if (!undefined) {\n\t                this._solver.updateVariables();\n\t            }\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Dictionary of `SubView` objects that have been created when adding constraints.\n\t         * @readonly\n\t         * @type {Object.SubView}\n\t         */\n\t\n\t    }, {\n\t        key: 'width',\n\t        get: function get() {\n\t            return this._parentSubView.intrinsicWidth;\n\t        }\n\t\n\t        /**\n\t         * Height that was set using `setSize`.\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'height',\n\t        get: function get() {\n\t            return this._parentSubView.intrinsicHeight;\n\t        }\n\t\n\t        /**\n\t         * Width that is calculated from the constraints and the `.intrinsicWidth` of\n\t         * the sub-views.\n\t         *\n\t         * When the width has been explicitely set using `setSize`, the fittingWidth\n\t         * will **always** be the same as the explicitely set width. To calculate the size\n\t         * based on the content, use:\n\t         * ```javascript\n\t         * var view = new AutoLayout.View({\n\t         *   constraints: VisualFormat.parse('|-[view1]-[view2]-'),\n\t         *   spacing: 20\n\t         * });\n\t         * view.subViews.view1.intrinsicWidth = 100;\n\t         * view.subViews.view2.intrinsicWidth = 100;\n\t         * console.log('fittingWidth: ' + view.fittingWidth); // 260\n\t         * ```\n\t         *\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'fittingWidth',\n\t        get: function get() {\n\t            return this._parentSubView.width;\n\t        }\n\t\n\t        /**\n\t         * Height that is calculated from the constraints and the `.intrinsicHeight` of\n\t         * the sub-views.\n\t         *\n\t         * See `.fittingWidth`.\n\t         *\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'fittingHeight',\n\t        get: function get() {\n\t            return this._parentSubView.height;\n\t        }\n\t    }, {\n\t        key: 'subViews',\n\t        get: function get() {\n\t            return this._subViews;\n\t        }\n\t\n\t        /**\n\t         * Checks whether the constraints incompletely specify the location\n\t         * of the subViews.\n\t         * @private\n\t         */\n\t        //get hasAmbiguousLayout() {\n\t        // Todo\n\t        //}\n\t\n\t    }]);\n\t\n\t    return View;\n\t}();\n\t\n\texports.default = View;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module unless amdModuleId is set\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t      return (root['kiwi'] = factory());\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // Node. Does not work with strict CommonJS, but\n\t    // only CommonJS-like environments that support module.exports,\n\t    // like Node.\n\t    module.exports = factory();\n\t  } else {\n\t    root['kiwi'] = factory();\n\t  }\n\t}(this, function () {\n\t\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\tvar tsu;\n\t(function (tsu) {\n\t\n\t    /**\n\t    * An iterator for an array of items.\n\t    */\n\t    var ArrayIterator = (function () {\n\t        /*\n\t        * Construct a new ArrayIterator.\n\t        *\n\t        * @param array The array of items to iterate.\n\t        * @param [index] The index at which to start iteration.\n\t        */\n\t        function ArrayIterator(array, index) {\n\t            if (typeof index === \"undefined\") { index = 0; }\n\t            this._array = array;\n\t            this._index = Math.max(0, Math.min(index, array.length));\n\t        }\n\t        /**\n\t        * Returns the next item from the iterator or undefined.\n\t        */\n\t        ArrayIterator.prototype.__next__ = function () {\n\t            return this._array[this._index++];\n\t        };\n\t\n\t        /**\n\t        * Returns this same iterator.\n\t        */\n\t        ArrayIterator.prototype.__iter__ = function () {\n\t            return this;\n\t        };\n\t        return ArrayIterator;\n\t    })();\n\t    tsu.ArrayIterator = ArrayIterator;\n\t\n\t    /**\n\t    * A reverse iterator for an array of items.\n\t    */\n\t    var ReverseArrayIterator = (function () {\n\t        /**\n\t        * Construct a new ReverseArrayIterator.\n\t        *\n\t        * @param array The array of items to iterate.\n\t        * @param [index] The index at which to start iteration.\n\t        */\n\t        function ReverseArrayIterator(array, index) {\n\t            if (typeof index === \"undefined\") { index = array.length; }\n\t            this._array = array;\n\t            this._index = Math.max(0, Math.min(index, array.length));\n\t        }\n\t        /**\n\t        * Returns the next item from the iterator or undefined.\n\t        */\n\t        ReverseArrayIterator.prototype.__next__ = function () {\n\t            return this._array[--this._index];\n\t        };\n\t\n\t        /**\n\t        * Returns this same iterator.\n\t        */\n\t        ReverseArrayIterator.prototype.__iter__ = function () {\n\t            return this;\n\t        };\n\t        return ReverseArrayIterator;\n\t    })();\n\t    tsu.ReverseArrayIterator = ReverseArrayIterator;\n\t\n\t    \n\t\n\t    function iter(object) {\n\t        if (object instanceof Array) {\n\t            return new ArrayIterator(object);\n\t        }\n\t        return object.__iter__();\n\t    }\n\t    tsu.iter = iter;\n\t\n\t    \n\t\n\t    function reversed(object) {\n\t        if (object instanceof Array) {\n\t            return new ReverseArrayIterator(object);\n\t        }\n\t        return object.__reversed__();\n\t    }\n\t    tsu.reversed = reversed;\n\t\n\t    /**\n\t    * Returns the next value from an iterator, or undefined.\n\t    */\n\t    function next(iterator) {\n\t        return iterator.__next__();\n\t    }\n\t    tsu.next = next;\n\t\n\t\n\t    function forEach(object, callback) {\n\t        if (object instanceof Array) {\n\t            for (var i = 0, n = object.length; i < n; ++i) {\n\t                if (callback(object[i]) === false) {\n\t                    return;\n\t                }\n\t            }\n\t        } else {\n\t            var value;\n\t            var it = object.__iter__();\n\t            while ((value = it.__next__()) !== undefined) {\n\t                if (callback(value) === false) {\n\t                    return;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    tsu.forEach = forEach;\n\t\n\t})(tsu || (tsu = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\tvar tsu;\n\t(function (tsu) {\n\t    \n\t\n\t    /**\n\t    * A class which defines a generic pair object.\n\t    */\n\t    var Pair = (function () {\n\t        /**\n\t        * Construct a new Pair object.\n\t        *\n\t        * @param first The first item of the pair.\n\t        * @param second The second item of the pair.\n\t        */\n\t        function Pair(first, second) {\n\t            this.first = first;\n\t            this.second = second;\n\t        }\n\t        /**\n\t        * Create a copy of the pair.\n\t        */\n\t        Pair.prototype.copy = function () {\n\t            return new Pair(this.first, this.second);\n\t        };\n\t        return Pair;\n\t    })();\n\t    tsu.Pair = Pair;\n\t})(tsu || (tsu = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"iterator.ts\"/>\n\t/// <reference path=\"utility.ts\"/>\n\tvar tsu;\n\t(function (tsu) {\n\t    /**\n\t    * Perform a lower bound search on a sorted array.\n\t    *\n\t    * @param array The array of sorted items to search.\n\t    * @param value The value to located in the array.\n\t    * @param compare The value comparison function.\n\t    * @returns The index of the first element in the array which\n\t    *          compares greater than or equal to the given value.\n\t    */\n\t    function lowerBound(array, value, compare) {\n\t        var begin = 0;\n\t        var n = array.length;\n\t        var half;\n\t        var middle;\n\t        while (n > 0) {\n\t            half = n >> 1;\n\t            middle = begin + half;\n\t            if (compare(array[middle], value) < 0) {\n\t                begin = middle + 1;\n\t                n -= half + 1;\n\t            } else {\n\t                n = half;\n\t            }\n\t        }\n\t        return begin;\n\t    }\n\t    tsu.lowerBound = lowerBound;\n\t\n\t    /**\n\t    * Perform a binary search on a sorted array.\n\t    *\n\t    * @param array The array of sorted items to search.\n\t    * @param value The value to located in the array.\n\t    * @param compare The value comparison function.\n\t    * @returns The index of the found item, or -1.\n\t    */\n\t    function binarySearch(array, value, compare) {\n\t        var index = lowerBound(array, value, compare);\n\t        if (index === array.length) {\n\t            return -1;\n\t        }\n\t        var item = array[index];\n\t        if (compare(item, value) !== 0) {\n\t            return -1;\n\t        }\n\t        return index;\n\t    }\n\t    tsu.binarySearch = binarySearch;\n\t\n\t    /**\n\t    * Perform a binary find on a sorted array.\n\t    *\n\t    * @param array The array of sorted items to search.\n\t    * @param value The value to located in the array.\n\t    * @param compare The value comparison function.\n\t    * @returns The found item in the array, or undefined.\n\t    */\n\t    function binaryFind(array, value, compare) {\n\t        var index = lowerBound(array, value, compare);\n\t        if (index === array.length) {\n\t            return undefined;\n\t        }\n\t        var item = array[index];\n\t        if (compare(item, value) !== 0) {\n\t            return undefined;\n\t        }\n\t        return item;\n\t    }\n\t    tsu.binaryFind = binaryFind;\n\t\n\t})(tsu || (tsu = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"iterator.ts\"/>\n\tvar tsu;\n\t(function (tsu) {\n\t    /**\n\t    * A base class for implementing array-based data structures.\n\t    *\n\t    * @class\n\t    */\n\t    var ArrayBase = (function () {\n\t        function ArrayBase() {\n\t            /*\n\t            * The internal data array.\n\t            *\n\t            * @protected\n\t            */\n\t            this._array = [];\n\t        }\n\t        /**\n\t        * Returns the number of items in the array.\n\t        */\n\t        ArrayBase.prototype.size = function () {\n\t            return this._array.length;\n\t        };\n\t\n\t        /**\n\t        * Returns true if the array is empty.\n\t        */\n\t        ArrayBase.prototype.empty = function () {\n\t            return this._array.length === 0;\n\t        };\n\t\n\t        /**\n\t        * Returns the item at the given array index.\n\t        *\n\t        * @param index The integer index of the desired item.\n\t        */\n\t        ArrayBase.prototype.itemAt = function (index) {\n\t            return this._array[index];\n\t        };\n\t\n\t        /**\n\t        * Removes and returns the item at the given index.\n\t        *\n\t        * @param index The integer index of the desired item.\n\t        */\n\t        ArrayBase.prototype.takeAt = function (index) {\n\t            return this._array.splice(index, 1)[0];\n\t        };\n\t\n\t        /**\n\t        * Clear the internal contents of array.\n\t        */\n\t        ArrayBase.prototype.clear = function () {\n\t            this._array = [];\n\t        };\n\t\n\t        /**\n\t        * Swap this array's contents with another array.\n\t        *\n\t        * @param other The array base to use for the swap.\n\t        */\n\t        ArrayBase.prototype.swap = function (other) {\n\t            var array = this._array;\n\t            this._array = other._array;\n\t            other._array = array;\n\t        };\n\t\n\t        /**\n\t        * Returns an iterator over the array of items.\n\t        */\n\t        ArrayBase.prototype.__iter__ = function () {\n\t            return tsu.iter(this._array);\n\t        };\n\t\n\t        /**\n\t        * Returns a reverse iterator over the array of items.\n\t        */\n\t        ArrayBase.prototype.__reversed__ = function () {\n\t            return tsu.reversed(this._array);\n\t        };\n\t        return ArrayBase;\n\t    })();\n\t    tsu.ArrayBase = ArrayBase;\n\t})(tsu || (tsu = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\tvar __extends = this.__extends || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    __.prototype = b.prototype;\n\t    d.prototype = new __();\n\t};\n\t/// <reference path=\"algorithm.ts\"/>\n\t/// <reference path=\"array_base.ts\"/>\n\t/// <reference path=\"iterator.ts\"/>\n\t/// <reference path=\"utility.ts\"/>\n\tvar tsu;\n\t(function (tsu) {\n\t    /**\n\t    * A mapping container build on a sorted array.\n\t    *\n\t    * @class\n\t    */\n\t    var AssociativeArray = (function (_super) {\n\t        __extends(AssociativeArray, _super);\n\t        /**\n\t        * Construct a new AssociativeArray.\n\t        *\n\t        * @param compare The key comparison function.\n\t        */\n\t        function AssociativeArray(compare) {\n\t            _super.call(this);\n\t            this._compare = compare;\n\t            this._wrapped = wrapCompare(compare);\n\t        }\n\t        /**\n\t        * Returns the key comparison function used by this array.\n\t        */\n\t        AssociativeArray.prototype.comparitor = function () {\n\t            return this._compare;\n\t        };\n\t\n\t        /**\n\t        * Return the array index of the given key, or -1.\n\t        *\n\t        * @param key The key to locate in the array.\n\t        */\n\t        AssociativeArray.prototype.indexOf = function (key) {\n\t            return tsu.binarySearch(this._array, key, this._wrapped);\n\t        };\n\t\n\t        /**\n\t        * Returns true if the key is in the array, false otherwise.\n\t        *\n\t        * @param key The key to locate in the array.\n\t        */\n\t        AssociativeArray.prototype.contains = function (key) {\n\t            return tsu.binarySearch(this._array, key, this._wrapped) >= 0;\n\t        };\n\t\n\t        /**\n\t        * Returns the pair associated with the given key, or undefined.\n\t        *\n\t        * @param key The key to locate in the array.\n\t        */\n\t        AssociativeArray.prototype.find = function (key) {\n\t            return tsu.binaryFind(this._array, key, this._wrapped);\n\t        };\n\t\n\t        /**\n\t        * Returns the pair associated with the key if it exists.\n\t        *\n\t        * If the key does not exist, a new pair will be created and\n\t        * inserted using the value created by the given factory.\n\t        *\n\t        * @param key The key to locate in the array.\n\t        * @param factory The function which creates the default value.\n\t        */\n\t        AssociativeArray.prototype.setDefault = function (key, factory) {\n\t            var array = this._array;\n\t            var index = tsu.lowerBound(array, key, this._wrapped);\n\t            if (index === array.length) {\n\t                var pair = new tsu.Pair(key, factory());\n\t                array.push(pair);\n\t                return pair;\n\t            }\n\t            var currPair = array[index];\n\t            if (this._compare(currPair.first, key) !== 0) {\n\t                var pair = new tsu.Pair(key, factory());\n\t                array.splice(index, 0, pair);\n\t                return pair;\n\t            }\n\t            return currPair;\n\t        };\n\t\n\t        /**\n\t        * Insert the pair into the array and return the pair.\n\t        *\n\t        * This will overwrite any existing entry in the array.\n\t        *\n\t        * @param key The key portion of the pair.\n\t        * @param value The value portion of the pair.\n\t        */\n\t        AssociativeArray.prototype.insert = function (key, value) {\n\t            var array = this._array;\n\t            var index = tsu.lowerBound(array, key, this._wrapped);\n\t            if (index === array.length) {\n\t                var pair = new tsu.Pair(key, value);\n\t                array.push(pair);\n\t                return pair;\n\t            }\n\t            var currPair = array[index];\n\t            if (this._compare(currPair.first, key) !== 0) {\n\t                var pair = new tsu.Pair(key, value);\n\t                array.splice(index, 0, pair);\n\t                return pair;\n\t            }\n\t            currPair.second = value;\n\t            return currPair;\n\t        };\n\t\n\t        AssociativeArray.prototype.update = function (object) {\n\t            var _this = this;\n\t            if (object instanceof AssociativeArray) {\n\t                var obj = object;\n\t                this._array = merge(this._array, obj._array, this._compare);\n\t            } else {\n\t                tsu.forEach(object, function (pair) {\n\t                    _this.insert(pair.first, pair.second);\n\t                });\n\t            }\n\t        };\n\t\n\t        /**\n\t        * Removes and returns the pair for the given key, or undefined.\n\t        *\n\t        * @param key The key to remove from the map.\n\t        */\n\t        AssociativeArray.prototype.erase = function (key) {\n\t            var array = this._array;\n\t            var index = tsu.binarySearch(array, key, this._wrapped);\n\t            if (index < 0) {\n\t                return undefined;\n\t            }\n\t            return array.splice(index, 1)[0];\n\t        };\n\t\n\t        /**\n\t        * Create a copy of this associative array.\n\t        */\n\t        AssociativeArray.prototype.copy = function () {\n\t            var theCopy = new AssociativeArray(this._compare);\n\t            var copyArray = theCopy._array;\n\t            var thisArray = this._array;\n\t            for (var i = 0, n = thisArray.length; i < n; ++i) {\n\t                copyArray.push(thisArray[i].copy());\n\t            }\n\t            return theCopy;\n\t        };\n\t        return AssociativeArray;\n\t    })(tsu.ArrayBase);\n\t    tsu.AssociativeArray = AssociativeArray;\n\t\n\t    /**\n\t    * An internal which wraps a comparison key function.\n\t    */\n\t    function wrapCompare(cmp) {\n\t        return function (pair, value) {\n\t            return cmp(pair.first, value);\n\t        };\n\t    }\n\t\n\t    /**\n\t    * An internal function which merges two ordered pair arrays.\n\t    */\n\t    function merge(first, second, compare) {\n\t        var i = 0, j = 0;\n\t        var len1 = first.length;\n\t        var len2 = second.length;\n\t        var merged = [];\n\t        while (i < len1 && j < len2) {\n\t            var a = first[i];\n\t            var b = second[j];\n\t            var v = compare(a.first, b.first);\n\t            if (v < 0) {\n\t                merged.push(a.copy());\n\t                ++i;\n\t            } else if (v > 0) {\n\t                merged.push(b.copy());\n\t                ++j;\n\t            } else {\n\t                merged.push(b.copy());\n\t                ++i;\n\t                ++j;\n\t            }\n\t        }\n\t        while (i < len1) {\n\t            merged.push(first[i].copy());\n\t            ++i;\n\t        }\n\t        while (j < len2) {\n\t            merged.push(second[j].copy());\n\t            ++j;\n\t        }\n\t        return merged;\n\t    }\n\t})(tsu || (tsu = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"algorithm.ts\"/>\n\t/// <reference path=\"array_base.ts\"/>\n\t/// <reference path=\"associative_array.ts\"/>\n\t/// <reference path=\"iterator.ts\"/>\n\t/// <reference path=\"unique_array.ts\"/>\n\t/// <reference path=\"utility.ts\"/>\n\t\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t// <reference path=\"expression.ts\">\n\t// <reference path=\"strength.ts\">\n\t/**\n\t * Kiwi is an efficient implementation of the Cassowary constraint solving\n\t * algorithm, based on the seminal Cassowary paper.\n\t * It is *not* a refactoring or port of the original C++ solver, but\n\t * has been designed from the ground up to be lightweight and fast.\n\t *\n\t * **Example**\n\t * ```javascript\n\t * var kiwi = require('kiwi');\n\t *\n\t * // Create a solver\n\t * var solver = new kiwi.Solver();\n\t *\n\t * // Create and add some editable variables\n\t * var left = new kiwi.Variable();\n\t * var width = new kiwi.Variable();\n\t * solver.addEditVariable(left, kiwi.Strength.strong);\n\t * solver.addEditVariable(width, kiwi.Strength.strong);\n\t *\n\t * // Create a variable calculated through a constraint\n\t * var centerX = new kiwi.Variable();\n\t * var expr = new kiwi.Expression([-1, centerX], left, [0.5, width]);\n\t * solver.addConstraint(new kiwi.Constraint(expr, kiwi.Operator.Eq, kiwi.Strength.required));\n\t *\n\t * // Suggest some values to the solver\n\t * solver.suggestValue(left, 0);\n\t * solver.suggestValue(width, 500);\n\t *\n\t * // Lets solve the problem!\n\t * solver.updateVariables();\n\t * assert(centerX.value(), 250);\n\t * ```\n\t *\n\t * ##API Documentation\n\t * @module kiwi\n\t */\n\tvar kiwi;\n\t(function (kiwi) {\n\t    /**\n\t     * An enum defining the linear constraint operators.\n\t     *\n\t     * |Value|Operator|Description|\n\t     * |----|-----|-----|\n\t     * |`Le`|<=|Less than equal|\n\t     * |`Ge`|>=|Greater than equal|\n\t     * |`Eq`|==|Equal|\n\t     *\n\t     * @enum {Number}\n\t     */\n\t    (function (Operator) {\n\t        Operator[Operator[\"Le\"] = 0] = \"Le\";\n\t        Operator[Operator[\"Ge\"] = 1] = \"Ge\";\n\t        Operator[Operator[\"Eq\"] = 2] = \"Eq\"; // ==\n\t    })(kiwi.Operator || (kiwi.Operator = {}));\n\t    var Operator = kiwi.Operator;\n\t    /**\n\t     * A linear constraint equation.\n\t     *\n\t     * A constraint equation is composed of an expression, an operator,\n\t     * and a strength. The RHS of the equation is implicitly zero.\n\t     *\n\t     * @class\n\t     * @param {Expression} expression The constraint expression (LHS).\n\t     * @param {Operator} operator The equation operator.\n\t     * @param {Expression} [rhs] Right hand side of the expression.\n\t     * @param {Number} [strength=Strength.required] The strength of the constraint.\n\t     */\n\t    var Constraint = (function () {\n\t        function Constraint(expression, operator, rhs, strength) {\n\t            if (strength === void 0) { strength = kiwi.Strength.required; }\n\t            this._id = CnId++;\n\t            this._operator = operator;\n\t            this._strength = kiwi.Strength.clip(strength);\n\t            if ((rhs === undefined) && (expression instanceof kiwi.Expression)) {\n\t                this._expression = expression;\n\t            }\n\t            else {\n\t                this._expression = expression.minus(rhs);\n\t            }\n\t        }\n\t        /**\n\t          * A static constraint comparison function.\n\t          * @private\n\t          */\n\t        Constraint.Compare = function (a, b) {\n\t            return a.id() - b.id();\n\t        };\n\t        /**\n\t         * Returns the unique id number of the constraint.\n\t         * @private\n\t         */\n\t        Constraint.prototype.id = function () {\n\t            return this._id;\n\t        };\n\t        /**\n\t         * Returns the expression of the constraint.\n\t         *\n\t         * @return {Expression} expression\n\t         */\n\t        Constraint.prototype.expression = function () {\n\t            return this._expression;\n\t        };\n\t        /**\n\t         * Returns the relational operator of the constraint.\n\t         *\n\t         * @return {Operator} linear constraint operator\n\t         */\n\t        Constraint.prototype.op = function () {\n\t            return this._operator;\n\t        };\n\t        /**\n\t         * Returns the strength of the constraint.\n\t         *\n\t         * @return {Number} strength\n\t         */\n\t        Constraint.prototype.strength = function () {\n\t            return this._strength;\n\t        };\n\t        return Constraint;\n\t    })();\n\t    kiwi.Constraint = Constraint;\n\t    /**\n\t     * The internal constraint id counter.\n\t     * @private\n\t     */\n\t    var CnId = 0;\n\t})(kiwi || (kiwi = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"../thirdparty/tsu.d.ts\"/>\n\tvar kiwi;\n\t(function (kiwi) {\n\t    function createMap(compare) {\n\t        return new tsu.AssociativeArray(compare);\n\t    }\n\t    kiwi.createMap = createMap;\n\t})(kiwi || (kiwi = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\tvar kiwi;\n\t(function (kiwi) {\n\t    /**\n\t     * The primary user constraint variable.\n\t     *\n\t     * @class\n\t     * @param {String} [name=\"\"] The name to associated with the variable.\n\t     */\n\t    var Variable = (function () {\n\t        function Variable(name) {\n\t            if (name === void 0) { name = \"\"; }\n\t            this._value = 0.0;\n\t            this._context = null;\n\t            this._id = VarId++;\n\t            this._name = name;\n\t        }\n\t        /**\n\t         * A static variable comparison function.\n\t         * @private\n\t         */\n\t        Variable.Compare = function (a, b) {\n\t            return a.id() - b.id();\n\t        };\n\t        /**\n\t         * Returns the unique id number of the variable.\n\t         * @private\n\t         */\n\t        Variable.prototype.id = function () {\n\t            return this._id;\n\t        };\n\t        /**\n\t         * Returns the name of the variable.\n\t         *\n\t         * @return {String} name of the variable\n\t         */\n\t        Variable.prototype.name = function () {\n\t            return this._name;\n\t        };\n\t        /**\n\t         * Set the name of the variable.\n\t         *\n\t         * @param {String} name Name of the variable\n\t         */\n\t        Variable.prototype.setName = function (name) {\n\t            this._name = name;\n\t        };\n\t        /**\n\t         * Returns the user context object of the variable.\n\t         * @private\n\t         */\n\t        Variable.prototype.context = function () {\n\t            return this._context;\n\t        };\n\t        /**\n\t         * Set the user context object of the variable.\n\t         * @private\n\t         */\n\t        Variable.prototype.setContext = function (context) {\n\t            this._context = context;\n\t        };\n\t        /**\n\t         * Returns the value of the variable.\n\t         *\n\t         * @return {Number} Calculated value\n\t         */\n\t        Variable.prototype.value = function () {\n\t            return this._value;\n\t        };\n\t        /**\n\t         * Set the value of the variable.\n\t         * @private\n\t         */\n\t        Variable.prototype.setValue = function (value) {\n\t            this._value = value;\n\t        };\n\t        /**\n\t         * Creates a new Expression by adding a number, variable or expression\n\t         * to the variable.\n\t         *\n\t         * @param {Number|Variable|Expression} value Value to add.\n\t         * @return {Expression} expression\n\t         */\n\t        Variable.prototype.plus = function (value) {\n\t            return new kiwi.Expression(this, value);\n\t        };\n\t        /**\n\t         * Creates a new Expression by substracting a number, variable or expression\n\t         * from the variable.\n\t         *\n\t         * @param {Number|Variable|Expression} value Value to substract.\n\t         * @return {Expression} expression\n\t         */\n\t        Variable.prototype.minus = function (value) {\n\t            return new kiwi.Expression(this, typeof value === 'number' ? -value : [-1, value]);\n\t        };\n\t        /**\n\t         * Creates a new Expression by multiplying with a fixed number.\n\t         *\n\t         * @param {Number} coefficient Coefficient to multiply with.\n\t         * @return {Expression} expression\n\t         */\n\t        Variable.prototype.multiply = function (coefficient) {\n\t            return new kiwi.Expression([coefficient, this]);\n\t        };\n\t        /**\n\t         * Creates a new Expression by dividing with a fixed number.\n\t         *\n\t         * @param {Number} coefficient Coefficient to divide by.\n\t         * @return {Expression} expression\n\t         */\n\t        Variable.prototype.divide = function (coefficient) {\n\t            return new kiwi.Expression([1 / coefficient, this]);\n\t        };\n\t        /**\n\t         * Returns the JSON representation of the variable.\n\t         * @private\n\t         */\n\t        Variable.prototype.toJSON = function () {\n\t            return {\n\t                name: this._name,\n\t                value: this._value\n\t            };\n\t        };\n\t        return Variable;\n\t    })();\n\t    kiwi.Variable = Variable;\n\t    /**\n\t     * The internal variable id counter.\n\t     * @private\n\t     */\n\t    var VarId = 0;\n\t})(kiwi || (kiwi = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"../thirdparty/tsu.d.ts\"/>\n\t/// <reference path=\"maptype.ts\"/>\n\t/// <reference path=\"variable.ts\"/>\n\tvar kiwi;\n\t(function (kiwi) {\n\t    /**\n\t     * An expression of variable terms and a constant.\n\t     *\n\t     * The constructor accepts an arbitrary number of parameters,\n\t     * each of which must be one of the following types:\n\t     *  - number\n\t     *  - Variable\n\t     *  - Expression\n\t     *  - 2-tuple of [number, Variable|Expression]\n\t     *\n\t     * The parameters are summed. The tuples are multiplied.\n\t     *\n\t     * @class\n\t     * @param {...(number|Variable|Expression|Array)} args\n\t     */\n\t    var Expression = (function () {\n\t        function Expression() {\n\t            var parsed = parseArgs(arguments);\n\t            this._terms = parsed.terms;\n\t            this._constant = parsed.constant;\n\t        }\n\t        /**\n\t         * Returns the mapping of terms in the expression.\n\t         *\n\t         * This *must* be treated as const.\n\t         * @private\n\t         */\n\t        Expression.prototype.terms = function () {\n\t            return this._terms;\n\t        };\n\t        /**\n\t         * Returns the constant of the expression.\n\t         * @private\n\t         */\n\t        Expression.prototype.constant = function () {\n\t            return this._constant;\n\t        };\n\t        /**\n\t         * Returns the computed value of the expression.\n\t         *\n\t         * @private\n\t         * @return {Number} computed value of the expression\n\t         */\n\t        Expression.prototype.value = function () {\n\t            var result = this._constant;\n\t            for (var i = 0, n = this._terms.size(); i < n; i++) {\n\t                var pair = this._terms.itemAt(i);\n\t                result += pair.first.value() * pair.second;\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * Creates a new Expression by adding a number, variable or expression\n\t         * to the expression.\n\t         *\n\t         * @param {Number|Variable|Expression} value Value to add.\n\t         * @return {Expression} expression\n\t         */\n\t        Expression.prototype.plus = function (value) {\n\t            return new Expression(this, value);\n\t        };\n\t        /**\n\t         * Creates a new Expression by substracting a number, variable or expression\n\t         * from the expression.\n\t         *\n\t         * @param {Number|Variable|Expression} value Value to substract.\n\t         * @return {Expression} expression\n\t         */\n\t        Expression.prototype.minus = function (value) {\n\t            return new Expression(this, typeof value === 'number' ? -value : [-1, value]);\n\t        };\n\t        /**\n\t         * Creates a new Expression by multiplying with a fixed number.\n\t         *\n\t         * @param {Number} coefficient Coefficient to multiply with.\n\t         * @return {Expression} expression\n\t         */\n\t        Expression.prototype.multiply = function (coefficient) {\n\t            return new Expression([coefficient, this]);\n\t        };\n\t        /**\n\t         * Creates a new Expression by dividing with a fixed number.\n\t         *\n\t         * @param {Number} coefficient Coefficient to divide by.\n\t         * @return {Expression} expression\n\t         */\n\t        Expression.prototype.divide = function (coefficient) {\n\t            return new Expression([1 / coefficient, this]);\n\t        };\n\t        return Expression;\n\t    })();\n\t    kiwi.Expression = Expression;\n\t    /**\n\t     * An internal argument parsing function.\n\t     * @private\n\t     */\n\t    function parseArgs(args) {\n\t        var constant = 0.0;\n\t        var factory = function () { return 0.0; };\n\t        var terms = kiwi.createMap(kiwi.Variable.Compare);\n\t        for (var i = 0, n = args.length; i < n; ++i) {\n\t            var item = args[i];\n\t            if (typeof item === \"number\") {\n\t                constant += item;\n\t            }\n\t            else if (item instanceof kiwi.Variable) {\n\t                terms.setDefault(item, factory).second += 1.0;\n\t            }\n\t            else if (item instanceof Expression) {\n\t                constant += item.constant();\n\t                var terms2 = item.terms();\n\t                for (var j = 0, k = terms2.size(); j < k; j++) {\n\t                    var termPair = terms2.itemAt(j);\n\t                    terms.setDefault(termPair.first, factory).second += termPair.second;\n\t                }\n\t            }\n\t            else if (item instanceof Array) {\n\t                if (item.length !== 2) {\n\t                    throw new Error(\"array must have length 2\");\n\t                }\n\t                var value = item[0];\n\t                var value2 = item[1];\n\t                if (typeof value !== \"number\") {\n\t                    throw new Error(\"array item 0 must be a number\");\n\t                }\n\t                if (value2 instanceof kiwi.Variable) {\n\t                    terms.setDefault(value2, factory).second += value;\n\t                }\n\t                else if (value2 instanceof Expression) {\n\t                    constant += (value2.constant() * value);\n\t                    var terms2 = value2.terms();\n\t                    for (var j = 0, k = terms2.size(); j < k; j++) {\n\t                        var termPair = terms2.itemAt(j);\n\t                        terms.setDefault(termPair.first, factory).second += (termPair.second * value);\n\t                    }\n\t                }\n\t                else {\n\t                    throw new Error(\"array item 1 must be a variable or expression\");\n\t                }\n\t            }\n\t            else {\n\t                throw new Error(\"invalid Expression argument: \" + item);\n\t            }\n\t        }\n\t        return { terms: terms, constant: constant };\n\t    }\n\t})(kiwi || (kiwi = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\tvar kiwi;\n\t(function (kiwi) {\n\t    /**\n\t     * @class Strength\n\t     */\n\t    var Strength;\n\t    (function (Strength) {\n\t        /**\n\t         * Create a new symbolic strength.\n\t         *\n\t         * @param {Number} a strong\n\t         * @param {Number} b medium\n\t         * @param {Number} c weak\n\t         * @param {Number} [w] weight\n\t         * @return {Number} strength\n\t         */\n\t        function create(a, b, c, w) {\n\t            if (w === void 0) { w = 1.0; }\n\t            var result = 0.0;\n\t            result += Math.max(0.0, Math.min(1000.0, a * w)) * 1000000.0;\n\t            result += Math.max(0.0, Math.min(1000.0, b * w)) * 1000.0;\n\t            result += Math.max(0.0, Math.min(1000.0, c * w));\n\t            return result;\n\t        }\n\t        Strength.create = create;\n\t        /**\n\t         * The 'required' symbolic strength.\n\t         */\n\t        Strength.required = create(1000.0, 1000.0, 1000.0);\n\t        /**\n\t         * The 'strong' symbolic strength.\n\t         */\n\t        Strength.strong = create(1.0, 0.0, 0.0);\n\t        /**\n\t         * The 'medium' symbolic strength.\n\t         */\n\t        Strength.medium = create(0.0, 1.0, 0.0);\n\t        /**\n\t         * The 'weak' symbolic strength.\n\t         */\n\t        Strength.weak = create(0.0, 0.0, 1.0);\n\t        /**\n\t         * Clip a symbolic strength to the allowed min and max.\n\t         * @private\n\t         */\n\t        function clip(value) {\n\t            return Math.max(0.0, Math.min(Strength.required, value));\n\t        }\n\t        Strength.clip = clip;\n\t    })(Strength = kiwi.Strength || (kiwi.Strength = {}));\n\t})(kiwi || (kiwi = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"../thirdparty/tsu.d.ts\"/>\n\t/// <reference path=\"constraint.ts\"/>\n\t/// <reference path=\"expression.ts\"/>\n\t/// <reference path=\"maptype.ts\"/>\n\t/// <reference path=\"strength.ts\"/>\n\t/// <reference path=\"variable.ts\"/>\n\tvar kiwi;\n\t(function (kiwi) {\n\t    /**\n\t     * The constraint solver class.\n\t     *\n\t     * @class\n\t     */\n\t    var Solver = (function () {\n\t        /**\n\t         * Construct a new Solver.\n\t         */\n\t        function Solver() {\n\t            this._cnMap = createCnMap();\n\t            this._rowMap = createRowMap();\n\t            this._varMap = createVarMap();\n\t            this._editMap = createEditMap();\n\t            this._infeasibleRows = [];\n\t            this._objective = new Row();\n\t            this._artificial = null;\n\t            this._idTick = 0;\n\t        }\n\t        /**\n\t         * Creates and add a constraint to the solver.\n\t         *\n\t         * @param {Expression|Variable} lhs Left hand side of the expression\n\t         * @param {Operator} operator Operator\n\t         * @param {Expression|Variable|Number} rhs Right hand side of the expression\n\t         * @param {Number} [strength=Strength.required] Strength\n\t         */\n\t        Solver.prototype.createConstraint = function (lhs, operator, rhs, strength) {\n\t            if (strength === void 0) { strength = kiwi.Strength.required; }\n\t            var cn = new kiwi.Constraint(lhs, operator, rhs, strength);\n\t            this.addConstraint(cn);\n\t            return cn;\n\t        };\n\t        /**\n\t         * Add a constraint to the solver.\n\t         *\n\t         * @param {Constraint} constraint Constraint to add to the solver\n\t         */\n\t        Solver.prototype.addConstraint = function (constraint) {\n\t            var cnPair = this._cnMap.find(constraint);\n\t            if (cnPair !== undefined) {\n\t                throw new Error(\"duplicate constraint\");\n\t            }\n\t            // Creating a row causes symbols to be reserved for the variables\n\t            // in the constraint. If this method exits with an exception,\n\t            // then its possible those variables will linger in the var map.\n\t            // Since its likely that those variables will be used in other\n\t            // constraints and since exceptional conditions are uncommon,\n\t            // i'm not too worried about aggressive cleanup of the var map.\n\t            var data = this._createRow(constraint);\n\t            var row = data.row;\n\t            var tag = data.tag;\n\t            var subject = this._chooseSubject(row, tag);\n\t            // If chooseSubject couldnt find a valid entering symbol, one\n\t            // last option is available if the entire row is composed of\n\t            // dummy variables. If the constant of the row is zero, then\n\t            // this represents redundant constraints and the new dummy\n\t            // marker can enter the basis. If the constant is non-zero,\n\t            // then it represents an unsatisfiable constraint.\n\t            if (subject.type() === 0 /* Invalid */ && row.allDummies()) {\n\t                if (!nearZero(row.constant())) {\n\t                    throw new Error(\"unsatisfiable constraint\");\n\t                }\n\t                else {\n\t                    subject = tag.marker;\n\t                }\n\t            }\n\t            // If an entering symbol still isn't found, then the row must\n\t            // be added using an artificial variable. If that fails, then\n\t            // the row represents an unsatisfiable constraint.\n\t            if (subject.type() === 0 /* Invalid */) {\n\t                if (!this._addWithArtificialVariable(row)) {\n\t                    throw new Error(\"unsatisfiable constraint\");\n\t                }\n\t            }\n\t            else {\n\t                row.solveFor(subject);\n\t                this._substitute(subject, row);\n\t                this._rowMap.insert(subject, row);\n\t            }\n\t            this._cnMap.insert(constraint, tag);\n\t            // Optimizing after each constraint is added performs less\n\t            // aggregate work due to a smaller average system size. It\n\t            // also ensures the solver remains in a consistent state.\n\t            this._optimize(this._objective);\n\t        };\n\t        /**\n\t         * Remove a constraint from the solver.\n\t         *\n\t         * @param {Constraint} constraint Constraint to remove from the solver\n\t         */\n\t        Solver.prototype.removeConstraint = function (constraint) {\n\t            var cnPair = this._cnMap.erase(constraint);\n\t            if (cnPair === undefined) {\n\t                throw new Error(\"unknown constraint\");\n\t            }\n\t            // Remove the error effects from the objective function\n\t            // *before* pivoting, or substitutions into the objective\n\t            // will lead to incorrect solver results.\n\t            this._removeConstraintEffects(constraint, cnPair.second);\n\t            // If the marker is basic, simply drop the row. Otherwise,\n\t            // pivot the marker into the basis and then drop the row.\n\t            var marker = cnPair.second.marker;\n\t            var rowPair = this._rowMap.erase(marker);\n\t            if (rowPair === undefined) {\n\t                var leaving = this._getMarkerLeavingSymbol(marker);\n\t                if (leaving.type() === 0 /* Invalid */) {\n\t                    throw new Error(\"failed to find leaving row\");\n\t                }\n\t                rowPair = this._rowMap.erase(leaving);\n\t                rowPair.second.solveForEx(leaving, marker);\n\t                this._substitute(marker, rowPair.second);\n\t            }\n\t            // Optimizing after each constraint is removed ensures that the\n\t            // solver remains consistent. It makes the solver api easier to\n\t            // use at a small tradeoff for speed.\n\t            this._optimize(this._objective);\n\t        };\n\t        /**\n\t         * Test whether the solver contains the constraint.\n\t         *\n\t         * @param {Constraint} constraint Constraint to test for\n\t         * @return {Bool} true or false\n\t         */\n\t        Solver.prototype.hasConstraint = function (constraint) {\n\t            return this._cnMap.contains(constraint);\n\t        };\n\t        /**\n\t         * Add an edit variable to the solver.\n\t         *\n\t         * @param {Variable} variable Edit variable to add to the solver\n\t         * @param {Number} strength Strength, should be less than `Strength.required`\n\t         */\n\t        Solver.prototype.addEditVariable = function (variable, strength) {\n\t            var editPair = this._editMap.find(variable);\n\t            if (editPair !== undefined) {\n\t                throw new Error(\"duplicate edit variable\");\n\t            }\n\t            strength = kiwi.Strength.clip(strength);\n\t            if (strength === kiwi.Strength.required) {\n\t                throw new Error(\"bad required strength\");\n\t            }\n\t            var expr = new kiwi.Expression(variable);\n\t            var cn = new kiwi.Constraint(expr, 2 /* Eq */, undefined, strength);\n\t            this.addConstraint(cn);\n\t            var tag = this._cnMap.find(cn).second;\n\t            var info = { tag: tag, constraint: cn, constant: 0.0 };\n\t            this._editMap.insert(variable, info);\n\t        };\n\t        /**\n\t         * Remove an edit variable from the solver.\n\t         *\n\t         * @param {Variable} variable Edit variable to remove from the solver\n\t         */\n\t        Solver.prototype.removeEditVariable = function (variable) {\n\t            var editPair = this._editMap.erase(variable);\n\t            if (editPair === undefined) {\n\t                throw new Error(\"unknown edit variable\");\n\t            }\n\t            this.removeConstraint(editPair.second.constraint);\n\t        };\n\t        /**\n\t         * Test whether the solver contains the edit variable.\n\t         *\n\t         * @param {Variable} variable Edit variable to test for\n\t         * @return {Bool} true or false\n\t         */\n\t        Solver.prototype.hasEditVariable = function (variable) {\n\t            return this._editMap.contains(variable);\n\t        };\n\t        /**\n\t         * Suggest the value of an edit variable.\n\t         *\n\t         * @param {Variable} variable Edit variable to suggest a value for\n\t         * @param {Number} value Suggested value\n\t         */\n\t        Solver.prototype.suggestValue = function (variable, value) {\n\t            var editPair = this._editMap.find(variable);\n\t            if (editPair === undefined) {\n\t                throw new Error(\"unknown edit variable\");\n\t            }\n\t            var rows = this._rowMap;\n\t            var info = editPair.second;\n\t            var delta = value - info.constant;\n\t            info.constant = value;\n\t            // Check first if the positive error variable is basic.\n\t            var marker = info.tag.marker;\n\t            var rowPair = rows.find(marker);\n\t            if (rowPair !== undefined) {\n\t                if (rowPair.second.add(-delta) < 0.0) {\n\t                    this._infeasibleRows.push(marker);\n\t                }\n\t                this._dualOptimize();\n\t                return;\n\t            }\n\t            // Check next if the negative error variable is basic.\n\t            var other = info.tag.other;\n\t            var rowPair = rows.find(other);\n\t            if (rowPair !== undefined) {\n\t                if (rowPair.second.add(delta) < 0.0) {\n\t                    this._infeasibleRows.push(other);\n\t                }\n\t                this._dualOptimize();\n\t                return;\n\t            }\n\t            for (var i = 0, n = rows.size(); i < n; ++i) {\n\t                var rowPair = rows.itemAt(i);\n\t                var row = rowPair.second;\n\t                var coeff = row.coefficientFor(marker);\n\t                if (coeff !== 0.0 && row.add(delta * coeff) < 0.0 && rowPair.first.type() !== 1 /* External */) {\n\t                    this._infeasibleRows.push(rowPair.first);\n\t                }\n\t            }\n\t            this._dualOptimize();\n\t        };\n\t        /**\n\t         * Update the values of the variables.\n\t         */\n\t        Solver.prototype.updateVariables = function () {\n\t            var vars = this._varMap;\n\t            var rows = this._rowMap;\n\t            for (var i = 0, n = vars.size(); i < n; ++i) {\n\t                var pair = vars.itemAt(i);\n\t                var rowPair = rows.find(pair.second);\n\t                if (rowPair !== undefined) {\n\t                    pair.first.setValue(rowPair.second.constant());\n\t                }\n\t                else {\n\t                    pair.first.setValue(0.0);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * Get the symbol for the given variable.\n\t         *\n\t         * If a symbol does not exist for the variable, one will be created.\n\t         * @private\n\t         */\n\t        Solver.prototype._getVarSymbol = function (variable) {\n\t            var _this = this;\n\t            var factory = function () { return _this._makeSymbol(1 /* External */); };\n\t            return this._varMap.setDefault(variable, factory).second;\n\t        };\n\t        /**\n\t         * Create a new Row object for the given constraint.\n\t         *\n\t         * The terms in the constraint will be converted to cells in the row.\n\t         * Any term in the constraint with a coefficient of zero is ignored.\n\t         * This method uses the `_getVarSymbol` method to get the symbol for\n\t         * the variables added to the row. If the symbol for a given cell\n\t         * variable is basic, the cell variable will be substituted with the\n\t         * basic row.\n\t         *\n\t         * The necessary slack and error variables will be added to the row.\n\t         * If the constant for the row is negative, the sign for the row\n\t         * will be inverted so the constant becomes positive.\n\t         *\n\t         * Returns the created Row and the tag for tracking the constraint.\n\t         * @private\n\t         */\n\t        Solver.prototype._createRow = function (constraint) {\n\t            var expr = constraint.expression();\n\t            var row = new Row(expr.constant());\n\t            // Substitute the current basic variables into the row.\n\t            var terms = expr.terms();\n\t            for (var i = 0, n = terms.size(); i < n; ++i) {\n\t                var termPair = terms.itemAt(i);\n\t                if (!nearZero(termPair.second)) {\n\t                    var symbol = this._getVarSymbol(termPair.first);\n\t                    var basicPair = this._rowMap.find(symbol);\n\t                    if (basicPair !== undefined) {\n\t                        row.insertRow(basicPair.second, termPair.second);\n\t                    }\n\t                    else {\n\t                        row.insertSymbol(symbol, termPair.second);\n\t                    }\n\t                }\n\t            }\n\t            // Add the necessary slack, error, and dummy variables.\n\t            var objective = this._objective;\n\t            var strength = constraint.strength();\n\t            var tag = { marker: INVALID_SYMBOL, other: INVALID_SYMBOL };\n\t            switch (constraint.op()) {\n\t                case 0 /* Le */:\n\t                case 1 /* Ge */:\n\t                    {\n\t                        var coeff = constraint.op() === 0 /* Le */ ? 1.0 : -1.0;\n\t                        var slack = this._makeSymbol(2 /* Slack */);\n\t                        tag.marker = slack;\n\t                        row.insertSymbol(slack, coeff);\n\t                        if (strength < kiwi.Strength.required) {\n\t                            var error = this._makeSymbol(3 /* Error */);\n\t                            tag.other = error;\n\t                            row.insertSymbol(error, -coeff);\n\t                            objective.insertSymbol(error, strength);\n\t                        }\n\t                        break;\n\t                    }\n\t                case 2 /* Eq */:\n\t                    {\n\t                        if (strength < kiwi.Strength.required) {\n\t                            var errplus = this._makeSymbol(3 /* Error */);\n\t                            var errminus = this._makeSymbol(3 /* Error */);\n\t                            tag.marker = errplus;\n\t                            tag.other = errminus;\n\t                            row.insertSymbol(errplus, -1.0); // v = eplus - eminus\n\t                            row.insertSymbol(errminus, 1.0); // v - eplus + eminus = 0\n\t                            objective.insertSymbol(errplus, strength);\n\t                            objective.insertSymbol(errminus, strength);\n\t                        }\n\t                        else {\n\t                            var dummy = this._makeSymbol(4 /* Dummy */);\n\t                            tag.marker = dummy;\n\t                            row.insertSymbol(dummy);\n\t                        }\n\t                        break;\n\t                    }\n\t            }\n\t            // Ensure the row has a positive constant.\n\t            if (row.constant() < 0.0) {\n\t                row.reverseSign();\n\t            }\n\t            return { row: row, tag: tag };\n\t        };\n\t        /**\n\t         * Choose the subject for solving for the row.\n\t         *\n\t         * This method will choose the best subject for using as the solve\n\t         * target for the row. An invalid symbol will be returned if there\n\t         * is no valid target.\n\t         *\n\t         * The symbols are chosen according to the following precedence:\n\t         *\n\t         * 1) The first symbol representing an external variable.\n\t         * 2) A negative slack or error tag variable.\n\t         *\n\t         * If a subject cannot be found, an invalid symbol will be returned.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._chooseSubject = function (row, tag) {\n\t            var cells = row.cells();\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                if (pair.first.type() === 1 /* External */) {\n\t                    return pair.first;\n\t                }\n\t            }\n\t            var type = tag.marker.type();\n\t            if (type === 2 /* Slack */ || type === 3 /* Error */) {\n\t                if (row.coefficientFor(tag.marker) < 0.0) {\n\t                    return tag.marker;\n\t                }\n\t            }\n\t            type = tag.other.type();\n\t            if (type === 2 /* Slack */ || type === 3 /* Error */) {\n\t                if (row.coefficientFor(tag.other) < 0.0) {\n\t                    return tag.other;\n\t                }\n\t            }\n\t            return INVALID_SYMBOL;\n\t        };\n\t        /**\n\t         * Add the row to the tableau using an artificial variable.\n\t         *\n\t         * This will return false if the constraint cannot be satisfied.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._addWithArtificialVariable = function (row) {\n\t            // Create and add the artificial variable to the tableau.\n\t            var art = this._makeSymbol(2 /* Slack */);\n\t            this._rowMap.insert(art, row.copy());\n\t            this._artificial = row.copy();\n\t            // Optimize the artificial objective. This is successful\n\t            // only if the artificial objective is optimized to zero.\n\t            this._optimize(this._artificial);\n\t            var success = nearZero(this._artificial.constant());\n\t            this._artificial = null;\n\t            // If the artificial variable is basic, pivot the row so that\n\t            // it becomes non-basic. If the row is constant, exit early.\n\t            var pair = this._rowMap.erase(art);\n\t            if (pair !== undefined) {\n\t                var basicRow = pair.second;\n\t                if (basicRow.isConstant()) {\n\t                    return success;\n\t                }\n\t                var entering = this._anyPivotableSymbol(basicRow);\n\t                if (entering.type() === 0 /* Invalid */) {\n\t                    return false; // unsatisfiable (will this ever happen?)\n\t                }\n\t                basicRow.solveForEx(art, entering);\n\t                this._substitute(entering, basicRow);\n\t                this._rowMap.insert(entering, basicRow);\n\t            }\n\t            // Remove the artificial variable from the tableau.\n\t            var rows = this._rowMap;\n\t            for (var i = 0, n = rows.size(); i < n; ++i) {\n\t                rows.itemAt(i).second.removeSymbol(art);\n\t            }\n\t            this._objective.removeSymbol(art);\n\t            return success;\n\t        };\n\t        /**\n\t         * Substitute the parametric symbol with the given row.\n\t         *\n\t         * This method will substitute all instances of the parametric symbol\n\t         * in the tableau and the objective function with the given row.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._substitute = function (symbol, row) {\n\t            var rows = this._rowMap;\n\t            for (var i = 0, n = rows.size(); i < n; ++i) {\n\t                var pair = rows.itemAt(i);\n\t                pair.second.substitute(symbol, row);\n\t                if (pair.second.constant() < 0.0 && pair.first.type() !== 1 /* External */) {\n\t                    this._infeasibleRows.push(pair.first);\n\t                }\n\t            }\n\t            this._objective.substitute(symbol, row);\n\t            if (this._artificial) {\n\t                this._artificial.substitute(symbol, row);\n\t            }\n\t        };\n\t        /**\n\t         * Optimize the system for the given objective function.\n\t         *\n\t         * This method performs iterations of Phase 2 of the simplex method\n\t         * until the objective function reaches a minimum.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._optimize = function (objective) {\n\t            while (true) {\n\t                var entering = this._getEnteringSymbol(objective);\n\t                if (entering.type() === 0 /* Invalid */) {\n\t                    return;\n\t                }\n\t                var leaving = this._getLeavingSymbol(entering);\n\t                if (leaving.type() === 0 /* Invalid */) {\n\t                    throw new Error(\"the objective is unbounded\");\n\t                }\n\t                // pivot the entering symbol into the basis\n\t                var row = this._rowMap.erase(leaving).second;\n\t                row.solveForEx(leaving, entering);\n\t                this._substitute(entering, row);\n\t                this._rowMap.insert(entering, row);\n\t            }\n\t        };\n\t        /**\n\t         * Optimize the system using the dual of the simplex method.\n\t         *\n\t         * The current state of the system should be such that the objective\n\t         * function is optimal, but not feasible. This method will perform\n\t         * an iteration of the dual simplex method to make the solution both\n\t         * optimal and feasible.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._dualOptimize = function () {\n\t            var rows = this._rowMap;\n\t            var infeasible = this._infeasibleRows;\n\t            while (infeasible.length !== 0) {\n\t                var leaving = infeasible.pop();\n\t                var pair = rows.find(leaving);\n\t                if (pair !== undefined && pair.second.constant() < 0.0) {\n\t                    var entering = this._getDualEnteringSymbol(pair.second);\n\t                    if (entering.type() === 0 /* Invalid */) {\n\t                        throw new Error(\"dual optimize failed\");\n\t                    }\n\t                    // pivot the entering symbol into the basis\n\t                    var row = pair.second;\n\t                    rows.erase(leaving);\n\t                    row.solveForEx(leaving, entering);\n\t                    this._substitute(entering, row);\n\t                    rows.insert(entering, row);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * Compute the entering variable for a pivot operation.\n\t         *\n\t         * This method will return first symbol in the objective function which\n\t         * is non-dummy and has a coefficient less than zero. If no symbol meets\n\t         * the criteria, it means the objective function is at a minimum, and an\n\t         * invalid symbol is returned.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._getEnteringSymbol = function (objective) {\n\t            var cells = objective.cells();\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                var symbol = pair.first;\n\t                if (pair.second < 0.0 && symbol.type() !== 4 /* Dummy */) {\n\t                    return symbol;\n\t                }\n\t            }\n\t            return INVALID_SYMBOL;\n\t        };\n\t        /**\n\t         * Compute the entering symbol for the dual optimize operation.\n\t         *\n\t         * This method will return the symbol in the row which has a positive\n\t         * coefficient and yields the minimum ratio for its respective symbol\n\t         * in the objective function. The provided row *must* be infeasible.\n\t         * If no symbol is found which meats the criteria, an invalid symbol\n\t         * is returned.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._getDualEnteringSymbol = function (row) {\n\t            var ratio = Number.MAX_VALUE;\n\t            var entering = INVALID_SYMBOL;\n\t            var cells = row.cells();\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                var symbol = pair.first;\n\t                var c = pair.second;\n\t                if (c > 0.0 && symbol.type() !== 4 /* Dummy */) {\n\t                    var coeff = this._objective.coefficientFor(symbol);\n\t                    var r = coeff / c;\n\t                    if (r < ratio) {\n\t                        ratio = r;\n\t                        entering = symbol;\n\t                    }\n\t                }\n\t            }\n\t            return entering;\n\t        };\n\t        /**\n\t         * Compute the symbol for pivot exit row.\n\t         *\n\t         * This method will return the symbol for the exit row in the row\n\t         * map. If no appropriate exit symbol is found, an invalid symbol\n\t         * will be returned. This indicates that the objective function is\n\t         * unbounded.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._getLeavingSymbol = function (entering) {\n\t            var ratio = Number.MAX_VALUE;\n\t            var found = INVALID_SYMBOL;\n\t            var rows = this._rowMap;\n\t            for (var i = 0, n = rows.size(); i < n; ++i) {\n\t                var pair = rows.itemAt(i);\n\t                var symbol = pair.first;\n\t                if (symbol.type() !== 1 /* External */) {\n\t                    var row = pair.second;\n\t                    var temp = row.coefficientFor(entering);\n\t                    if (temp < 0.0) {\n\t                        var temp_ratio = -row.constant() / temp;\n\t                        if (temp_ratio < ratio) {\n\t                            ratio = temp_ratio;\n\t                            found = symbol;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return found;\n\t        };\n\t        /**\n\t         * Compute the leaving symbol for a marker variable.\n\t         *\n\t         * This method will return a symbol corresponding to a basic row\n\t         * which holds the given marker variable. The row will be chosen\n\t         * according to the following precedence:\n\t         *\n\t         * 1) The row with a restricted basic varible and a negative coefficient\n\t         *    for the marker with the smallest ratio of -constant / coefficient.\n\t         *\n\t         * 2) The row with a restricted basic variable and the smallest ratio\n\t         *    of constant / coefficient.\n\t         *\n\t         * 3) The last unrestricted row which contains the marker.\n\t         *\n\t         * If the marker does not exist in any row, an invalid symbol will be\n\t         * returned. This indicates an internal solver error since the marker\n\t         * *should* exist somewhere in the tableau.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._getMarkerLeavingSymbol = function (marker) {\n\t            var dmax = Number.MAX_VALUE;\n\t            var r1 = dmax;\n\t            var r2 = dmax;\n\t            var invalid = INVALID_SYMBOL;\n\t            var first = invalid;\n\t            var second = invalid;\n\t            var third = invalid;\n\t            var rows = this._rowMap;\n\t            for (var i = 0, n = rows.size(); i < n; ++i) {\n\t                var pair = rows.itemAt(i);\n\t                var row = pair.second;\n\t                var c = row.coefficientFor(marker);\n\t                if (c === 0.0) {\n\t                    continue;\n\t                }\n\t                var symbol = pair.first;\n\t                if (symbol.type() === 1 /* External */) {\n\t                    third = symbol;\n\t                }\n\t                else if (c < 0.0) {\n\t                    var r = -row.constant() / c;\n\t                    if (r < r1) {\n\t                        r1 = r;\n\t                        first = symbol;\n\t                    }\n\t                }\n\t                else {\n\t                    var r = row.constant() / c;\n\t                    if (r < r2) {\n\t                        r2 = r;\n\t                        second = symbol;\n\t                    }\n\t                }\n\t            }\n\t            if (first !== invalid) {\n\t                return first;\n\t            }\n\t            if (second !== invalid) {\n\t                return second;\n\t            }\n\t            return third;\n\t        };\n\t        /**\n\t         * Remove the effects of a constraint on the objective function.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._removeConstraintEffects = function (cn, tag) {\n\t            if (tag.marker.type() === 3 /* Error */) {\n\t                this._removeMarkerEffects(tag.marker, cn.strength());\n\t            }\n\t            if (tag.other.type() === 3 /* Error */) {\n\t                this._removeMarkerEffects(tag.other, cn.strength());\n\t            }\n\t        };\n\t        /**\n\t         * Remove the effects of an error marker on the objective function.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._removeMarkerEffects = function (marker, strength) {\n\t            var pair = this._rowMap.find(marker);\n\t            if (pair !== undefined) {\n\t                this._objective.insertRow(pair.second, -strength);\n\t            }\n\t            else {\n\t                this._objective.insertSymbol(marker, -strength);\n\t            }\n\t        };\n\t        /**\n\t         * Get the first Slack or Error symbol in the row.\n\t         *\n\t         * If no such symbol is present, an invalid symbol will be returned.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._anyPivotableSymbol = function (row) {\n\t            var cells = row.cells();\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                var type = pair.first.type();\n\t                if (type === 2 /* Slack */ || type === 3 /* Error */) {\n\t                    return pair.first;\n\t                }\n\t            }\n\t            return INVALID_SYMBOL;\n\t        };\n\t        /**\n\t         * Returns a new Symbol of the given type.\n\t         *\n\t         * @private\n\t         */\n\t        Solver.prototype._makeSymbol = function (type) {\n\t            return new Symbol(type, this._idTick++);\n\t        };\n\t        return Solver;\n\t    })();\n\t    kiwi.Solver = Solver;\n\t    /**\n\t     * Test whether a value is approximately zero.\n\t     * @private\n\t     */\n\t    function nearZero(value) {\n\t        var eps = 1.0e-8;\n\t        return value < 0.0 ? -value < eps : value < eps;\n\t    }\n\t    /**\n\t     * An internal function for creating a constraint map.\n\t     * @private\n\t     */\n\t    function createCnMap() {\n\t        return kiwi.createMap(kiwi.Constraint.Compare);\n\t    }\n\t    /**\n\t     * An internal function for creating a row map.\n\t     * @private\n\t     */\n\t    function createRowMap() {\n\t        return kiwi.createMap(Symbol.Compare);\n\t    }\n\t    /**\n\t     * An internal function for creating a variable map.\n\t     * @private\n\t     */\n\t    function createVarMap() {\n\t        return kiwi.createMap(kiwi.Variable.Compare);\n\t    }\n\t    /**\n\t     * An internal function for creating an edit map.\n\t     * @private\n\t     */\n\t    function createEditMap() {\n\t        return kiwi.createMap(kiwi.Variable.Compare);\n\t    }\n\t    /**\n\t     * An enum defining the available symbol types.\n\t     * @private\n\t     */\n\t    var SymbolType;\n\t    (function (SymbolType) {\n\t        SymbolType[SymbolType[\"Invalid\"] = 0] = \"Invalid\";\n\t        SymbolType[SymbolType[\"External\"] = 1] = \"External\";\n\t        SymbolType[SymbolType[\"Slack\"] = 2] = \"Slack\";\n\t        SymbolType[SymbolType[\"Error\"] = 3] = \"Error\";\n\t        SymbolType[SymbolType[\"Dummy\"] = 4] = \"Dummy\";\n\t    })(SymbolType || (SymbolType = {}));\n\t    /**\n\t     * An internal class representing a symbol in the solver.\n\t     * @private\n\t     */\n\t    var Symbol = (function () {\n\t        /**\n\t         * Construct a new Symbol\n\t         *\n\t         * @param [type] The type of the symbol.\n\t         * @param [id] The unique id number of the symbol.\n\t         */\n\t        function Symbol(type, id) {\n\t            this._id = id;\n\t            this._type = type;\n\t        }\n\t        /**\n\t         * The static Symbol comparison function.\n\t         */\n\t        Symbol.Compare = function (a, b) {\n\t            return a.id() - b.id();\n\t        };\n\t        /**\n\t         * Returns the unique id number of the symbol.\n\t         */\n\t        Symbol.prototype.id = function () {\n\t            return this._id;\n\t        };\n\t        /**\n\t         * Returns the type of the symbol.\n\t         */\n\t        Symbol.prototype.type = function () {\n\t            return this._type;\n\t        };\n\t        return Symbol;\n\t    })();\n\t    /**\n\t     * A static invalid symbol\n\t     * @private\n\t     */\n\t    var INVALID_SYMBOL = new Symbol(0 /* Invalid */, -1);\n\t    /**\n\t     * An internal row class used by the solver.\n\t     * @private\n\t     */\n\t    var Row = (function () {\n\t        /**\n\t         * Construct a new Row.\n\t         */\n\t        function Row(constant) {\n\t            if (constant === void 0) { constant = 0.0; }\n\t            this._cellMap = kiwi.createMap(Symbol.Compare);\n\t            this._constant = constant;\n\t        }\n\t        /**\n\t         * Returns the mapping of symbols to coefficients.\n\t         */\n\t        Row.prototype.cells = function () {\n\t            return this._cellMap;\n\t        };\n\t        /**\n\t         * Returns the constant for the row.\n\t         */\n\t        Row.prototype.constant = function () {\n\t            return this._constant;\n\t        };\n\t        /**\n\t         * Returns true if the row is a constant value.\n\t         */\n\t        Row.prototype.isConstant = function () {\n\t            return this._cellMap.empty();\n\t        };\n\t        /**\n\t         * Returns true if the Row has all dummy symbols.\n\t         */\n\t        Row.prototype.allDummies = function () {\n\t            var cells = this._cellMap;\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                if (pair.first.type() !== 4 /* Dummy */) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        /**\n\t         * Create a copy of the row.\n\t         */\n\t        Row.prototype.copy = function () {\n\t            var theCopy = new Row(this._constant);\n\t            theCopy._cellMap = this._cellMap.copy();\n\t            return theCopy;\n\t        };\n\t        /**\n\t         * Add a constant value to the row constant.\n\t         *\n\t         * Returns the new value of the constant.\n\t         */\n\t        Row.prototype.add = function (value) {\n\t            return this._constant += value;\n\t        };\n\t        /**\n\t         * Insert the symbol into the row with the given coefficient.\n\t         *\n\t         * If the symbol already exists in the row, the coefficient\n\t         * will be added to the existing coefficient. If the resulting\n\t         * coefficient is zero, the symbol will be removed from the row.\n\t         */\n\t        Row.prototype.insertSymbol = function (symbol, coefficient) {\n\t            if (coefficient === void 0) { coefficient = 1.0; }\n\t            var pair = this._cellMap.setDefault(symbol, function () { return 0.0; });\n\t            if (nearZero(pair.second += coefficient)) {\n\t                this._cellMap.erase(symbol);\n\t            }\n\t        };\n\t        /**\n\t         * Insert a row into this row with a given coefficient.\n\t         *\n\t         * The constant and the cells of the other row will be\n\t         * multiplied by the coefficient and added to this row. Any\n\t         * cell with a resulting coefficient of zero will be removed\n\t         * from the row.\n\t         */\n\t        Row.prototype.insertRow = function (other, coefficient) {\n\t            if (coefficient === void 0) { coefficient = 1.0; }\n\t            this._constant += other._constant * coefficient;\n\t            var cells = other._cellMap;\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                this.insertSymbol(pair.first, pair.second * coefficient);\n\t            }\n\t        };\n\t        /**\n\t         * Remove a symbol from the row.\n\t         */\n\t        Row.prototype.removeSymbol = function (symbol) {\n\t            this._cellMap.erase(symbol);\n\t        };\n\t        /**\n\t         * Reverse the sign of the constant and cells in the row.\n\t         */\n\t        Row.prototype.reverseSign = function () {\n\t            this._constant = -this._constant;\n\t            var cells = this._cellMap;\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                var pair = cells.itemAt(i);\n\t                pair.second = -pair.second;\n\t            }\n\t        };\n\t        /**\n\t         * Solve the row for the given symbol.\n\t         *\n\t         * This method assumes the row is of the form\n\t         * a * x + b * y + c = 0 and (assuming solve for x) will modify\n\t         * the row to represent the right hand side of\n\t         * x = -b/a * y - c / a. The target symbol will be removed from\n\t         * the row, and the constant and other cells will be multiplied\n\t         * by the negative inverse of the target coefficient.\n\t         *\n\t         * The given symbol *must* exist in the row.\n\t         */\n\t        Row.prototype.solveFor = function (symbol) {\n\t            var cells = this._cellMap;\n\t            var pair = cells.erase(symbol);\n\t            var coeff = -1.0 / pair.second;\n\t            this._constant *= coeff;\n\t            for (var i = 0, n = cells.size(); i < n; ++i) {\n\t                cells.itemAt(i).second *= coeff;\n\t            }\n\t        };\n\t        /**\n\t         * Solve the row for the given symbols.\n\t         *\n\t         * This method assumes the row is of the form\n\t         * x = b * y + c and will solve the row such that\n\t         * y = x / b - c / b. The rhs symbol will be removed from the\n\t         * row, the lhs added, and the result divided by the negative\n\t         * inverse of the rhs coefficient.\n\t         *\n\t         * The lhs symbol *must not* exist in the row, and the rhs\n\t         * symbol must* exist in the row.\n\t         */\n\t        Row.prototype.solveForEx = function (lhs, rhs) {\n\t            this.insertSymbol(lhs, -1.0);\n\t            this.solveFor(rhs);\n\t        };\n\t        /**\n\t         * Returns the coefficient for the given symbol.\n\t         */\n\t        Row.prototype.coefficientFor = function (symbol) {\n\t            var pair = this._cellMap.find(symbol);\n\t            return pair !== undefined ? pair.second : 0.0;\n\t        };\n\t        /**\n\t         * Substitute a symbol with the data from another row.\n\t         *\n\t         * Given a row of the form a * x + b and a substitution of the\n\t         * form x = 3 * y + c the row will be updated to reflect the\n\t         * expression 3 * a * y + a * c + b.\n\t         *\n\t         * If the symbol does not exist in the row, this is a no-op.\n\t         */\n\t        Row.prototype.substitute = function (symbol, row) {\n\t            var pair = this._cellMap.erase(symbol);\n\t            if (pair !== undefined) {\n\t                this.insertRow(row, pair.second);\n\t            }\n\t        };\n\t        return Row;\n\t    })();\n\t})(kiwi || (kiwi = {}));\n\t/*-----------------------------------------------------------------------------\n\t| Copyright (c) 2014, Nucleic Development Team.\n\t|\n\t| Distributed under the terms of the Modified BSD License.\n\t|\n\t| The full license is in the file COPYING.txt, distributed with this software.\n\t|----------------------------------------------------------------------------*/\n\t/// <reference path=\"constraint.ts\"/>\n\t/// <reference path=\"expression.ts\"/>\n\t/// <reference path=\"maptype.ts\"/>\n\t/// <reference path=\"solver.ts\"/>\n\t/// <reference path=\"strength.ts\"/>\n\t/// <reference path=\"variable.ts\"/>\n\t\n\treturn kiwi;\n\t\n\t}));\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _kiwiSolver = __webpack_require__(8);\n\t\n\tvar _kiwiSolver2 = _interopRequireDefault(_kiwiSolver);\n\t\n\tvar _Attribute = __webpack_require__(1);\n\t\n\tvar _Attribute2 = _interopRequireDefault(_Attribute);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * A SubView is automatically generated when constraints are added to a View.\n\t *\n\t * @namespace SubView\n\t */\n\t\n\tvar SubView = function () {\n\t    function SubView(options) {\n\t        _classCallCheck(this, SubView);\n\t\n\t        this._name = options.name;\n\t        this._type = options.type;\n\t        this._solver = options.solver;\n\t        this._attr = {};\n\t        if (!options.name) {\n\t            if (undefined) {\n\t                this._attr[_Attribute2.default.LEFT] = new _kiwiSolver2.default.Variable();\n\t                this._solver.addConstraint(new _kiwiSolver2.default.StayConstraint(this._attr[_Attribute2.default.LEFT], _kiwiSolver2.default.Strength.required));\n\t                this._attr[_Attribute2.default.TOP] = new _kiwiSolver2.default.Variable();\n\t                this._solver.addConstraint(new _kiwiSolver2.default.StayConstraint(this._attr[_Attribute2.default.TOP], _kiwiSolver2.default.Strength.required));\n\t                this._attr[_Attribute2.default.ZINDEX] = new _kiwiSolver2.default.Variable();\n\t                this._solver.addConstraint(new _kiwiSolver2.default.StayConstraint(this._attr[_Attribute2.default.ZINDEX], _kiwiSolver2.default.Strength.required));\n\t            } else {\n\t                this._attr[_Attribute2.default.LEFT] = new _kiwiSolver2.default.Variable();\n\t                this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[_Attribute2.default.LEFT], _kiwiSolver2.default.Operator.Eq, 0));\n\t                this._attr[_Attribute2.default.TOP] = new _kiwiSolver2.default.Variable();\n\t                this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[_Attribute2.default.TOP], _kiwiSolver2.default.Operator.Eq, 0));\n\t                this._attr[_Attribute2.default.ZINDEX] = new _kiwiSolver2.default.Variable();\n\t                this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[_Attribute2.default.ZINDEX], _kiwiSolver2.default.Operator.Eq, 0));\n\t            }\n\t        }\n\t    }\n\t\n\t    _createClass(SubView, [{\n\t        key: 'toJSON',\n\t        value: function toJSON() {\n\t            return {\n\t                name: this.name,\n\t                left: this.left,\n\t                top: this.top,\n\t                width: this.width,\n\t                height: this.height\n\t            };\n\t        }\n\t    }, {\n\t        key: 'toString',\n\t        value: function toString() {\n\t            JSON.stringify(this.toJSON(), undefined, 2);\n\t        }\n\t\n\t        /**\n\t         * Name of the sub-view.\n\t         * @readonly\n\t         * @type {String}\n\t         */\n\t\n\t    }, {\n\t        key: 'getValue',\n\t\n\t\n\t        /**\n\t         * Gets the value of one of the attributes.\n\t         *\n\t         * @param {String|Attribute} attr Attribute name (e.g. 'right', 'centerY', Attribute.TOP).\n\t         * @return {Number} value or `undefined`\n\t         */\n\t        value: function getValue(attr) {\n\t            return this._attr[attr] ? this._attr[attr].value() : undefined;\n\t        }\n\t\n\t        /**\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: '_getAttr',\n\t        value: function _getAttr(attr) {\n\t            if (this._attr[attr]) {\n\t                return this._attr[attr];\n\t            }\n\t            this._attr[attr] = undefined ? new _kiwiSolver2.default.Variable() : new _kiwiSolver2.default.Variable();\n\t            switch (attr) {\n\t                case _Attribute2.default.RIGHT:\n\t                    this._getAttr(_Attribute2.default.LEFT);\n\t                    this._getAttr(_Attribute2.default.WIDTH);\n\t                    if (undefined) {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Equation(this._attr[attr], _kiwiSolver2.default.plus(this._attr[_Attribute2.default.LEFT], this._attr[_Attribute2.default.WIDTH])));\n\t                    } else {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[attr], _kiwiSolver2.default.Operator.Eq, this._attr[_Attribute2.default.LEFT].plus(this._attr[_Attribute2.default.WIDTH])));\n\t                    }\n\t                    break;\n\t                case _Attribute2.default.BOTTOM:\n\t                    this._getAttr(_Attribute2.default.TOP);\n\t                    this._getAttr(_Attribute2.default.HEIGHT);\n\t                    if (undefined) {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Equation(this._attr[attr], _kiwiSolver2.default.plus(this._attr[_Attribute2.default.TOP], this._attr[_Attribute2.default.HEIGHT])));\n\t                    } else {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[attr], _kiwiSolver2.default.Operator.Eq, this._attr[_Attribute2.default.TOP].plus(this._attr[_Attribute2.default.HEIGHT])));\n\t                    }\n\t                    break;\n\t                case _Attribute2.default.CENTERX:\n\t                    this._getAttr(_Attribute2.default.LEFT);\n\t                    this._getAttr(_Attribute2.default.WIDTH);\n\t                    if (undefined) {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Equation(this._attr[attr], _kiwiSolver2.default.plus(this._attr[_Attribute2.default.LEFT], _kiwiSolver2.default.divide(this._attr[_Attribute2.default.WIDTH], 2))));\n\t                    } else {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[attr], _kiwiSolver2.default.Operator.Eq, this._attr[_Attribute2.default.LEFT].plus(this._attr[_Attribute2.default.WIDTH].divide(2))));\n\t                    }\n\t                    break;\n\t                case _Attribute2.default.CENTERY:\n\t                    this._getAttr(_Attribute2.default.TOP);\n\t                    this._getAttr(_Attribute2.default.HEIGHT);\n\t                    if (undefined) {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Equation(this._attr[attr], _kiwiSolver2.default.plus(this._attr[_Attribute2.default.TOP], _kiwiSolver2.default.divide(this._attr[_Attribute2.default.HEIGHT], 2))));\n\t                    } else {\n\t                        this._solver.addConstraint(new _kiwiSolver2.default.Constraint(this._attr[attr], _kiwiSolver2.default.Operator.Eq, this._attr[_Attribute2.default.TOP].plus(this._attr[_Attribute2.default.HEIGHT].divide(2))));\n\t                    }\n\t                    break;\n\t            }\n\t            if (!undefined) {\n\t                this._solver.updateVariables();\n\t            }\n\t            return this._attr[attr];\n\t        }\n\t\n\t        /**\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: '_getAttrValue',\n\t        value: function _getAttrValue(attr) {\n\t            if (undefined) {\n\t                return this._getAttr(attr).value;\n\t            } else {\n\t                return this._getAttr(attr).value();\n\t            }\n\t        }\n\t    }, {\n\t        key: 'name',\n\t        get: function get() {\n\t            return this._name;\n\t        }\n\t\n\t        /**\n\t         * Left value (`Attribute.LEFT`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'left',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.LEFT);\n\t        }\n\t\n\t        /**\n\t         * Right value (`Attribute.RIGHT`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'right',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.RIGHT);\n\t        }\n\t\n\t        /**\n\t         * Width value (`Attribute.WIDTH`).\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'width',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.WIDTH);\n\t        }\n\t\n\t        /**\n\t         * Height value (`Attribute.HEIGHT`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'height',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.HEIGHT);\n\t        }\n\t\n\t        /**\n\t         * Intrinsic width of the sub-view.\n\t         *\n\t         * Use this property to explicitely set the width of the sub-view, e.g.:\n\t         * ```javascript\n\t         * var view = new AutoLayout.View(AutoLayout.VisualFormat.parse('|[child1][child2]|'), {\n\t         *   width: 500\n\t         * });\n\t         * view.subViews.child1.intrinsicWidth = 100;\n\t         * console.log('child2 width: ' + view.subViews.child2.width); // 400\n\t         * ```\n\t         *\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'intrinsicWidth',\n\t        get: function get() {\n\t            return this._intrinsicWidth;\n\t        },\n\t        set: function set(value) {\n\t            if (value !== undefined && value !== this._intrinsicWidth) {\n\t                var attr = this._getAttr(_Attribute2.default.WIDTH);\n\t                if (this._intrinsicWidth === undefined) {\n\t                    if (undefined) {\n\t                        this._solver.addEditVar(attr, new _kiwiSolver2.default.Strength('required', this._name ? 998 : 999, 1000, 1000));\n\t                    } else {\n\t                        this._solver.addEditVariable(attr, _kiwiSolver2.default.Strength.create(this._name ? 998 : 999, 1000, 1000));\n\t                    }\n\t                }\n\t                this._intrinsicWidth = value;\n\t                this._solver.suggestValue(attr, value);\n\t                if (undefined) {\n\t                    this._solver.resolve();\n\t                } else {\n\t                    this._solver.updateVariables();\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Intrinsic height of the sub-view.\n\t         *\n\t         * See `intrinsicWidth`.\n\t         *\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'intrinsicHeight',\n\t        get: function get() {\n\t            return this._intrinsicHeight;\n\t        },\n\t        set: function set(value) {\n\t            if (value !== undefined && value !== this._intrinsicHeight) {\n\t                var attr = this._getAttr(_Attribute2.default.HEIGHT);\n\t                if (this._intrinsicHeight === undefined) {\n\t                    if (undefined) {\n\t                        this._solver.addEditVar(attr, new _kiwiSolver2.default.Strength('required', this._name ? 998 : 999, 1000, 1000));\n\t                    } else {\n\t                        this._solver.addEditVariable(attr, _kiwiSolver2.default.Strength.create(this._name ? 998 : 999, 1000, 1000));\n\t                    }\n\t                }\n\t                this._intrinsicHeight = value;\n\t                this._solver.suggestValue(attr, value);\n\t                if (undefined) {\n\t                    this._solver.resolve();\n\t                } else {\n\t                    this._solver.updateVariables();\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Top value (`Attribute.TOP`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'top',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.TOP);\n\t        }\n\t\n\t        /**\n\t         * Bottom value (`Attribute.BOTTOM`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'bottom',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.BOTTOM);\n\t        }\n\t\n\t        /**\n\t         * Horizontal center (`Attribute.CENTERX`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'centerX',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.CENTERX);\n\t        }\n\t\n\t        /**\n\t         * Vertical center (`Attribute.CENTERY`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'centerY',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.CENTERY);\n\t        }\n\t\n\t        /**\n\t         * Z-index (`Attribute.ZINDEX`).\n\t         * @readonly\n\t         * @type {Number}\n\t         */\n\t\n\t    }, {\n\t        key: 'zIndex',\n\t        get: function get() {\n\t            return this._getAttrValue(_Attribute2.default.ZINDEX);\n\t        }\n\t\n\t        /**\n\t         * Returns the type of the sub-view.\n\t         * @readonly\n\t         * @type {String}\n\t         */\n\t\n\t    }, {\n\t        key: 'type',\n\t        get: function get() {\n\t            return this._type;\n\t        }\n\t    }]);\n\t\n\t    return SubView;\n\t}();\n\t\n\texports.default = SubView;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** autolayout.kiwi.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b5e47908d82523734b4a\n **/","import Attribute from './Attribute';\nimport Relation from './Relation';\nimport Priority from './Priority';\nimport VisualFormat from './VisualFormat';\nimport View from './View';\nimport SubView from './SubView';\n//import DOM from './DOM';\n\n/**\n * AutoLayout.\n *\n * @namespace AutoLayout\n * @property {Attribute} Attribute\n * @property {Relation} Relation\n * @property {Priority} Priority\n * @property {VisualFormat} VisualFormat\n * @property {View} View\n * @property {SubView} SubView\n */\nvar AutoLayout = {\n    Attribute: Attribute,\n    Relation: Relation,\n    Priority: Priority,\n    VisualFormat: VisualFormat,\n    View: View,\n    SubView: SubView\n    //DOM: DOM\n};\n\nexport default AutoLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/**\n * Layout attributes.\n * @enum {String}\n */\nvar Attribute = {\n    CONST: 'const',\n    NOTANATTRIBUTE: 'const',\n    VARIABLE: 'var',\n    LEFT: 'left',\n    RIGHT: 'right',\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    WIDTH: 'width',\n    HEIGHT: 'height',\n    CENTERX: 'centerX',\n    CENTERY: 'centerY',\n    /*LEADING: 'leading',\n    TRAILING: 'trailing'*/\n    /** Used by the extended VFL syntax. */\n    ZINDEX: 'zIndex'\n};\nexport default Attribute;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Attribute.js\n **/","/**\n * Relation types.\n * @enum {String}\n */\nvar Relation = {\n    /** Less than or equal */\n    LEQ: 'leq',\n    /** Equal */\n    EQU: 'equ',\n    /** Greater than or equal */\n    GEQ: 'geq'\n};\nexport default Relation;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Relation.js\n **/","/**\n * Layout priorities.\n * @enum {String}\n */\nvar Priority = {\n    REQUIRED: 1000,\n    DEFAULTHIGH: 750,\n    DEFAULTLOW: 250\n    //FITTINGSIZELEVEL: 50,\n};\nexport default Priority;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Priority.js\n **/","import parser from './parser/parser';\nimport parserExt from './parser/parserExt';\nimport Attribute from './Attribute';\nimport Relation from './Relation';\n\nconst Orientation = {\n    HORIZONTAL: 1,\n    VERTICAL: 2,\n    ZINDEX: 4\n};\n\n/**\n * Helper function that inserts equal spacers (~).\n * @private\n */\nfunction _processEqualSpacer(context, stackView) {\n\n    // Determine unique name for the spacer\n    context.equalSpacerIndex = context.equalSpacerIndex || 1;\n    const name = '_~' + context.lineIndex + ':' + context.equalSpacerIndex + '~';\n    if (context.equalSpacerIndex > 1) {\n\n        // Ensure that all spacers have the same width/height\n        context.constraints.push({\n            view1: '_~' + context.lineIndex + ':1~',\n            attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            relation: context.relation.relation || Relation.EQU,\n            view2: name,\n            attr2: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            priority: context.relation.priority\n        });\n    }\n    context.equalSpacerIndex++;\n\n    // Enforce view/proportional width/height\n    if (context.relation.view || (context.relation.multiplier && (context.relation.multiplier !== 1))) {\n        context.constraints.push({\n            view1: name,\n            attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            relation: context.relation.relation || Relation.EQU,\n            view2: context.relation.view,\n            attr2: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            priority: context.relation.priority,\n            multiplier: context.relation.multiplier\n        });\n        context.relation.multiplier = undefined;\n    }\n    else if (context.relation.constant) {\n        context.constraints.push({\n            view1: name,\n            attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n            relation: Relation.EQU,\n            view2: null,\n            attr2: Attribute.CONST,\n            priority: context.relation.priority,\n            constant: context.relation.constant\n        });\n        context.relation.constant = undefined;\n    }\n\n    // Add constraint\n    for (var i = 0; i < context.prevViews.length; i++) {\n        const prevView = context.prevViews[i];\n        switch (context.orientation) {\n            case Orientation.HORIZONTAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.RIGHT : Attribute.LEFT;\n                context.curAttr = Attribute.LEFT;\n                break;\n            case Orientation.VERTICAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.BOTTOM : Attribute.TOP;\n                context.curAttr = Attribute.TOP;\n                break;\n            case Orientation.ZINDEX:\n                context.prevAttr = Attribute.ZINDEX;\n                context.curAttr = Attribute.ZINDEX;\n                context.relation.constant = (prevView !== stackView) ? 'default' : 0;\n                break;\n        }\n        context.constraints.push({\n            view1: prevView,\n            attr1: context.prevAttr,\n            relation: context.relation.relation,\n            view2: name,\n            attr2: context.curAttr,\n            priority: context.relation.priority\n        });\n    }\n    context.prevViews = [name];\n}\n\n/**\n * Helper function that inserts proportional spacers (-12%-).\n * @private\n */\nfunction _processProportionalSpacer(context, stackView) {\n    context.proportionalSpacerIndex = context.proportionalSpacerIndex || 1;\n    const name = '_-' + context.lineIndex + ':' + context.proportionalSpacerIndex + '-';\n    context.proportionalSpacerIndex++;\n    context.constraints.push({\n        view1: name,\n        attr1: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n        relation: context.relation.relation || Relation.EQU,\n        view2: context.relation.view, // or relative to the stackView... food for thought\n        attr2: context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT,\n        priority: context.relation.priority,\n        multiplier: context.relation.multiplier\n    });\n    context.relation.multiplier = undefined;\n\n    // Add constraint\n    for (var i = 0; i < context.prevViews.length; i++) {\n        const prevView = context.prevViews[i];\n        switch (context.orientation) {\n            case Orientation.HORIZONTAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.RIGHT : Attribute.LEFT;\n                context.curAttr = Attribute.LEFT;\n                break;\n            case Orientation.VERTICAL:\n                context.prevAttr = (prevView !== stackView) ? Attribute.BOTTOM : Attribute.TOP;\n                context.curAttr = Attribute.TOP;\n                break;\n            case Orientation.ZINDEX:\n                context.prevAttr = Attribute.ZINDEX;\n                context.curAttr = Attribute.ZINDEX;\n                context.relation.constant = (prevView !== stackView) ? 'default' : 0;\n                break;\n        }\n        context.constraints.push({\n            view1: prevView,\n            attr1: context.prevAttr,\n            relation: context.relation.relation,\n            view2: name,\n            attr2: context.curAttr,\n            priority: context.relation.priority\n        });\n    }\n    context.prevViews = [name];\n}\n\n/**\n * In case of a stack-view, set constraints for opposite orientations\n * @private\n */\nfunction _processStackView(context, name, subView) {\n    let viewName;\n    for (var orientation = 1; orientation <= 4; orientation *= 2) {\n        if ((subView.orientations & orientation) &&\n            (subView.stack.orientation !== orientation) &&\n            !(subView.stack.processedOrientations & orientation)) {\n            subView.stack.processedOrientations = subView.stack.processedOrientations | orientation;\n            viewName = viewName || {\n                name: name,\n                type: 'stack'\n            };\n            for (var i = 0, j = subView.stack.subViews.length; i < j; i++) {\n                if (orientation === Orientation.ZINDEX) {\n                    context.constraints.push({\n                        view1: viewName,\n                        attr1: Attribute.ZINDEX,\n                        relation: Relation.EQU,\n                        view2: subView.stack.subViews[i],\n                        attr2: Attribute.ZINDEX\n                    });\n                }\n                else {\n                    context.constraints.push({\n                        view1: viewName,\n                        attr1: (orientation === Orientation.VERTICAL) ? Attribute.HEIGHT : Attribute.WIDTH,\n                        relation: Relation.EQU,\n                        view2: subView.stack.subViews[i],\n                        attr2: (orientation === Orientation.VERTICAL) ? Attribute.HEIGHT : Attribute.WIDTH\n                    });\n                    context.constraints.push({\n                        view1: viewName,\n                        attr1: (orientation === Orientation.VERTICAL) ? Attribute.TOP : Attribute.LEFT,\n                        relation: Relation.EQU,\n                        view2: subView.stack.subViews[i],\n                        attr2: (orientation === Orientation.VERTICAL) ? Attribute.TOP : Attribute.LEFT\n                    });\n                }\n            }\n        }\n    }\n}\n\n/**\n * Recursive helper function converts a view-name and a range to a series\n * of view-names (e.g. [child1, child2, child3, ...]).\n * @private\n */\nfunction _getRange(name, range) {\n    if (range === true) {\n        range = name.match(/\\.\\.\\d+$/);\n        if (range) {\n            name = name.substring(0, name.length - range[0].length);\n            range = parseInt(range[0].substring(2));\n        }\n    }\n    if (!range) {\n        return [name];\n    }\n    var start = name.match(/\\d+$/);\n    var res = [];\n    var i;\n    if (start) {\n        name = name.substring(0, name.length - start[0].length);\n        for (i = parseInt(start); i <= range; i++) {\n            res.push(name + i);\n        }\n    }\n    else {\n        res.push(name);\n        for (i = 2; i <= range; i++) {\n            res.push(name + i);\n        }\n    }\n    return res;\n}\n\n/**\n * Recursive helper function that processes the cascaded data.\n * @private\n */\nfunction _processCascade(context, cascade, parentItem) {\n    const stackView = parentItem ? parentItem.view : null;\n    const subViews = [];\n    let curViews = [];\n    let subView;\n    if (stackView) {\n        cascade.push({view: stackView});\n        curViews.push(stackView);\n    }\n    for (var i = 0; i < cascade.length; i++) {\n        let item = cascade[i];\n        if ((!Array.isArray(item) && item.hasOwnProperty('view')) ||\n            (Array.isArray(item) && item[0].view && !item[0].relation)) {\n            const items = Array.isArray(item) ? item : [item];\n            for (var z = 0; z < items.length; z++) {\n                item = items[z];\n                const viewRange = (item === ',') ? [] : item.view ? _getRange(item.view, item.range) : [null];\n                for (var r = 0; r < viewRange.length; r++) {\n                    const curView = viewRange[r];\n                    curViews.push(curView);\n\n                    //\n                    // Add this view to the collection of subViews\n                    //\n                    if (curView !== stackView) {\n                        subViews.push(curView);\n                        subView = context.subViews[curView];\n                        if (!subView) {\n                            subView = {orientations: 0};\n                            context.subViews[curView] = subView;\n                        }\n                        subView.orientations = subView.orientations | context.orientation;\n                        if (subView.stack) {\n                            _processStackView(context, curView, subView);\n                        }\n                    }\n\n                    //\n                    // Process the relationship between this and the previous views\n                    //\n                    if ((context.prevViews !== undefined) && (curView !== undefined) && context.relation) {\n                        if (context.relation.relation !== 'none') {\n                            for (var p = 0; p < context.prevViews.length; p++) {\n                                const prevView = context.prevViews[p];\n                                switch (context.orientation) {\n                                    case Orientation.HORIZONTAL:\n                                        context.prevAttr = (prevView !== stackView) ? Attribute.RIGHT : Attribute.LEFT;\n                                        context.curAttr = (curView !== stackView) ? Attribute.LEFT : Attribute.RIGHT;\n                                        break;\n                                    case Orientation.VERTICAL:\n                                        context.prevAttr = (prevView !== stackView) ? Attribute.BOTTOM : Attribute.TOP;\n                                        context.curAttr = (curView !== stackView) ? Attribute.TOP : Attribute.BOTTOM;\n                                        break;\n                                    case Orientation.ZINDEX:\n                                        context.prevAttr = Attribute.ZINDEX;\n                                        context.curAttr = Attribute.ZINDEX;\n                                        context.relation.constant = !prevView ? 0 : (context.relation.constant || 'default');\n                                        break;\n                                }\n                                context.constraints.push({\n                                    view1: prevView,\n                                    attr1: context.prevAttr,\n                                    relation: context.relation.relation,\n                                    view2: curView,\n                                    attr2: context.curAttr,\n                                    multiplier: context.relation.multiplier,\n                                    constant: ((context.relation.constant === 'default') || !context.relation.constant) ? context.relation.constant : -context.relation.constant,\n                                    priority: context.relation.priority\n                                });\n                            }\n                        }\n                    }\n\n                    //\n                    // Process view size constraints\n                    //\n                    const constraints = item.constraints;\n                    if (constraints) {\n                        for (var n = 0; n < constraints.length; n++) {\n                            context.prevAttr = context.horizontal ? Attribute.WIDTH : Attribute.HEIGHT;\n                            context.curAttr = (constraints[n].view || constraints[n].multiplier) ?\n                                    (constraints[n].attribute || context.prevAttr) :\n                                    (constraints[n].variable ? Attribute.VARIABLE : Attribute.CONST);\n                            context.constraints.push({\n                                view1: curView,\n                                attr1: context.prevAttr,\n                                relation: constraints[n].relation,\n                                view2: constraints[n].view,\n                                attr2: context.curAttr,\n                                multiplier: constraints[n].multiplier,\n                                constant: constraints[n].constant,\n                                priority: constraints[n].priority\n                            });\n                        }\n                    }\n\n                    //\n                    // Process cascaded data (child stack-views)\n                    //\n                    if (item.cascade) {\n                        _processCascade(context, item.cascade, item);\n                    }\n                }\n            }\n        }\n        else if (item !== ',') {\n            context.prevViews = curViews;\n            curViews = [];\n            context.relation = item[0];\n            if (context.prevViews !== undefined) {\n                if (context.relation.equalSpacing) {\n                    _processEqualSpacer(context, stackView);\n                }\n                if (context.relation.multiplier) {\n                    _processProportionalSpacer(context, stackView);\n                }\n            }\n        }\n    }\n\n    if (stackView) {\n        subView = context.subViews[stackView];\n        if (!subView) {\n            subView = {orientations: context.orientation};\n            context.subViews[stackView] = subView;\n        }\n        else if (subView.stack) {\n            const err = new Error('A stack named \"' + stackView + '\" has already been created');\n            err.column = parentItem.$parserOffset + 1;\n            throw err;\n        }\n        subView.stack = {\n            orientation: context.orientation,\n            processedOrientations: context.orientation,\n            subViews: subViews\n        };\n        _processStackView(context, stackView, subView);\n    }\n}\n\nconst metaInfoCategories = [\n    'viewport',\n    'spacing',\n    'colors',\n    'shapes',\n    'widths',\n    'heights'\n];\n\n/**\n * VisualFormat\n *\n * @namespace VisualFormat\n */\nclass VisualFormat {\n\n    /**\n     * Parses a single line of vfl into an array of constraint definitions.\n     *\n     * When the visual-format could not be succesfully parsed an exception is thrown containing\n     * additional info about the parse error and column position.\n     *\n     * @param {String} visualFormat Visual format string (cannot contain line-endings!).\n     * @param {Object} [options] Configuration options.\n     * @param {Boolean} [options.extended] When set to true uses the extended syntax (default: false).\n     * @param {String} [options.outFormat] Output format (`constraints` or `raw`) (default: `constraints`).\n     * @param {Number} [options.lineIndex] Line-index used when auto generating equal-spacing constraints.\n     * @return {Array} Array of constraint definitions.\n     */\n    static parseLine(visualFormat, options) {\n        if ((visualFormat.length === 0) ||\n            (options && options.extended && (visualFormat.indexOf('//') === 0))) {\n            return [];\n        }\n        const res = (options && options.extended) ? parserExt.parse(visualFormat) : parser.parse(visualFormat);\n        if (options && options.outFormat === 'raw') {\n            return [res];\n        }\n        var context = {\n            constraints: [],\n            lineIndex: (options ? options.lineIndex : undefined) || 1,\n            subViews: (options ? options.subViews : undefined) || {}\n        };\n        if (res.type === 'attribute') {\n          for (var n = 0; n < res.predicates.length; n++) {\n            context.constraints.push({\n              view1: res.view,\n              attr1: res.attr,\n              relation: res.predicates[n].relation,\n              view2: res.predicates[n].view,\n              attr2: res.predicates[n].attribute,\n              multiplier: res.predicates[n].multiplier,\n              constant: res.predicates[n].constant,\n              priority: res.predicates[n].priority\n            });\n          }\n        } else {\n          switch (res.orientation) {\n            case 'horizontal':\n              context.orientation = Orientation.HORIZONTAL;\n              context.horizontal = true;\n              _processCascade(context, res.cascade, null);\n              break;\n            case 'vertical':\n              context.orientation = Orientation.VERTICAL;\n              _processCascade(context, res.cascade, null);\n              break;\n            case 'horzvert':\n              context.orientation = Orientation.HORIZONTAL;\n              context.horizontal = true;\n              _processCascade(context, res.cascade, null);\n              context = {\n                constraints: context.constraints,\n                lineIndex: context.lineIndex,\n                subViews: context.subViews,\n                orientation: Orientation.VERTICAL\n              };\n              _processCascade(context, res.cascade, null);\n              break;\n            case 'zIndex':\n              context.orientation = Orientation.ZINDEX;\n              _processCascade(context, res.cascade, null);\n              break;\n          }\n        }\n        return context.constraints;\n    }\n\n    /**\n     * Parses one or more visual format strings into an array of constraint definitions.\n     *\n     * When the visual-format could not be succesfully parsed an exception is thrown containing\n     * additional info about the parse error and column position.\n     *\n     * @param {String|Array} visualFormat One or more visual format strings.\n     * @param {Object} [options] Configuration options.\n     * @param {Boolean} [options.extended] When set to true uses the extended syntax (default: false).\n     * @param {Boolean} [options.strict] When set to false trims any leading/trailing spaces and ignores empty lines (default: true).\n     * @param {String} [options.lineSeperator] String that defines the end of a line (default `\\n`).\n     * @param {String} [options.outFormat] Output format (`constraints` or `raw`) (default: `constraints`).\n     * @return {Array} Array of constraint definitions.\n     */\n    static parse(visualFormat, options) {\n        const lineSeperator = (options && options.lineSeperator) ? options.lineSeperator : '\\n';\n        if (!Array.isArray(visualFormat) && (visualFormat.indexOf(lineSeperator) < 0)) {\n            try {\n                return this.parseLine(visualFormat, options);\n            }\n            catch (err) {\n                err.source = visualFormat;\n                throw err;\n            }\n        }\n\n        // Decompose visual-format into an array of strings, and within those strings\n        // search for line-endings, and treat each line as a seperate visual-format.\n        visualFormat = Array.isArray(visualFormat) ? visualFormat : [visualFormat];\n        let lines;\n        let constraints = [];\n        let lineIndex = 0;\n        let line;\n        const parseOptions = {\n            lineIndex: lineIndex,\n            extended: (options && options.extended),\n            strict: (options && (options.strict !== undefined)) ? options.strict : true,\n            outFormat: options ? options.outFormat : undefined,\n            subViews: {}\n        };\n        try {\n            for (var i = 0; i < visualFormat.length; i++) {\n                lines = visualFormat[i].split(lineSeperator);\n                for (var j = 0; j < lines.length; j++) {\n                    line = lines[j];\n                    lineIndex++;\n                    parseOptions.lineIndex = lineIndex;\n                    if (!parseOptions.strict) {\n                        line = line.trim();\n                    }\n                    if (parseOptions.strict || line.length) {\n                        constraints = constraints.concat(this.parseLine(line, parseOptions));\n                    }\n                }\n            }\n        }\n        catch (err) {\n            err.source = line;\n            err.line = lineIndex;\n            throw err;\n        }\n        return constraints;\n    }\n\n    /**\n     * Parses meta information from the comments in the VFL.\n     *\n     * Additional meta information can be specified in the comments\n     * for previewing and rendering purposes. For instance, the view-port\n     * aspect-ratio, sub-view widths and colors, can be specified. The\n     * following example renders three colored circles in the visual-format editor:\n     *\n     * ```vfl\n     * //viewport aspect-ratio:3/1 max-height:300\n     * //colors red:#FF0000 green:#00FF00 blue:#0000FF\n     * //shapes red:circle green:circle blue:circle\n     * H:|-[row:[red(green,blue)]-[green]-[blue]]-|\n     * V:|[row]|\n     * ```\n     *\n     * Supported categories and properties:\n     *\n     * |Category|Property|Example|\n     * |--------|--------|-------|\n     * |`viewport`|`aspect-ratio:{width}/{height}`|`//viewport aspect-ratio:16/9`|\n     * ||`width:[{number}/intrinsic]`|`//viewport width:10`|\n     * ||`height:[{number}/intrinsic]`|`//viewport height:intrinsic`|\n     * ||`min-width:{number}`|\n     * ||`max-width:{number}`|\n     * ||`min-height:{number}`|\n     * ||`max-height:{number}`|\n     * |`spacing`|`[{number}/array]`|`//spacing:8` or `//spacing:[10, 20, 5]`|\n     * |`widths`|`{view-name}:[{number}/intrinsic]`|`//widths subview1:100`|\n     * |`heights`|`{view-name}:[{number}/intrinsic]`|`//heights subview1:intrinsic`|\n     * |`colors`|`{view-name}:{color}`|`//colors redview:#FF0000 blueview:#00FF00`|\n     * |`shapes`|`{view-name}:[circle/square]`|`//shapes avatar:circle`|\n     *\n     * @param {String|Array} visualFormat One or more visual format strings.\n     * @param {Object} [options] Configuration options.\n     * @param {String} [options.lineSeperator] String that defines the end of a line (default `\\n`).\n     * @param {String} [options.prefix] When specified, also processes the categories using that prefix (e.g. \"-dev-viewport max-height:10\").\n     * @return {Object} meta-info\n     */\n    static parseMetaInfo(visualFormat, options) {\n        const lineSeperator = (options && options.lineSeperator) ? options.lineSeperator : '\\n';\n        const prefix = options ? options.prefix : undefined;\n        visualFormat = Array.isArray(visualFormat) ? visualFormat : [visualFormat];\n        const metaInfo = {};\n        var key;\n        for (var k = 0; k < visualFormat.length; k++) {\n            const lines = visualFormat[k].split(lineSeperator);\n            for (var i = 0; i < lines.length; i++) {\n                const line = lines[i];\n                for (var c = 0; c < metaInfoCategories.length; c++) {\n                    for (var s = 0; s < (prefix ? 2 : 1); s++) {\n                        const category = metaInfoCategories[c];\n                        const prefixedCategory = ((s === 0) ? '' : prefix) + category;\n                        if (line.indexOf('//' + prefixedCategory + ' ') === 0) {\n                            const items = line.substring(3 + prefixedCategory.length).split(' ');\n                            for (var j = 0; j < items.length; j++) {\n                                metaInfo[category] = metaInfo[category] || {};\n                                const item = items[j].split(':');\n                                const names = _getRange(item[0], true);\n                                for (var r = 0; r < names.length; r++) {\n                                    metaInfo[category][names[r]] = (item.length > 1) ? item[1] : '';\n                                }\n                            }\n                        }\n                        else if (line.indexOf('//' + prefixedCategory + ':') === 0) {\n                            metaInfo[category] = line.substring(3 + prefixedCategory.length);\n                        }\n                    }\n                }\n            }\n        }\n        if (metaInfo.viewport) {\n            const viewport = metaInfo.viewport;\n            var aspectRatio = viewport['aspect-ratio'];\n            if (aspectRatio) {\n                aspectRatio = aspectRatio.split('/');\n                viewport['aspect-ratio'] = parseInt(aspectRatio[0]) / parseInt(aspectRatio[1]);\n            }\n            if (viewport.height !== undefined) {\n                viewport.height = (viewport.height === 'intrinsic') ? true : parseInt(viewport.height);\n            }\n            if (viewport.width !== undefined) {\n                viewport.width = (viewport.width === 'intrinsic') ? true : parseInt(viewport.width);\n            }\n            if (viewport['max-height'] !== undefined) {\n                viewport['max-height'] = parseInt(viewport['max-height']);\n            }\n            if (viewport['max-width'] !== undefined) {\n                viewport['max-width'] = parseInt(viewport['max-width']);\n            }\n            if (viewport['min-height'] !== undefined) {\n                viewport['min-height'] = parseInt(viewport['min-height']);\n            }\n            if (viewport['min-width'] !== undefined) {\n                viewport['min-width'] = parseInt(viewport['min-width']);\n            }\n        }\n        if (metaInfo.widths) {\n            for (key in metaInfo.widths) {\n                const width = (metaInfo.widths[key] === 'intrinsic') ? true : parseInt(metaInfo.widths[key]);\n                metaInfo.widths[key] = width;\n                if ((width === undefined) || isNaN(width)) {\n                    delete metaInfo.widths[key];\n                }\n            }\n        }\n        if (metaInfo.heights) {\n            for (key in metaInfo.heights) {\n                const height = (metaInfo.heights[key] === 'intrinsic') ? true : parseInt(metaInfo.heights[key]);\n                metaInfo.heights[key] = height;\n                if ((height === undefined) || isNaN(height)) {\n                    delete metaInfo.heights[key];\n                }\n            }\n        }\n        if (metaInfo.spacing) {\n            const value = JSON.parse(metaInfo.spacing);\n            metaInfo.spacing = value;\n            if (Array.isArray(value)){\n              for (var sIdx = 0, len = value.length; sIdx < len; sIdx++) {\n                if (isNaN(value[sIdx])){\n                  delete metaInfo.spacing;\n                  break;\n                }\n              }\n            } else if (value === undefined || isNaN(value)){\n              delete metaInfo.spacing;\n            }\n        }\n        return metaInfo;\n    }\n}\n\nexport default VisualFormat;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/VisualFormat.js\n **/","export default (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { visualFormatString: peg$parsevisualFormatString },\n        peg$startRuleFunction  = peg$parsevisualFormatString,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = \":\",\n        peg$c3 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c4 = [],\n        peg$c5 = function(o, superto, view, views, tosuper) { return {\n              orientation: o ? o[0] : 'horizontal',\n              cascade: (superto || []).concat(\n                [view],\n                [].concat.apply([], views),\n                (tosuper || [])\n              )\n            }\n          },\n        peg$c6 = \"H\",\n        peg$c7 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n        peg$c8 = \"V\",\n        peg$c9 = { type: \"literal\", value: \"V\", description: \"\\\"V\\\"\" },\n        peg$c10 = function(orient) { return orient == 'H' ? 'horizontal' : 'vertical' },\n        peg$c11 = \"|\",\n        peg$c12 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c13 = function() { return { view: null } },\n        peg$c14 = \"[\",\n        peg$c15 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c16 = \"]\",\n        peg$c17 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c18 = function(view, predicates) { return extend(view, predicates ? { constraints: predicates } : {}) },\n        peg$c19 = \"-\",\n        peg$c20 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c21 = function(predicateList) { return predicateList },\n        peg$c22 = function() { return [{ relation: 'equ', constant: 'default', $parserOffset: offset() }] },\n        peg$c23 = \"\",\n        peg$c24 = function() { return [{ relation: 'equ', constant: 0, $parserOffset: offset() }] },\n        peg$c25 = function(n) { return [{ relation: 'equ', constant: n, $parserOffset: offset() }] },\n        peg$c26 = \"(\",\n        peg$c27 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c28 = \",\",\n        peg$c29 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c30 = \")\",\n        peg$c31 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c32 = function(p, ps) { return [p].concat(ps.map(function(p){ return p[1] })) },\n        peg$c33 = \"@\",\n        peg$c34 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n        peg$c35 = function(r, o, p) { return extend({ relation: 'equ' }, (r || {}), o, (p ? p[1]: {})) },\n        peg$c36 = \"==\",\n        peg$c37 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n        peg$c38 = function() { return { relation: 'equ', $parserOffset: offset() } },\n        peg$c39 = \"<=\",\n        peg$c40 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n        peg$c41 = function() { return { relation: 'leq', $parserOffset: offset() } },\n        peg$c42 = \">=\",\n        peg$c43 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n        peg$c44 = function() { return { relation: 'geq', $parserOffset: offset() } },\n        peg$c45 = /^[0-9]/,\n        peg$c46 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c47 = function(digits) { return { priority: parseInt(digits.join(\"\"), 10) } },\n        peg$c48 = function(n) { return { constant: n } },\n        peg$c49 = /^[a-zA-Z_]/,\n        peg$c50 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n        peg$c51 = /^[a-zA-Z0-9_]/,\n        peg$c52 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\n        peg$c53 = function(f, v) { return { view: f + v } },\n        peg$c54 = \".\",\n        peg$c55 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c56 = function(digits, decimals) { return parseFloat(digits.concat(\".\").concat(decimals).join(\"\"), 10); },\n        peg$c57 = function(digits) { return parseInt(digits.join(\"\"), 10); },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsevisualFormatString() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseorientation();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c2;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsesuperview();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseconnection();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseview();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parseconnection();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseview();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseview();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesuperview();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$c1;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c5(s1, s2, s3, s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseorientation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 72) {\n        s1 = peg$c6;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c7); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 86) {\n          s1 = peg$c8;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c10(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsesuperview() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 124) {\n        s1 = peg$c11;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c13();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseview() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c14;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c15); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseviewName();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsepredicateListWithParens();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s4 = peg$c16;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c18(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseconnection() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c19;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c20); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicateList();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s3 = peg$c19;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c20); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c21(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c19;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c20); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c22();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$c23;\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c24();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateList() {\n      var s0;\n\n      s0 = peg$parsesimplePredicate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepredicateListWithParens();\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimplePredicate() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c25(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsepredicateListWithParens() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c26;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c28;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c29); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsepredicate();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c28;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c29); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsepredicate();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c30;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c31); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c32(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicate() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parserelation();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectOfPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s4 = peg$c33;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepriority();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c35(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parserelation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c36) {\n        s1 = peg$c36;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c38();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c39) {\n          s1 = peg$c39;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c41();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c42) {\n            s1 = peg$c42;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c44();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseobjectOfPredicate() {\n      var s0;\n\n      s0 = peg$parseconstant();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseviewName();\n      }\n\n      return s0;\n    }\n\n    function peg$parsepriority() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c45.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c46); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c45.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseconstant() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c48(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseviewName() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$c49.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c50); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c49.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c50); }\n          }\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c51.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c52); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c51.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c53(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c45.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c46); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c45.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c54;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c55); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c45.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c45.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n            }\n          } else {\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c56(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c45.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c46); }\n            }\n          }\n        } else {\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c57(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n\n      function extend(dst) {\n        for (var i = 1; i < arguments.length; i++) {\n          for (var k in arguments[i]) {\n            dst[k] = arguments[i][k];\n          }\n        }\n        return dst;\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/parser/parser.js\n **/","export default (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { visualFormatStringExt: peg$parsevisualFormatStringExt },\n        peg$startRuleFunction  = peg$parsevisualFormatStringExt,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = function(viewAttrLeft, predicates, comments) { return {\n              type: 'attribute',\n              view: viewAttrLeft.view,\n              attr: viewAttrLeft.attr,\n              predicates: predicates\n            }\n          },\n        peg$c3 = \"A:\",\n        peg$c4 = { type: \"literal\", value: \"A:\", description: \"\\\"A:\\\"\" },\n        peg$c5 = function() { return 'attribute' },\n        peg$c6 = function(view, attr) { return { view: view.view, attr:attr } },\n        peg$c7 = \":\",\n        peg$c8 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c9 = [],\n        peg$c10 = function(o, superto, view, views, tosuper, comments) { return {\n              type: 'vfl',\n              orientation: o ? o[0] : 'horizontal',\n              cascade: (superto || []).concat(\n                view,\n                [].concat.apply([], views),\n                (tosuper || [])\n              )\n            }\n          },\n        peg$c11 = \"HV\",\n        peg$c12 = { type: \"literal\", value: \"HV\", description: \"\\\"HV\\\"\" },\n        peg$c13 = function() { return 'horzvert' },\n        peg$c14 = \"H\",\n        peg$c15 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n        peg$c16 = function() { return 'horizontal' },\n        peg$c17 = \"V\",\n        peg$c18 = { type: \"literal\", value: \"V\", description: \"\\\"V\\\"\" },\n        peg$c19 = function() { return 'vertical' },\n        peg$c20 = \"Z\",\n        peg$c21 = { type: \"literal\", value: \"Z\", description: \"\\\"Z\\\"\" },\n        peg$c22 = function() { return 'zIndex' },\n        peg$c23 = \" \",\n        peg$c24 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c25 = \"//\",\n        peg$c26 = { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n        peg$c27 = { type: \"any\", description: \"any character\" },\n        peg$c28 = \"|\",\n        peg$c29 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c30 = function() { return { view: null } },\n        peg$c31 = \"[\",\n        peg$c32 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c33 = \",\",\n        peg$c34 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c35 = \"]\",\n        peg$c36 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c37 = function(view, views) { return views.length ? [view].concat([].concat.apply([], views)) : view },\n        peg$c38 = function(view, predicates, cascadedViews) { return extend(extend(view, predicates ? { constraints: predicates } : {}), cascadedViews ? {\n            cascade: cascadedViews\n          } : {}) },\n        peg$c39 = function(views, connection) { return [].concat([].concat.apply([], views),[connection]); },\n        peg$c40 = \"->\",\n        peg$c41 = { type: \"literal\", value: \"->\", description: \"\\\"->\\\"\" },\n        peg$c42 = function() { return [{ relation: 'none' }] },\n        peg$c43 = \"-\",\n        peg$c44 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c45 = function(predicateList) { return predicateList },\n        peg$c46 = function() { return [{ relation: 'equ', constant: 'default' }] },\n        peg$c47 = \"~\",\n        peg$c48 = { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n        peg$c49 = function() { return [{ relation: 'equ', equalSpacing: true }] },\n        peg$c50 = \"\",\n        peg$c51 = function() { return [{ relation: 'equ', constant: 0 }] },\n        peg$c52 = function(p) { return [{ relation: 'equ', multiplier: p.multiplier }] },\n        peg$c53 = function(n) { return [{ relation: 'equ', constant: n }] },\n        peg$c54 = \"(\",\n        peg$c55 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c56 = \")\",\n        peg$c57 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c58 = function(p, ps) { return [p].concat(ps.map(function(p){ return p[1] })) },\n        peg$c59 = \"@\",\n        peg$c60 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n        peg$c61 = function(r, o, p) { return extend({ relation: 'equ' }, (r || {}), o, (p ? p[1]: {})) },\n        peg$c62 = function(r, o, p) { return extend({ relation: 'equ', equalSpacing: true }, (r || {}), o, (p ? p[1]: {})) },\n        peg$c63 = \"==\",\n        peg$c64 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n        peg$c65 = function() { return { relation: 'equ' } },\n        peg$c66 = \"<=\",\n        peg$c67 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n        peg$c68 = function() { return { relation: 'leq' } },\n        peg$c69 = \">=\",\n        peg$c70 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n        peg$c71 = function() { return { relation: 'geq' } },\n        peg$c72 = /^[0-9]/,\n        peg$c73 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c74 = function(digits) { return { priority: parseInt(digits.join(\"\"), 10) } },\n        peg$c75 = function(n) { return { constant: n } },\n        peg$c76 = function(n) { return { constant: -n } },\n        peg$c77 = \"+\",\n        peg$c78 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c79 = \"%\",\n        peg$c80 = { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n        peg$c81 = function(n) { return { view: null, multiplier: n / 100 } },\n        peg$c82 = function(n) { return { view: null, multiplier: n / -100 } },\n        peg$c83 = function(vn, a, m, c) { return { view: vn.view, attribute: a ? a : undefined, multiplier: m ? m : 1, constant: c ? c : undefined } },\n        peg$c84 = \".left\",\n        peg$c85 = { type: \"literal\", value: \".left\", description: \"\\\".left\\\"\" },\n        peg$c86 = function() { return 'left'},\n        peg$c87 = \".right\",\n        peg$c88 = { type: \"literal\", value: \".right\", description: \"\\\".right\\\"\" },\n        peg$c89 = function() { return 'right'},\n        peg$c90 = \".top\",\n        peg$c91 = { type: \"literal\", value: \".top\", description: \"\\\".top\\\"\" },\n        peg$c92 = function() { return 'top'},\n        peg$c93 = \".bottom\",\n        peg$c94 = { type: \"literal\", value: \".bottom\", description: \"\\\".bottom\\\"\" },\n        peg$c95 = function() { return 'bottom'},\n        peg$c96 = \".width\",\n        peg$c97 = { type: \"literal\", value: \".width\", description: \"\\\".width\\\"\" },\n        peg$c98 = function() { return 'width'},\n        peg$c99 = \".height\",\n        peg$c100 = { type: \"literal\", value: \".height\", description: \"\\\".height\\\"\" },\n        peg$c101 = function() { return 'height'},\n        peg$c102 = \".centerX\",\n        peg$c103 = { type: \"literal\", value: \".centerX\", description: \"\\\".centerX\\\"\" },\n        peg$c104 = function() { return 'centerX'},\n        peg$c105 = \".centerY\",\n        peg$c106 = { type: \"literal\", value: \".centerY\", description: \"\\\".centerY\\\"\" },\n        peg$c107 = function() { return 'centerY'},\n        peg$c108 = \"/\",\n        peg$c109 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c110 = function(n) { return 1 / n; },\n        peg$c111 = \"/+\",\n        peg$c112 = { type: \"literal\", value: \"/+\", description: \"\\\"/+\\\"\" },\n        peg$c113 = \"/-\",\n        peg$c114 = { type: \"literal\", value: \"/-\", description: \"\\\"/-\\\"\" },\n        peg$c115 = function(n) { return -1 / n; },\n        peg$c116 = \"*\",\n        peg$c117 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c118 = function(n) { return n; },\n        peg$c119 = \"*+\",\n        peg$c120 = { type: \"literal\", value: \"*+\", description: \"\\\"*+\\\"\" },\n        peg$c121 = \"*-\",\n        peg$c122 = { type: \"literal\", value: \"*-\", description: \"\\\"*-\\\"\" },\n        peg$c123 = function(n) { return -n; },\n        peg$c124 = /^[a-zA-Z_]/,\n        peg$c125 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n        peg$c126 = /^[a-zA-Z0-9_]/,\n        peg$c127 = { type: \"class\", value: \"[a-zA-Z0-9_]\", description: \"[a-zA-Z0-9_]\" },\n        peg$c128 = function(f, v, r) { return { view: f + v, range: r, $parserOffset: offset() } },\n        peg$c129 = function(f, v) { return { view: f + v, $parserOffset: offset() } },\n        peg$c130 = \"..\",\n        peg$c131 = { type: \"literal\", value: \"..\", description: \"\\\"..\\\"\" },\n        peg$c132 = function(d) { return parseInt(d) },\n        peg$c133 = \".\",\n        peg$c134 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c135 = function(digits, decimals) { return parseFloat(digits.concat(\".\").concat(decimals).join(\"\"), 10); },\n        peg$c136 = function(digits) { return parseInt(digits.join(\"\"), 10); },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsevisualFormatStringExt() {\n      var s0;\n\n      s0 = peg$parsevisualFormatString();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevisualFormatStringAttributeExpression();\n      }\n\n      return s0;\n    }\n\n    function peg$parsevisualFormatStringAttributeExpression() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseattributeMark();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseattributeSignifier();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsepredicateList();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsecomments();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c2(s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseattributeMark() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c3) {\n        s1 = peg$c3;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c5();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseattributeSignifier() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseviewName();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseattribute();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c6(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsevisualFormatString() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseorientation();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c7;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsesuperview();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseconnection();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseviewGroup();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parseconnection();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseviewGroup();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseviewGroup();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseconnection();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesuperview();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$c1;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecomments();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c10(s1, s2, s3, s4, s5, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseorientation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c11) {\n        s1 = peg$c11;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c13();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 72) {\n          s1 = peg$c14;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c16();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 86) {\n            s1 = peg$c17;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c18); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c19();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 90) {\n              s1 = peg$c20;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c21); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c22();\n            }\n            s0 = s1;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomments() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s2 = peg$c23;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c24); }\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s2 = peg$c23;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c25) {\n          s2 = peg$c25;\n          peg$currPos += 2;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c27); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (input.length > peg$currPos) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c27); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesuperview() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 124) {\n        s1 = peg$c28;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c30();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseviewGroup() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c31;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseview();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseview();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c33;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseview();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s4 = peg$c35;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c36); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c37(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseview() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseviewNameRange();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicateListWithParens();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecascadedViews();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c38(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecascadedViews() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseconnection();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseviewGroup();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parseconnection();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseviewGroup();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseconnection();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c39(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseconnection() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c40) {\n        s1 = peg$c40;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c42();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c43;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepredicateList();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s3 = peg$c43;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c44); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c45(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c43;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c44); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c46();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 126) {\n              s1 = peg$c47;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c48); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parseequalSpacingPredicateList();\n              if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 126) {\n                  s3 = peg$c47;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c45(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 126) {\n                s1 = peg$c47;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c48); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c49();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$c50;\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c51();\n                }\n                s0 = s1;\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateList() {\n      var s0;\n\n      s0 = peg$parsesimplePredicate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepredicateListWithParens();\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimplePredicate() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsepercentage();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c52(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsenumber();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c53(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateListWithParens() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c54;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsepredicate();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c33;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsepredicate();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c56;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c58(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicate() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parserelation();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectOfPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s4 = peg$c59;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c60); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepriority();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c61(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseequalSpacingPredicateList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c54;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseequalSpacingPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseequalSpacingPredicate();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c33;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseequalSpacingPredicate();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c56;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c58(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseequalSpacingPredicate() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parserelation();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectOfPredicate();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 64) {\n            s4 = peg$c59;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c60); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepriority();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c62(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parserelation() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c63) {\n        s1 = peg$c63;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c64); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c65();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c66) {\n          s1 = peg$c66;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c67); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c68();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c69) {\n            s1 = peg$c69;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c70); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c71();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseobjectOfPredicate() {\n      var s0;\n\n      s0 = peg$parsepercentage();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseconstant();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseviewPredicate();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepriority() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c72.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c73); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c72.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c73); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c74(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseconstant() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c75(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c43;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c76(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c77;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c78); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumber();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c75(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepercentage() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s2 = peg$c79;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c80); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c81(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c43;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 37) {\n              s3 = peg$c79;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c80); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c82(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c77;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c78); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumber();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 37) {\n                s3 = peg$c79;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c80); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c81(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseviewPredicate() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseviewName();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseattribute();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemultiplier();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseconstantExpr();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c83(s1, s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseattribute() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c84) {\n        s1 = peg$c84;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c85); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c86();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c87) {\n          s1 = peg$c87;\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c88); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c89();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4) === peg$c90) {\n            s1 = peg$c90;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c91); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c92();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7) === peg$c93) {\n              s1 = peg$c93;\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c94); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c95();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 6) === peg$c96) {\n                s1 = peg$c96;\n                peg$currPos += 6;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c97); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c98();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 7) === peg$c99) {\n                  s1 = peg$c99;\n                  peg$currPos += 7;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c101();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 8) === peg$c102) {\n                    s1 = peg$c102;\n                    peg$currPos += 8;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c104();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 8) === peg$c105) {\n                      s1 = peg$c105;\n                      peg$currPos += 8;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c107();\n                    }\n                    s0 = s1;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemultiplier() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s1 = peg$c108;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c109); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c110(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c111) {\n          s1 = peg$c111;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c112); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c110(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c113) {\n            s1 = peg$c113;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c114); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumber();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c115(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s1 = peg$c116;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c117); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parsenumber();\n              if (s2 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c118(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c119) {\n                s1 = peg$c119;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c120); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parsenumber();\n                if (s2 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c118(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c121) {\n                  s1 = peg$c121;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c122); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parsenumber();\n                  if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c123(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseconstantExpr() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenumber();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c123(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c77;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c78); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c118(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseviewNameRange() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c126.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c126.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c127); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parserange();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c128(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        if (peg$c124.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c124.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c125); }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s2 = input.substring(s1, peg$currPos);\n        }\n        s1 = s2;\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = [];\n          if (peg$c126.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c127); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c126.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c127); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s3 = input.substring(s2, peg$currPos);\n          }\n          s2 = s3;\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c129(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseviewName() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c126.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c126.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c127); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c129(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parserange() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c130) {\n        s1 = peg$c130;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c131); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c72.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c73); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c72.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c73); }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c72.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c73); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c72.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c73); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c133;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c72.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c73); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c72.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c73); }\n              }\n            }\n          } else {\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c135(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c72.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c73); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c72.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c73); }\n            }\n          }\n        } else {\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c136(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n\n      function extend(dst) {\n        for (var i = 1; i < arguments.length; i++) {\n          for (var k in arguments[i]) {\n            dst[k] = arguments[i][k];\n          }\n        }\n        return dst;\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/parser/parserExt.js\n **/","import solver from 'constraint-solver';\nimport Attribute from './Attribute';\nimport Relation from './Relation';\nimport SubView from './SubView';\n\nconst defaultPriorityStrength = process.env.CASSOWARYJS ? new solver.Strength('defaultPriority', 0, 1000, 1000) : solver.Strength.create(0, 1000, 1000);\n\nfunction _getConst(name, value) {\n    if (process.env.CASSOWARYJS) {\n        const vr = new solver.Variable({value: value});\n        this._solver.addConstraint(new solver.StayConstraint(vr, solver.Strength.required, 0));\n        return vr;\n    }\n    else {\n        const vr = new solver.Variable();\n        this._solver.addConstraint(new solver.Constraint(vr, solver.Operator.Eq, value));\n        return vr;\n    }\n}\n\nfunction _getSubView(viewName) {\n    if (!viewName) {\n        return this._parentSubView;\n    }\n    else if (viewName.name) {\n        this._subViews[viewName.name] = this._subViews[viewName.name] || new SubView({\n            name: viewName.name,\n            solver: this._solver\n        });\n        this._subViews[viewName.name]._type = this._subViews[viewName.name]._type || viewName.type;\n        return this._subViews[viewName.name];\n    }\n    else {\n        this._subViews[viewName] = this._subViews[viewName] || new SubView({\n            name: viewName,\n            solver: this._solver\n        });\n        return this._subViews[viewName];\n    }\n}\n\nfunction _getSpacing(constraint) {\n    let index = 4;\n    if (!constraint.view1 && (constraint.attr1 === 'left')) {\n        index = 3;\n    }\n    else if (!constraint.view1 && (constraint.attr1 === 'top')) {\n        index = 0;\n    }\n    else if (!constraint.view2 && (constraint.attr2 === 'right')) {\n        index = 1;\n    }\n    else if (!constraint.view2 && (constraint.attr2 === 'bottom')) {\n        index = 2;\n    }\n    else {\n        switch (constraint.attr1) {\n            case 'left':\n            case 'right':\n            case 'centerX':\n            case 'leading':\n            case 'trailing':\n                index = 4;\n                break;\n            case 'zIndex':\n                index = 6;\n                break;\n            default:\n                index = 5;\n        }\n    }\n    this._spacingVars = this._spacingVars || new Array(7);\n    this._spacingExpr = this._spacingExpr || new Array(7);\n    if (!this._spacingVars[index]) {\n        if (process.env.CASSOWARYJS) {\n            this._spacingVars[index] = new solver.Variable();\n            this._solver.addEditVar(this._spacingVars[index]);\n            this._spacingExpr[index] = solver.minus(0, this._spacingVars[index]);\n        }\n        else {\n            this._spacingVars[index] = new solver.Variable();\n            this._solver.addEditVariable(this._spacingVars[index], solver.Strength.create(999, 1000, 1000));\n            this._spacingExpr[index] = this._spacingVars[index].multiply(-1);\n        }\n        this._solver.suggestValue(this._spacingVars[index], this._spacing[index]);\n    }\n    return this._spacingExpr[index];\n}\n\nfunction _addConstraint(constraint) {\n    //this.constraints.push(constraint);\n    let relation;\n    const multiplier = (constraint.multiplier !== undefined) ? constraint.multiplier : 1;\n    let constant = (constraint.constant !== undefined) ? constraint.constant : 0;\n    if (constant === 'default') {\n        constant = _getSpacing.call(this, constraint);\n    }\n    const attr1 = _getSubView.call(this, constraint.view1)._getAttr(constraint.attr1);\n    let attr2;\n    if (process.env.CASSOWARYJS) {\n        if (constraint.attr2 === Attribute.CONST) {\n            attr2 = _getConst.call(this, undefined, constraint.constant);\n        }\n        else {\n            attr2 = _getSubView.call(this, constraint.view2)._getAttr(constraint.attr2);\n            if ((multiplier !== 1) && constant) {\n                attr2 = solver.plus(solver.times(attr2, multiplier), constant);\n            }\n            else if (constant) {\n                attr2 = solver.plus(attr2, constant);\n            }\n            else if (multiplier !== 1) {\n                attr2 = solver.times(attr2, multiplier);\n            }\n        }\n        const strength = ((constraint.priority !== undefined) && (constraint.priority < 1000)) ? new solver.Strength('priority', 0, constraint.priority, 1000) : defaultPriorityStrength;\n        switch (constraint.relation) {\n            case Relation.EQU:\n                relation = new solver.Equation(attr1, attr2, strength);\n                break;\n            case Relation.GEQ:\n                relation = new solver.Inequality(attr1, solver.GEQ, attr2, strength);\n                break;\n            case Relation.LEQ:\n                relation = new solver.Inequality(attr1, solver.LEQ, attr2, strength);\n                break;\n            default:\n                throw 'Invalid relation specified: ' + constraint.relation;\n        }\n    }\n    else {\n        if (constraint.attr2 === Attribute.CONST) {\n            attr2 = _getConst.call(this, undefined, constraint.constant);\n        }\n        else {\n            attr2 = _getSubView.call(this, constraint.view2)._getAttr(constraint.attr2);\n            if ((multiplier !== 1) && constant) {\n                attr2 = attr2.multiply(multiplier).plus(constant);\n            }\n            else if (constant) {\n                attr2 = attr2.plus(constant);\n            }\n            else if (multiplier !== 1) {\n                attr2 = attr2.multiply(multiplier);\n            }\n        }\n        const strength = ((constraint.priority !== undefined) && (constraint.priority < 1000)) ? solver.Strength.create(0, constraint.priority, 1000) : defaultPriorityStrength;\n        switch (constraint.relation) {\n            case Relation.EQU:\n                relation = new solver.Constraint(attr1, solver.Operator.Eq, attr2, strength);\n                break;\n            case Relation.GEQ:\n                relation = new solver.Constraint(attr1, solver.Operator.Ge, attr2, strength);\n                break;\n            case Relation.LEQ:\n                relation = new solver.Constraint(attr1, solver.Operator.Le, attr2, strength);\n                break;\n            default:\n                throw 'Invalid relation specified: ' + constraint.relation;\n        }\n    }\n    this._solver.addConstraint(relation);\n}\n\nfunction _compareSpacing(old, newz) {\n    if (old === newz) {\n        return true;\n    }\n    if (!old || !newz) {\n        return false;\n    }\n    for (var i = 0; i < 7; i++) {\n        if (old[i] !== newz[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * AutoLayoutJS API reference.\n *\n * ### Index\n *\n * |Entity|Type|Description|\n * |---|---|---|\n * |[AutoLayout](#autolayout)|`namespace`|Top level AutoLayout object.|\n * |[VisualFormat](#autolayoutvisualformat--object)|`namespace`|Parses VFL into constraints.|\n * |[View](#autolayoutview)|`class`|Main entity for adding & evaluating constraints.|\n * |[SubView](#autolayoutsubview--object)|`class`|SubView's are automatically created when constraints are added to views. They give access to the evaluated results.|\n * |[Attribute](#autolayoutattribute--enum)|`enum`|Attribute types that are supported when adding constraints.|\n * |[Relation](#autolayoutrelation--enum)|`enum`|Relationship types that are supported when adding constraints.|\n * |[Priority](#autolayoutpriority--enum)|`enum`|Default priority values for when adding constraints.|\n *\n * ### AutoLayout\n *\n * @module AutoLayout\n */\nclass View {\n\n    /**\n     * @class View\n     * @param {Object} [options] Configuration options.\n     * @param {Number} [options.width] Initial width of the view.\n     * @param {Number} [options.height] Initial height of the view.\n     * @param {Number|Object} [options.spacing] Spacing for the view (default: 8) (see `setSpacing`).\n     * @param {Array} [options.constraints] One or more constraint definitions (see `addConstraints`).\n     */\n    constructor(options) {\n        this._solver = process.env.CASSOWARYJS ? new solver.SimplexSolver() : new solver.Solver();\n        this._subViews = {};\n        //this._spacing = undefined;\n        this._parentSubView = new SubView({\n            solver: this._solver\n        });\n        this.setSpacing((options && (options.spacing !== undefined)) ? options.spacing : 8);\n        //this.constraints = [];\n        if (options) {\n            if ((options.width !== undefined) || (options.height !== undefined)) {\n                this.setSize(options.width, options.height);\n            }\n            if (options.constraints) {\n                this.addConstraints(options.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the width and height of the view.\n     *\n     * @param {Number} width Width of the view.\n     * @param {Number} height Height of the view.\n     * @return {View} this\n     */\n    setSize(width, height /*, depth*/) {\n        this._parentSubView.intrinsicWidth = width;\n        this._parentSubView.intrinsicHeight = height;\n        return this;\n    }\n\n    /**\n     * Width that was set using `setSize`.\n     * @readonly\n     * @type {Number}\n     */\n    get width() {\n        return this._parentSubView.intrinsicWidth;\n    }\n\n    /**\n     * Height that was set using `setSize`.\n     * @readonly\n     * @type {Number}\n     */\n    get height() {\n        return this._parentSubView.intrinsicHeight;\n    }\n\n    /**\n     * Width that is calculated from the constraints and the `.intrinsicWidth` of\n     * the sub-views.\n     *\n     * When the width has been explicitely set using `setSize`, the fittingWidth\n     * will **always** be the same as the explicitely set width. To calculate the size\n     * based on the content, use:\n     * ```javascript\n     * var view = new AutoLayout.View({\n     *   constraints: VisualFormat.parse('|-[view1]-[view2]-'),\n     *   spacing: 20\n     * });\n     * view.subViews.view1.intrinsicWidth = 100;\n     * view.subViews.view2.intrinsicWidth = 100;\n     * console.log('fittingWidth: ' + view.fittingWidth); // 260\n     * ```\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get fittingWidth() {\n        return this._parentSubView.width;\n    }\n\n    /**\n     * Height that is calculated from the constraints and the `.intrinsicHeight` of\n     * the sub-views.\n     *\n     * See `.fittingWidth`.\n     *\n     * @readonly\n     * @type {Number}\n     */\n    get fittingHeight() {\n        return this._parentSubView.height;\n    }\n\n    /**\n     * Sets the spacing for the view.\n     *\n     * The spacing can be set for 7 different variables:\n     * `top`, `right`, `bottom`, `left`, `width`, `height` and `zIndex`. The `left`-spacing is\n     * used when a spacer is used between the parent-view and a sub-view (e.g. `|-[subView]`).\n     * The same is true for the `right`, `top` and `bottom` spacers. The `width` and `height` are\n     * used for spacers in between sub-views (e.g. `[view1]-[view2]`).\n     *\n     * Instead of using the full spacing syntax, it is also possible to use shorthand notations:\n     *\n     * |Syntax|Type|Description|\n     * |---|---|---|\n     * |`[top, right, bottom, left, width, height, zIndex]`|Array(7)|Full syntax including z-index **(clockwise order)**.|\n     * |`[top, right, bottom, left, width, height]`|Array(6)|Full horizontal & vertical spacing syntax (no z-index) **(clockwise order)**.|\n     * |`[horizontal, vertical, zIndex]`|Array(3)|Horizontal = left, right, width, vertical = top, bottom, height.|\n     * |`[horizontal, vertical]`|Array(2)|Horizontal = left, right, width, vertical = top, bottom, height, z-index = 1.|\n     * |`spacing`|Number|Horizontal & vertical spacing are all the same, z-index = 1.|\n     *\n     * Examples:\n     * ```javascript\n     * view.setSpacing(10); // horizontal & vertical spacing 10\n     * view.setSpacing([10, 15, 2]); // horizontal spacing 10, vertical spacing 15, z-axis spacing 2\n     * view.setSpacing([10, 20, 10, 20, 5, 5]); // top, right, bottom, left, horizontal, vertical\n     * view.setSpacing([10, 20, 10, 20, 5, 5, 1]); // top, right, bottom, left, horizontal, vertical, z\n     * ```\n     *\n     * @param {Number|Array} spacing\n     * @return {View} this\n     */\n    setSpacing(spacing) {\n        // convert spacing into array: [top, right, bottom, left, horz, vert, z-index]\n        switch (Array.isArray(spacing) ? spacing.length : -1) {\n            case -1: spacing = [spacing, spacing, spacing, spacing, spacing, spacing, 1]; break;\n            case 1: spacing = [spacing[0], spacing[0], spacing[0], spacing[0], spacing[0], spacing[0], 1]; break;\n            case 2: spacing = [spacing[1], spacing[0], spacing[1], spacing[0], spacing[0], spacing[1], 1]; break;\n            case 3: spacing = [spacing[1], spacing[0], spacing[1], spacing[0], spacing[0], spacing[1], spacing[2]]; break;\n            case 6: spacing = [spacing[0], spacing[1], spacing[2], spacing[3], spacing[4], spacing[5], 1]; break;\n            case 7: break;\n            default: throw 'Invalid spacing syntax';\n        }\n        if (!_compareSpacing(this._spacing, spacing)) {\n            this._spacing = spacing;\n            // update spacing variables\n            if (this._spacingVars) {\n                for (var i = 0; i < this._spacingVars.length; i++) {\n                    if (this._spacingVars[i]) {\n                        this._solver.suggestValue(this._spacingVars[i], this._spacing[i]);\n                    }\n                }\n                if (process.env.CASSOWARYJS) {\n                    this._solver.resolve();\n                }\n                else {\n                    this._solver.updateVariables();\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds a constraint definition.\n     *\n     * A constraint definition has the following format:\n     *\n     * ```javascript\n     * constraint: {\n     *   view1: {String},\n     *   attr1: {AutoLayout.Attribute},\n     *   relation: {AutoLayout.Relation},\n     *   view2: {String},\n     *   attr2: {AutoLayout.Attribute},\n     *   multiplier: {Number},\n     *   constant: {Number},\n     *   priority: {Number}(0..1000)\n     * }\n     * ```\n     * @param {Object} constraint Constraint definition.\n     * @return {View} this\n     */\n    addConstraint(constraint) {\n        _addConstraint.call(this, constraint);\n        if (!process.env.CASSOWARYJS) {\n            this._solver.updateVariables();\n        }\n        return this;\n    }\n\n    /**\n     * Adds one or more constraint definitions.\n     *\n     * A constraint definition has the following format:\n     *\n     * ```javascript\n     * constraint: {\n     *   view1: {String},\n     *   attr1: {AutoLayout.Attribute},\n     *   relation: {AutoLayout.Relation},\n     *   view2: {String},\n     *   attr2: {AutoLayout.Attribute},\n     *   multiplier: {Number},\n     *   constant: {Number},\n     *   priority: {Number}(0..1000)\n     * }\n     * ```\n     * @param {Array} constraints One or more constraint definitions.\n     * @return {View} this\n     */\n    addConstraints(constraints) {\n        for (var j = 0; j < constraints.length; j++) {\n            _addConstraint.call(this, constraints[j]);\n        }\n        if (!process.env.CASSOWARYJS) {\n            this._solver.updateVariables();\n        }\n        return this;\n    }\n\n    /**\n     * Dictionary of `SubView` objects that have been created when adding constraints.\n     * @readonly\n     * @type {Object.SubView}\n     */\n    get subViews() {\n        return this._subViews;\n    }\n\n    /**\n     * Checks whether the constraints incompletely specify the location\n     * of the subViews.\n     * @private\n     */\n    //get hasAmbiguousLayout() {\n        // Todo\n    //}\n}\n\nexport default View;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/View.js\n **/","(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (root['kiwi'] = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['kiwi'] = factory();\n  }\n}(this, function () {\n\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nvar tsu;\n(function (tsu) {\n\n    /**\n    * An iterator for an array of items.\n    */\n    var ArrayIterator = (function () {\n        /*\n        * Construct a new ArrayIterator.\n        *\n        * @param array The array of items to iterate.\n        * @param [index] The index at which to start iteration.\n        */\n        function ArrayIterator(array, index) {\n            if (typeof index === \"undefined\") { index = 0; }\n            this._array = array;\n            this._index = Math.max(0, Math.min(index, array.length));\n        }\n        /**\n        * Returns the next item from the iterator or undefined.\n        */\n        ArrayIterator.prototype.__next__ = function () {\n            return this._array[this._index++];\n        };\n\n        /**\n        * Returns this same iterator.\n        */\n        ArrayIterator.prototype.__iter__ = function () {\n            return this;\n        };\n        return ArrayIterator;\n    })();\n    tsu.ArrayIterator = ArrayIterator;\n\n    /**\n    * A reverse iterator for an array of items.\n    */\n    var ReverseArrayIterator = (function () {\n        /**\n        * Construct a new ReverseArrayIterator.\n        *\n        * @param array The array of items to iterate.\n        * @param [index] The index at which to start iteration.\n        */\n        function ReverseArrayIterator(array, index) {\n            if (typeof index === \"undefined\") { index = array.length; }\n            this._array = array;\n            this._index = Math.max(0, Math.min(index, array.length));\n        }\n        /**\n        * Returns the next item from the iterator or undefined.\n        */\n        ReverseArrayIterator.prototype.__next__ = function () {\n            return this._array[--this._index];\n        };\n\n        /**\n        * Returns this same iterator.\n        */\n        ReverseArrayIterator.prototype.__iter__ = function () {\n            return this;\n        };\n        return ReverseArrayIterator;\n    })();\n    tsu.ReverseArrayIterator = ReverseArrayIterator;\n\n    \n\n    function iter(object) {\n        if (object instanceof Array) {\n            return new ArrayIterator(object);\n        }\n        return object.__iter__();\n    }\n    tsu.iter = iter;\n\n    \n\n    function reversed(object) {\n        if (object instanceof Array) {\n            return new ReverseArrayIterator(object);\n        }\n        return object.__reversed__();\n    }\n    tsu.reversed = reversed;\n\n    /**\n    * Returns the next value from an iterator, or undefined.\n    */\n    function next(iterator) {\n        return iterator.__next__();\n    }\n    tsu.next = next;\n\n\n    function forEach(object, callback) {\n        if (object instanceof Array) {\n            for (var i = 0, n = object.length; i < n; ++i) {\n                if (callback(object[i]) === false) {\n                    return;\n                }\n            }\n        } else {\n            var value;\n            var it = object.__iter__();\n            while ((value = it.__next__()) !== undefined) {\n                if (callback(value) === false) {\n                    return;\n                }\n            }\n        }\n    }\n    tsu.forEach = forEach;\n\n})(tsu || (tsu = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nvar tsu;\n(function (tsu) {\n    \n\n    /**\n    * A class which defines a generic pair object.\n    */\n    var Pair = (function () {\n        /**\n        * Construct a new Pair object.\n        *\n        * @param first The first item of the pair.\n        * @param second The second item of the pair.\n        */\n        function Pair(first, second) {\n            this.first = first;\n            this.second = second;\n        }\n        /**\n        * Create a copy of the pair.\n        */\n        Pair.prototype.copy = function () {\n            return new Pair(this.first, this.second);\n        };\n        return Pair;\n    })();\n    tsu.Pair = Pair;\n})(tsu || (tsu = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"iterator.ts\"/>\n/// <reference path=\"utility.ts\"/>\nvar tsu;\n(function (tsu) {\n    /**\n    * Perform a lower bound search on a sorted array.\n    *\n    * @param array The array of sorted items to search.\n    * @param value The value to located in the array.\n    * @param compare The value comparison function.\n    * @returns The index of the first element in the array which\n    *          compares greater than or equal to the given value.\n    */\n    function lowerBound(array, value, compare) {\n        var begin = 0;\n        var n = array.length;\n        var half;\n        var middle;\n        while (n > 0) {\n            half = n >> 1;\n            middle = begin + half;\n            if (compare(array[middle], value) < 0) {\n                begin = middle + 1;\n                n -= half + 1;\n            } else {\n                n = half;\n            }\n        }\n        return begin;\n    }\n    tsu.lowerBound = lowerBound;\n\n    /**\n    * Perform a binary search on a sorted array.\n    *\n    * @param array The array of sorted items to search.\n    * @param value The value to located in the array.\n    * @param compare The value comparison function.\n    * @returns The index of the found item, or -1.\n    */\n    function binarySearch(array, value, compare) {\n        var index = lowerBound(array, value, compare);\n        if (index === array.length) {\n            return -1;\n        }\n        var item = array[index];\n        if (compare(item, value) !== 0) {\n            return -1;\n        }\n        return index;\n    }\n    tsu.binarySearch = binarySearch;\n\n    /**\n    * Perform a binary find on a sorted array.\n    *\n    * @param array The array of sorted items to search.\n    * @param value The value to located in the array.\n    * @param compare The value comparison function.\n    * @returns The found item in the array, or undefined.\n    */\n    function binaryFind(array, value, compare) {\n        var index = lowerBound(array, value, compare);\n        if (index === array.length) {\n            return undefined;\n        }\n        var item = array[index];\n        if (compare(item, value) !== 0) {\n            return undefined;\n        }\n        return item;\n    }\n    tsu.binaryFind = binaryFind;\n\n})(tsu || (tsu = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"iterator.ts\"/>\nvar tsu;\n(function (tsu) {\n    /**\n    * A base class for implementing array-based data structures.\n    *\n    * @class\n    */\n    var ArrayBase = (function () {\n        function ArrayBase() {\n            /*\n            * The internal data array.\n            *\n            * @protected\n            */\n            this._array = [];\n        }\n        /**\n        * Returns the number of items in the array.\n        */\n        ArrayBase.prototype.size = function () {\n            return this._array.length;\n        };\n\n        /**\n        * Returns true if the array is empty.\n        */\n        ArrayBase.prototype.empty = function () {\n            return this._array.length === 0;\n        };\n\n        /**\n        * Returns the item at the given array index.\n        *\n        * @param index The integer index of the desired item.\n        */\n        ArrayBase.prototype.itemAt = function (index) {\n            return this._array[index];\n        };\n\n        /**\n        * Removes and returns the item at the given index.\n        *\n        * @param index The integer index of the desired item.\n        */\n        ArrayBase.prototype.takeAt = function (index) {\n            return this._array.splice(index, 1)[0];\n        };\n\n        /**\n        * Clear the internal contents of array.\n        */\n        ArrayBase.prototype.clear = function () {\n            this._array = [];\n        };\n\n        /**\n        * Swap this array's contents with another array.\n        *\n        * @param other The array base to use for the swap.\n        */\n        ArrayBase.prototype.swap = function (other) {\n            var array = this._array;\n            this._array = other._array;\n            other._array = array;\n        };\n\n        /**\n        * Returns an iterator over the array of items.\n        */\n        ArrayBase.prototype.__iter__ = function () {\n            return tsu.iter(this._array);\n        };\n\n        /**\n        * Returns a reverse iterator over the array of items.\n        */\n        ArrayBase.prototype.__reversed__ = function () {\n            return tsu.reversed(this._array);\n        };\n        return ArrayBase;\n    })();\n    tsu.ArrayBase = ArrayBase;\n})(tsu || (tsu = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\n/// <reference path=\"algorithm.ts\"/>\n/// <reference path=\"array_base.ts\"/>\n/// <reference path=\"iterator.ts\"/>\n/// <reference path=\"utility.ts\"/>\nvar tsu;\n(function (tsu) {\n    /**\n    * A mapping container build on a sorted array.\n    *\n    * @class\n    */\n    var AssociativeArray = (function (_super) {\n        __extends(AssociativeArray, _super);\n        /**\n        * Construct a new AssociativeArray.\n        *\n        * @param compare The key comparison function.\n        */\n        function AssociativeArray(compare) {\n            _super.call(this);\n            this._compare = compare;\n            this._wrapped = wrapCompare(compare);\n        }\n        /**\n        * Returns the key comparison function used by this array.\n        */\n        AssociativeArray.prototype.comparitor = function () {\n            return this._compare;\n        };\n\n        /**\n        * Return the array index of the given key, or -1.\n        *\n        * @param key The key to locate in the array.\n        */\n        AssociativeArray.prototype.indexOf = function (key) {\n            return tsu.binarySearch(this._array, key, this._wrapped);\n        };\n\n        /**\n        * Returns true if the key is in the array, false otherwise.\n        *\n        * @param key The key to locate in the array.\n        */\n        AssociativeArray.prototype.contains = function (key) {\n            return tsu.binarySearch(this._array, key, this._wrapped) >= 0;\n        };\n\n        /**\n        * Returns the pair associated with the given key, or undefined.\n        *\n        * @param key The key to locate in the array.\n        */\n        AssociativeArray.prototype.find = function (key) {\n            return tsu.binaryFind(this._array, key, this._wrapped);\n        };\n\n        /**\n        * Returns the pair associated with the key if it exists.\n        *\n        * If the key does not exist, a new pair will be created and\n        * inserted using the value created by the given factory.\n        *\n        * @param key The key to locate in the array.\n        * @param factory The function which creates the default value.\n        */\n        AssociativeArray.prototype.setDefault = function (key, factory) {\n            var array = this._array;\n            var index = tsu.lowerBound(array, key, this._wrapped);\n            if (index === array.length) {\n                var pair = new tsu.Pair(key, factory());\n                array.push(pair);\n                return pair;\n            }\n            var currPair = array[index];\n            if (this._compare(currPair.first, key) !== 0) {\n                var pair = new tsu.Pair(key, factory());\n                array.splice(index, 0, pair);\n                return pair;\n            }\n            return currPair;\n        };\n\n        /**\n        * Insert the pair into the array and return the pair.\n        *\n        * This will overwrite any existing entry in the array.\n        *\n        * @param key The key portion of the pair.\n        * @param value The value portion of the pair.\n        */\n        AssociativeArray.prototype.insert = function (key, value) {\n            var array = this._array;\n            var index = tsu.lowerBound(array, key, this._wrapped);\n            if (index === array.length) {\n                var pair = new tsu.Pair(key, value);\n                array.push(pair);\n                return pair;\n            }\n            var currPair = array[index];\n            if (this._compare(currPair.first, key) !== 0) {\n                var pair = new tsu.Pair(key, value);\n                array.splice(index, 0, pair);\n                return pair;\n            }\n            currPair.second = value;\n            return currPair;\n        };\n\n        AssociativeArray.prototype.update = function (object) {\n            var _this = this;\n            if (object instanceof AssociativeArray) {\n                var obj = object;\n                this._array = merge(this._array, obj._array, this._compare);\n            } else {\n                tsu.forEach(object, function (pair) {\n                    _this.insert(pair.first, pair.second);\n                });\n            }\n        };\n\n        /**\n        * Removes and returns the pair for the given key, or undefined.\n        *\n        * @param key The key to remove from the map.\n        */\n        AssociativeArray.prototype.erase = function (key) {\n            var array = this._array;\n            var index = tsu.binarySearch(array, key, this._wrapped);\n            if (index < 0) {\n                return undefined;\n            }\n            return array.splice(index, 1)[0];\n        };\n\n        /**\n        * Create a copy of this associative array.\n        */\n        AssociativeArray.prototype.copy = function () {\n            var theCopy = new AssociativeArray(this._compare);\n            var copyArray = theCopy._array;\n            var thisArray = this._array;\n            for (var i = 0, n = thisArray.length; i < n; ++i) {\n                copyArray.push(thisArray[i].copy());\n            }\n            return theCopy;\n        };\n        return AssociativeArray;\n    })(tsu.ArrayBase);\n    tsu.AssociativeArray = AssociativeArray;\n\n    /**\n    * An internal which wraps a comparison key function.\n    */\n    function wrapCompare(cmp) {\n        return function (pair, value) {\n            return cmp(pair.first, value);\n        };\n    }\n\n    /**\n    * An internal function which merges two ordered pair arrays.\n    */\n    function merge(first, second, compare) {\n        var i = 0, j = 0;\n        var len1 = first.length;\n        var len2 = second.length;\n        var merged = [];\n        while (i < len1 && j < len2) {\n            var a = first[i];\n            var b = second[j];\n            var v = compare(a.first, b.first);\n            if (v < 0) {\n                merged.push(a.copy());\n                ++i;\n            } else if (v > 0) {\n                merged.push(b.copy());\n                ++j;\n            } else {\n                merged.push(b.copy());\n                ++i;\n                ++j;\n            }\n        }\n        while (i < len1) {\n            merged.push(first[i].copy());\n            ++i;\n        }\n        while (j < len2) {\n            merged.push(second[j].copy());\n            ++j;\n        }\n        return merged;\n    }\n})(tsu || (tsu = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"algorithm.ts\"/>\n/// <reference path=\"array_base.ts\"/>\n/// <reference path=\"associative_array.ts\"/>\n/// <reference path=\"iterator.ts\"/>\n/// <reference path=\"unique_array.ts\"/>\n/// <reference path=\"utility.ts\"/>\n\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n// <reference path=\"expression.ts\">\n// <reference path=\"strength.ts\">\n/**\n * Kiwi is an efficient implementation of the Cassowary constraint solving\n * algorithm, based on the seminal Cassowary paper.\n * It is *not* a refactoring or port of the original C++ solver, but\n * has been designed from the ground up to be lightweight and fast.\n *\n * **Example**\n * ```javascript\n * var kiwi = require('kiwi');\n *\n * // Create a solver\n * var solver = new kiwi.Solver();\n *\n * // Create and add some editable variables\n * var left = new kiwi.Variable();\n * var width = new kiwi.Variable();\n * solver.addEditVariable(left, kiwi.Strength.strong);\n * solver.addEditVariable(width, kiwi.Strength.strong);\n *\n * // Create a variable calculated through a constraint\n * var centerX = new kiwi.Variable();\n * var expr = new kiwi.Expression([-1, centerX], left, [0.5, width]);\n * solver.addConstraint(new kiwi.Constraint(expr, kiwi.Operator.Eq, kiwi.Strength.required));\n *\n * // Suggest some values to the solver\n * solver.suggestValue(left, 0);\n * solver.suggestValue(width, 500);\n *\n * // Lets solve the problem!\n * solver.updateVariables();\n * assert(centerX.value(), 250);\n * ```\n *\n * ##API Documentation\n * @module kiwi\n */\nvar kiwi;\n(function (kiwi) {\n    /**\n     * An enum defining the linear constraint operators.\n     *\n     * |Value|Operator|Description|\n     * |----|-----|-----|\n     * |`Le`|<=|Less than equal|\n     * |`Ge`|>=|Greater than equal|\n     * |`Eq`|==|Equal|\n     *\n     * @enum {Number}\n     */\n    (function (Operator) {\n        Operator[Operator[\"Le\"] = 0] = \"Le\";\n        Operator[Operator[\"Ge\"] = 1] = \"Ge\";\n        Operator[Operator[\"Eq\"] = 2] = \"Eq\"; // ==\n    })(kiwi.Operator || (kiwi.Operator = {}));\n    var Operator = kiwi.Operator;\n    /**\n     * A linear constraint equation.\n     *\n     * A constraint equation is composed of an expression, an operator,\n     * and a strength. The RHS of the equation is implicitly zero.\n     *\n     * @class\n     * @param {Expression} expression The constraint expression (LHS).\n     * @param {Operator} operator The equation operator.\n     * @param {Expression} [rhs] Right hand side of the expression.\n     * @param {Number} [strength=Strength.required] The strength of the constraint.\n     */\n    var Constraint = (function () {\n        function Constraint(expression, operator, rhs, strength) {\n            if (strength === void 0) { strength = kiwi.Strength.required; }\n            this._id = CnId++;\n            this._operator = operator;\n            this._strength = kiwi.Strength.clip(strength);\n            if ((rhs === undefined) && (expression instanceof kiwi.Expression)) {\n                this._expression = expression;\n            }\n            else {\n                this._expression = expression.minus(rhs);\n            }\n        }\n        /**\n          * A static constraint comparison function.\n          * @private\n          */\n        Constraint.Compare = function (a, b) {\n            return a.id() - b.id();\n        };\n        /**\n         * Returns the unique id number of the constraint.\n         * @private\n         */\n        Constraint.prototype.id = function () {\n            return this._id;\n        };\n        /**\n         * Returns the expression of the constraint.\n         *\n         * @return {Expression} expression\n         */\n        Constraint.prototype.expression = function () {\n            return this._expression;\n        };\n        /**\n         * Returns the relational operator of the constraint.\n         *\n         * @return {Operator} linear constraint operator\n         */\n        Constraint.prototype.op = function () {\n            return this._operator;\n        };\n        /**\n         * Returns the strength of the constraint.\n         *\n         * @return {Number} strength\n         */\n        Constraint.prototype.strength = function () {\n            return this._strength;\n        };\n        return Constraint;\n    })();\n    kiwi.Constraint = Constraint;\n    /**\n     * The internal constraint id counter.\n     * @private\n     */\n    var CnId = 0;\n})(kiwi || (kiwi = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"../thirdparty/tsu.d.ts\"/>\nvar kiwi;\n(function (kiwi) {\n    function createMap(compare) {\n        return new tsu.AssociativeArray(compare);\n    }\n    kiwi.createMap = createMap;\n})(kiwi || (kiwi = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nvar kiwi;\n(function (kiwi) {\n    /**\n     * The primary user constraint variable.\n     *\n     * @class\n     * @param {String} [name=\"\"] The name to associated with the variable.\n     */\n    var Variable = (function () {\n        function Variable(name) {\n            if (name === void 0) { name = \"\"; }\n            this._value = 0.0;\n            this._context = null;\n            this._id = VarId++;\n            this._name = name;\n        }\n        /**\n         * A static variable comparison function.\n         * @private\n         */\n        Variable.Compare = function (a, b) {\n            return a.id() - b.id();\n        };\n        /**\n         * Returns the unique id number of the variable.\n         * @private\n         */\n        Variable.prototype.id = function () {\n            return this._id;\n        };\n        /**\n         * Returns the name of the variable.\n         *\n         * @return {String} name of the variable\n         */\n        Variable.prototype.name = function () {\n            return this._name;\n        };\n        /**\n         * Set the name of the variable.\n         *\n         * @param {String} name Name of the variable\n         */\n        Variable.prototype.setName = function (name) {\n            this._name = name;\n        };\n        /**\n         * Returns the user context object of the variable.\n         * @private\n         */\n        Variable.prototype.context = function () {\n            return this._context;\n        };\n        /**\n         * Set the user context object of the variable.\n         * @private\n         */\n        Variable.prototype.setContext = function (context) {\n            this._context = context;\n        };\n        /**\n         * Returns the value of the variable.\n         *\n         * @return {Number} Calculated value\n         */\n        Variable.prototype.value = function () {\n            return this._value;\n        };\n        /**\n         * Set the value of the variable.\n         * @private\n         */\n        Variable.prototype.setValue = function (value) {\n            this._value = value;\n        };\n        /**\n         * Creates a new Expression by adding a number, variable or expression\n         * to the variable.\n         *\n         * @param {Number|Variable|Expression} value Value to add.\n         * @return {Expression} expression\n         */\n        Variable.prototype.plus = function (value) {\n            return new kiwi.Expression(this, value);\n        };\n        /**\n         * Creates a new Expression by substracting a number, variable or expression\n         * from the variable.\n         *\n         * @param {Number|Variable|Expression} value Value to substract.\n         * @return {Expression} expression\n         */\n        Variable.prototype.minus = function (value) {\n            return new kiwi.Expression(this, typeof value === 'number' ? -value : [-1, value]);\n        };\n        /**\n         * Creates a new Expression by multiplying with a fixed number.\n         *\n         * @param {Number} coefficient Coefficient to multiply with.\n         * @return {Expression} expression\n         */\n        Variable.prototype.multiply = function (coefficient) {\n            return new kiwi.Expression([coefficient, this]);\n        };\n        /**\n         * Creates a new Expression by dividing with a fixed number.\n         *\n         * @param {Number} coefficient Coefficient to divide by.\n         * @return {Expression} expression\n         */\n        Variable.prototype.divide = function (coefficient) {\n            return new kiwi.Expression([1 / coefficient, this]);\n        };\n        /**\n         * Returns the JSON representation of the variable.\n         * @private\n         */\n        Variable.prototype.toJSON = function () {\n            return {\n                name: this._name,\n                value: this._value\n            };\n        };\n        return Variable;\n    })();\n    kiwi.Variable = Variable;\n    /**\n     * The internal variable id counter.\n     * @private\n     */\n    var VarId = 0;\n})(kiwi || (kiwi = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"../thirdparty/tsu.d.ts\"/>\n/// <reference path=\"maptype.ts\"/>\n/// <reference path=\"variable.ts\"/>\nvar kiwi;\n(function (kiwi) {\n    /**\n     * An expression of variable terms and a constant.\n     *\n     * The constructor accepts an arbitrary number of parameters,\n     * each of which must be one of the following types:\n     *  - number\n     *  - Variable\n     *  - Expression\n     *  - 2-tuple of [number, Variable|Expression]\n     *\n     * The parameters are summed. The tuples are multiplied.\n     *\n     * @class\n     * @param {...(number|Variable|Expression|Array)} args\n     */\n    var Expression = (function () {\n        function Expression() {\n            var parsed = parseArgs(arguments);\n            this._terms = parsed.terms;\n            this._constant = parsed.constant;\n        }\n        /**\n         * Returns the mapping of terms in the expression.\n         *\n         * This *must* be treated as const.\n         * @private\n         */\n        Expression.prototype.terms = function () {\n            return this._terms;\n        };\n        /**\n         * Returns the constant of the expression.\n         * @private\n         */\n        Expression.prototype.constant = function () {\n            return this._constant;\n        };\n        /**\n         * Returns the computed value of the expression.\n         *\n         * @private\n         * @return {Number} computed value of the expression\n         */\n        Expression.prototype.value = function () {\n            var result = this._constant;\n            for (var i = 0, n = this._terms.size(); i < n; i++) {\n                var pair = this._terms.itemAt(i);\n                result += pair.first.value() * pair.second;\n            }\n            return result;\n        };\n        /**\n         * Creates a new Expression by adding a number, variable or expression\n         * to the expression.\n         *\n         * @param {Number|Variable|Expression} value Value to add.\n         * @return {Expression} expression\n         */\n        Expression.prototype.plus = function (value) {\n            return new Expression(this, value);\n        };\n        /**\n         * Creates a new Expression by substracting a number, variable or expression\n         * from the expression.\n         *\n         * @param {Number|Variable|Expression} value Value to substract.\n         * @return {Expression} expression\n         */\n        Expression.prototype.minus = function (value) {\n            return new Expression(this, typeof value === 'number' ? -value : [-1, value]);\n        };\n        /**\n         * Creates a new Expression by multiplying with a fixed number.\n         *\n         * @param {Number} coefficient Coefficient to multiply with.\n         * @return {Expression} expression\n         */\n        Expression.prototype.multiply = function (coefficient) {\n            return new Expression([coefficient, this]);\n        };\n        /**\n         * Creates a new Expression by dividing with a fixed number.\n         *\n         * @param {Number} coefficient Coefficient to divide by.\n         * @return {Expression} expression\n         */\n        Expression.prototype.divide = function (coefficient) {\n            return new Expression([1 / coefficient, this]);\n        };\n        return Expression;\n    })();\n    kiwi.Expression = Expression;\n    /**\n     * An internal argument parsing function.\n     * @private\n     */\n    function parseArgs(args) {\n        var constant = 0.0;\n        var factory = function () { return 0.0; };\n        var terms = kiwi.createMap(kiwi.Variable.Compare);\n        for (var i = 0, n = args.length; i < n; ++i) {\n            var item = args[i];\n            if (typeof item === \"number\") {\n                constant += item;\n            }\n            else if (item instanceof kiwi.Variable) {\n                terms.setDefault(item, factory).second += 1.0;\n            }\n            else if (item instanceof Expression) {\n                constant += item.constant();\n                var terms2 = item.terms();\n                for (var j = 0, k = terms2.size(); j < k; j++) {\n                    var termPair = terms2.itemAt(j);\n                    terms.setDefault(termPair.first, factory).second += termPair.second;\n                }\n            }\n            else if (item instanceof Array) {\n                if (item.length !== 2) {\n                    throw new Error(\"array must have length 2\");\n                }\n                var value = item[0];\n                var value2 = item[1];\n                if (typeof value !== \"number\") {\n                    throw new Error(\"array item 0 must be a number\");\n                }\n                if (value2 instanceof kiwi.Variable) {\n                    terms.setDefault(value2, factory).second += value;\n                }\n                else if (value2 instanceof Expression) {\n                    constant += (value2.constant() * value);\n                    var terms2 = value2.terms();\n                    for (var j = 0, k = terms2.size(); j < k; j++) {\n                        var termPair = terms2.itemAt(j);\n                        terms.setDefault(termPair.first, factory).second += (termPair.second * value);\n                    }\n                }\n                else {\n                    throw new Error(\"array item 1 must be a variable or expression\");\n                }\n            }\n            else {\n                throw new Error(\"invalid Expression argument: \" + item);\n            }\n        }\n        return { terms: terms, constant: constant };\n    }\n})(kiwi || (kiwi = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nvar kiwi;\n(function (kiwi) {\n    /**\n     * @class Strength\n     */\n    var Strength;\n    (function (Strength) {\n        /**\n         * Create a new symbolic strength.\n         *\n         * @param {Number} a strong\n         * @param {Number} b medium\n         * @param {Number} c weak\n         * @param {Number} [w] weight\n         * @return {Number} strength\n         */\n        function create(a, b, c, w) {\n            if (w === void 0) { w = 1.0; }\n            var result = 0.0;\n            result += Math.max(0.0, Math.min(1000.0, a * w)) * 1000000.0;\n            result += Math.max(0.0, Math.min(1000.0, b * w)) * 1000.0;\n            result += Math.max(0.0, Math.min(1000.0, c * w));\n            return result;\n        }\n        Strength.create = create;\n        /**\n         * The 'required' symbolic strength.\n         */\n        Strength.required = create(1000.0, 1000.0, 1000.0);\n        /**\n         * The 'strong' symbolic strength.\n         */\n        Strength.strong = create(1.0, 0.0, 0.0);\n        /**\n         * The 'medium' symbolic strength.\n         */\n        Strength.medium = create(0.0, 1.0, 0.0);\n        /**\n         * The 'weak' symbolic strength.\n         */\n        Strength.weak = create(0.0, 0.0, 1.0);\n        /**\n         * Clip a symbolic strength to the allowed min and max.\n         * @private\n         */\n        function clip(value) {\n            return Math.max(0.0, Math.min(Strength.required, value));\n        }\n        Strength.clip = clip;\n    })(Strength = kiwi.Strength || (kiwi.Strength = {}));\n})(kiwi || (kiwi = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"../thirdparty/tsu.d.ts\"/>\n/// <reference path=\"constraint.ts\"/>\n/// <reference path=\"expression.ts\"/>\n/// <reference path=\"maptype.ts\"/>\n/// <reference path=\"strength.ts\"/>\n/// <reference path=\"variable.ts\"/>\nvar kiwi;\n(function (kiwi) {\n    /**\n     * The constraint solver class.\n     *\n     * @class\n     */\n    var Solver = (function () {\n        /**\n         * Construct a new Solver.\n         */\n        function Solver() {\n            this._cnMap = createCnMap();\n            this._rowMap = createRowMap();\n            this._varMap = createVarMap();\n            this._editMap = createEditMap();\n            this._infeasibleRows = [];\n            this._objective = new Row();\n            this._artificial = null;\n            this._idTick = 0;\n        }\n        /**\n         * Creates and add a constraint to the solver.\n         *\n         * @param {Expression|Variable} lhs Left hand side of the expression\n         * @param {Operator} operator Operator\n         * @param {Expression|Variable|Number} rhs Right hand side of the expression\n         * @param {Number} [strength=Strength.required] Strength\n         */\n        Solver.prototype.createConstraint = function (lhs, operator, rhs, strength) {\n            if (strength === void 0) { strength = kiwi.Strength.required; }\n            var cn = new kiwi.Constraint(lhs, operator, rhs, strength);\n            this.addConstraint(cn);\n            return cn;\n        };\n        /**\n         * Add a constraint to the solver.\n         *\n         * @param {Constraint} constraint Constraint to add to the solver\n         */\n        Solver.prototype.addConstraint = function (constraint) {\n            var cnPair = this._cnMap.find(constraint);\n            if (cnPair !== undefined) {\n                throw new Error(\"duplicate constraint\");\n            }\n            // Creating a row causes symbols to be reserved for the variables\n            // in the constraint. If this method exits with an exception,\n            // then its possible those variables will linger in the var map.\n            // Since its likely that those variables will be used in other\n            // constraints and since exceptional conditions are uncommon,\n            // i'm not too worried about aggressive cleanup of the var map.\n            var data = this._createRow(constraint);\n            var row = data.row;\n            var tag = data.tag;\n            var subject = this._chooseSubject(row, tag);\n            // If chooseSubject couldnt find a valid entering symbol, one\n            // last option is available if the entire row is composed of\n            // dummy variables. If the constant of the row is zero, then\n            // this represents redundant constraints and the new dummy\n            // marker can enter the basis. If the constant is non-zero,\n            // then it represents an unsatisfiable constraint.\n            if (subject.type() === 0 /* Invalid */ && row.allDummies()) {\n                if (!nearZero(row.constant())) {\n                    throw new Error(\"unsatisfiable constraint\");\n                }\n                else {\n                    subject = tag.marker;\n                }\n            }\n            // If an entering symbol still isn't found, then the row must\n            // be added using an artificial variable. If that fails, then\n            // the row represents an unsatisfiable constraint.\n            if (subject.type() === 0 /* Invalid */) {\n                if (!this._addWithArtificialVariable(row)) {\n                    throw new Error(\"unsatisfiable constraint\");\n                }\n            }\n            else {\n                row.solveFor(subject);\n                this._substitute(subject, row);\n                this._rowMap.insert(subject, row);\n            }\n            this._cnMap.insert(constraint, tag);\n            // Optimizing after each constraint is added performs less\n            // aggregate work due to a smaller average system size. It\n            // also ensures the solver remains in a consistent state.\n            this._optimize(this._objective);\n        };\n        /**\n         * Remove a constraint from the solver.\n         *\n         * @param {Constraint} constraint Constraint to remove from the solver\n         */\n        Solver.prototype.removeConstraint = function (constraint) {\n            var cnPair = this._cnMap.erase(constraint);\n            if (cnPair === undefined) {\n                throw new Error(\"unknown constraint\");\n            }\n            // Remove the error effects from the objective function\n            // *before* pivoting, or substitutions into the objective\n            // will lead to incorrect solver results.\n            this._removeConstraintEffects(constraint, cnPair.second);\n            // If the marker is basic, simply drop the row. Otherwise,\n            // pivot the marker into the basis and then drop the row.\n            var marker = cnPair.second.marker;\n            var rowPair = this._rowMap.erase(marker);\n            if (rowPair === undefined) {\n                var leaving = this._getMarkerLeavingSymbol(marker);\n                if (leaving.type() === 0 /* Invalid */) {\n                    throw new Error(\"failed to find leaving row\");\n                }\n                rowPair = this._rowMap.erase(leaving);\n                rowPair.second.solveForEx(leaving, marker);\n                this._substitute(marker, rowPair.second);\n            }\n            // Optimizing after each constraint is removed ensures that the\n            // solver remains consistent. It makes the solver api easier to\n            // use at a small tradeoff for speed.\n            this._optimize(this._objective);\n        };\n        /**\n         * Test whether the solver contains the constraint.\n         *\n         * @param {Constraint} constraint Constraint to test for\n         * @return {Bool} true or false\n         */\n        Solver.prototype.hasConstraint = function (constraint) {\n            return this._cnMap.contains(constraint);\n        };\n        /**\n         * Add an edit variable to the solver.\n         *\n         * @param {Variable} variable Edit variable to add to the solver\n         * @param {Number} strength Strength, should be less than `Strength.required`\n         */\n        Solver.prototype.addEditVariable = function (variable, strength) {\n            var editPair = this._editMap.find(variable);\n            if (editPair !== undefined) {\n                throw new Error(\"duplicate edit variable\");\n            }\n            strength = kiwi.Strength.clip(strength);\n            if (strength === kiwi.Strength.required) {\n                throw new Error(\"bad required strength\");\n            }\n            var expr = new kiwi.Expression(variable);\n            var cn = new kiwi.Constraint(expr, 2 /* Eq */, undefined, strength);\n            this.addConstraint(cn);\n            var tag = this._cnMap.find(cn).second;\n            var info = { tag: tag, constraint: cn, constant: 0.0 };\n            this._editMap.insert(variable, info);\n        };\n        /**\n         * Remove an edit variable from the solver.\n         *\n         * @param {Variable} variable Edit variable to remove from the solver\n         */\n        Solver.prototype.removeEditVariable = function (variable) {\n            var editPair = this._editMap.erase(variable);\n            if (editPair === undefined) {\n                throw new Error(\"unknown edit variable\");\n            }\n            this.removeConstraint(editPair.second.constraint);\n        };\n        /**\n         * Test whether the solver contains the edit variable.\n         *\n         * @param {Variable} variable Edit variable to test for\n         * @return {Bool} true or false\n         */\n        Solver.prototype.hasEditVariable = function (variable) {\n            return this._editMap.contains(variable);\n        };\n        /**\n         * Suggest the value of an edit variable.\n         *\n         * @param {Variable} variable Edit variable to suggest a value for\n         * @param {Number} value Suggested value\n         */\n        Solver.prototype.suggestValue = function (variable, value) {\n            var editPair = this._editMap.find(variable);\n            if (editPair === undefined) {\n                throw new Error(\"unknown edit variable\");\n            }\n            var rows = this._rowMap;\n            var info = editPair.second;\n            var delta = value - info.constant;\n            info.constant = value;\n            // Check first if the positive error variable is basic.\n            var marker = info.tag.marker;\n            var rowPair = rows.find(marker);\n            if (rowPair !== undefined) {\n                if (rowPair.second.add(-delta) < 0.0) {\n                    this._infeasibleRows.push(marker);\n                }\n                this._dualOptimize();\n                return;\n            }\n            // Check next if the negative error variable is basic.\n            var other = info.tag.other;\n            var rowPair = rows.find(other);\n            if (rowPair !== undefined) {\n                if (rowPair.second.add(delta) < 0.0) {\n                    this._infeasibleRows.push(other);\n                }\n                this._dualOptimize();\n                return;\n            }\n            for (var i = 0, n = rows.size(); i < n; ++i) {\n                var rowPair = rows.itemAt(i);\n                var row = rowPair.second;\n                var coeff = row.coefficientFor(marker);\n                if (coeff !== 0.0 && row.add(delta * coeff) < 0.0 && rowPair.first.type() !== 1 /* External */) {\n                    this._infeasibleRows.push(rowPair.first);\n                }\n            }\n            this._dualOptimize();\n        };\n        /**\n         * Update the values of the variables.\n         */\n        Solver.prototype.updateVariables = function () {\n            var vars = this._varMap;\n            var rows = this._rowMap;\n            for (var i = 0, n = vars.size(); i < n; ++i) {\n                var pair = vars.itemAt(i);\n                var rowPair = rows.find(pair.second);\n                if (rowPair !== undefined) {\n                    pair.first.setValue(rowPair.second.constant());\n                }\n                else {\n                    pair.first.setValue(0.0);\n                }\n            }\n        };\n        /**\n         * Get the symbol for the given variable.\n         *\n         * If a symbol does not exist for the variable, one will be created.\n         * @private\n         */\n        Solver.prototype._getVarSymbol = function (variable) {\n            var _this = this;\n            var factory = function () { return _this._makeSymbol(1 /* External */); };\n            return this._varMap.setDefault(variable, factory).second;\n        };\n        /**\n         * Create a new Row object for the given constraint.\n         *\n         * The terms in the constraint will be converted to cells in the row.\n         * Any term in the constraint with a coefficient of zero is ignored.\n         * This method uses the `_getVarSymbol` method to get the symbol for\n         * the variables added to the row. If the symbol for a given cell\n         * variable is basic, the cell variable will be substituted with the\n         * basic row.\n         *\n         * The necessary slack and error variables will be added to the row.\n         * If the constant for the row is negative, the sign for the row\n         * will be inverted so the constant becomes positive.\n         *\n         * Returns the created Row and the tag for tracking the constraint.\n         * @private\n         */\n        Solver.prototype._createRow = function (constraint) {\n            var expr = constraint.expression();\n            var row = new Row(expr.constant());\n            // Substitute the current basic variables into the row.\n            var terms = expr.terms();\n            for (var i = 0, n = terms.size(); i < n; ++i) {\n                var termPair = terms.itemAt(i);\n                if (!nearZero(termPair.second)) {\n                    var symbol = this._getVarSymbol(termPair.first);\n                    var basicPair = this._rowMap.find(symbol);\n                    if (basicPair !== undefined) {\n                        row.insertRow(basicPair.second, termPair.second);\n                    }\n                    else {\n                        row.insertSymbol(symbol, termPair.second);\n                    }\n                }\n            }\n            // Add the necessary slack, error, and dummy variables.\n            var objective = this._objective;\n            var strength = constraint.strength();\n            var tag = { marker: INVALID_SYMBOL, other: INVALID_SYMBOL };\n            switch (constraint.op()) {\n                case 0 /* Le */:\n                case 1 /* Ge */:\n                    {\n                        var coeff = constraint.op() === 0 /* Le */ ? 1.0 : -1.0;\n                        var slack = this._makeSymbol(2 /* Slack */);\n                        tag.marker = slack;\n                        row.insertSymbol(slack, coeff);\n                        if (strength < kiwi.Strength.required) {\n                            var error = this._makeSymbol(3 /* Error */);\n                            tag.other = error;\n                            row.insertSymbol(error, -coeff);\n                            objective.insertSymbol(error, strength);\n                        }\n                        break;\n                    }\n                case 2 /* Eq */:\n                    {\n                        if (strength < kiwi.Strength.required) {\n                            var errplus = this._makeSymbol(3 /* Error */);\n                            var errminus = this._makeSymbol(3 /* Error */);\n                            tag.marker = errplus;\n                            tag.other = errminus;\n                            row.insertSymbol(errplus, -1.0); // v = eplus - eminus\n                            row.insertSymbol(errminus, 1.0); // v - eplus + eminus = 0\n                            objective.insertSymbol(errplus, strength);\n                            objective.insertSymbol(errminus, strength);\n                        }\n                        else {\n                            var dummy = this._makeSymbol(4 /* Dummy */);\n                            tag.marker = dummy;\n                            row.insertSymbol(dummy);\n                        }\n                        break;\n                    }\n            }\n            // Ensure the row has a positive constant.\n            if (row.constant() < 0.0) {\n                row.reverseSign();\n            }\n            return { row: row, tag: tag };\n        };\n        /**\n         * Choose the subject for solving for the row.\n         *\n         * This method will choose the best subject for using as the solve\n         * target for the row. An invalid symbol will be returned if there\n         * is no valid target.\n         *\n         * The symbols are chosen according to the following precedence:\n         *\n         * 1) The first symbol representing an external variable.\n         * 2) A negative slack or error tag variable.\n         *\n         * If a subject cannot be found, an invalid symbol will be returned.\n         *\n         * @private\n         */\n        Solver.prototype._chooseSubject = function (row, tag) {\n            var cells = row.cells();\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                if (pair.first.type() === 1 /* External */) {\n                    return pair.first;\n                }\n            }\n            var type = tag.marker.type();\n            if (type === 2 /* Slack */ || type === 3 /* Error */) {\n                if (row.coefficientFor(tag.marker) < 0.0) {\n                    return tag.marker;\n                }\n            }\n            type = tag.other.type();\n            if (type === 2 /* Slack */ || type === 3 /* Error */) {\n                if (row.coefficientFor(tag.other) < 0.0) {\n                    return tag.other;\n                }\n            }\n            return INVALID_SYMBOL;\n        };\n        /**\n         * Add the row to the tableau using an artificial variable.\n         *\n         * This will return false if the constraint cannot be satisfied.\n         *\n         * @private\n         */\n        Solver.prototype._addWithArtificialVariable = function (row) {\n            // Create and add the artificial variable to the tableau.\n            var art = this._makeSymbol(2 /* Slack */);\n            this._rowMap.insert(art, row.copy());\n            this._artificial = row.copy();\n            // Optimize the artificial objective. This is successful\n            // only if the artificial objective is optimized to zero.\n            this._optimize(this._artificial);\n            var success = nearZero(this._artificial.constant());\n            this._artificial = null;\n            // If the artificial variable is basic, pivot the row so that\n            // it becomes non-basic. If the row is constant, exit early.\n            var pair = this._rowMap.erase(art);\n            if (pair !== undefined) {\n                var basicRow = pair.second;\n                if (basicRow.isConstant()) {\n                    return success;\n                }\n                var entering = this._anyPivotableSymbol(basicRow);\n                if (entering.type() === 0 /* Invalid */) {\n                    return false; // unsatisfiable (will this ever happen?)\n                }\n                basicRow.solveForEx(art, entering);\n                this._substitute(entering, basicRow);\n                this._rowMap.insert(entering, basicRow);\n            }\n            // Remove the artificial variable from the tableau.\n            var rows = this._rowMap;\n            for (var i = 0, n = rows.size(); i < n; ++i) {\n                rows.itemAt(i).second.removeSymbol(art);\n            }\n            this._objective.removeSymbol(art);\n            return success;\n        };\n        /**\n         * Substitute the parametric symbol with the given row.\n         *\n         * This method will substitute all instances of the parametric symbol\n         * in the tableau and the objective function with the given row.\n         *\n         * @private\n         */\n        Solver.prototype._substitute = function (symbol, row) {\n            var rows = this._rowMap;\n            for (var i = 0, n = rows.size(); i < n; ++i) {\n                var pair = rows.itemAt(i);\n                pair.second.substitute(symbol, row);\n                if (pair.second.constant() < 0.0 && pair.first.type() !== 1 /* External */) {\n                    this._infeasibleRows.push(pair.first);\n                }\n            }\n            this._objective.substitute(symbol, row);\n            if (this._artificial) {\n                this._artificial.substitute(symbol, row);\n            }\n        };\n        /**\n         * Optimize the system for the given objective function.\n         *\n         * This method performs iterations of Phase 2 of the simplex method\n         * until the objective function reaches a minimum.\n         *\n         * @private\n         */\n        Solver.prototype._optimize = function (objective) {\n            while (true) {\n                var entering = this._getEnteringSymbol(objective);\n                if (entering.type() === 0 /* Invalid */) {\n                    return;\n                }\n                var leaving = this._getLeavingSymbol(entering);\n                if (leaving.type() === 0 /* Invalid */) {\n                    throw new Error(\"the objective is unbounded\");\n                }\n                // pivot the entering symbol into the basis\n                var row = this._rowMap.erase(leaving).second;\n                row.solveForEx(leaving, entering);\n                this._substitute(entering, row);\n                this._rowMap.insert(entering, row);\n            }\n        };\n        /**\n         * Optimize the system using the dual of the simplex method.\n         *\n         * The current state of the system should be such that the objective\n         * function is optimal, but not feasible. This method will perform\n         * an iteration of the dual simplex method to make the solution both\n         * optimal and feasible.\n         *\n         * @private\n         */\n        Solver.prototype._dualOptimize = function () {\n            var rows = this._rowMap;\n            var infeasible = this._infeasibleRows;\n            while (infeasible.length !== 0) {\n                var leaving = infeasible.pop();\n                var pair = rows.find(leaving);\n                if (pair !== undefined && pair.second.constant() < 0.0) {\n                    var entering = this._getDualEnteringSymbol(pair.second);\n                    if (entering.type() === 0 /* Invalid */) {\n                        throw new Error(\"dual optimize failed\");\n                    }\n                    // pivot the entering symbol into the basis\n                    var row = pair.second;\n                    rows.erase(leaving);\n                    row.solveForEx(leaving, entering);\n                    this._substitute(entering, row);\n                    rows.insert(entering, row);\n                }\n            }\n        };\n        /**\n         * Compute the entering variable for a pivot operation.\n         *\n         * This method will return first symbol in the objective function which\n         * is non-dummy and has a coefficient less than zero. If no symbol meets\n         * the criteria, it means the objective function is at a minimum, and an\n         * invalid symbol is returned.\n         *\n         * @private\n         */\n        Solver.prototype._getEnteringSymbol = function (objective) {\n            var cells = objective.cells();\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                var symbol = pair.first;\n                if (pair.second < 0.0 && symbol.type() !== 4 /* Dummy */) {\n                    return symbol;\n                }\n            }\n            return INVALID_SYMBOL;\n        };\n        /**\n         * Compute the entering symbol for the dual optimize operation.\n         *\n         * This method will return the symbol in the row which has a positive\n         * coefficient and yields the minimum ratio for its respective symbol\n         * in the objective function. The provided row *must* be infeasible.\n         * If no symbol is found which meats the criteria, an invalid symbol\n         * is returned.\n         *\n         * @private\n         */\n        Solver.prototype._getDualEnteringSymbol = function (row) {\n            var ratio = Number.MAX_VALUE;\n            var entering = INVALID_SYMBOL;\n            var cells = row.cells();\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                var symbol = pair.first;\n                var c = pair.second;\n                if (c > 0.0 && symbol.type() !== 4 /* Dummy */) {\n                    var coeff = this._objective.coefficientFor(symbol);\n                    var r = coeff / c;\n                    if (r < ratio) {\n                        ratio = r;\n                        entering = symbol;\n                    }\n                }\n            }\n            return entering;\n        };\n        /**\n         * Compute the symbol for pivot exit row.\n         *\n         * This method will return the symbol for the exit row in the row\n         * map. If no appropriate exit symbol is found, an invalid symbol\n         * will be returned. This indicates that the objective function is\n         * unbounded.\n         *\n         * @private\n         */\n        Solver.prototype._getLeavingSymbol = function (entering) {\n            var ratio = Number.MAX_VALUE;\n            var found = INVALID_SYMBOL;\n            var rows = this._rowMap;\n            for (var i = 0, n = rows.size(); i < n; ++i) {\n                var pair = rows.itemAt(i);\n                var symbol = pair.first;\n                if (symbol.type() !== 1 /* External */) {\n                    var row = pair.second;\n                    var temp = row.coefficientFor(entering);\n                    if (temp < 0.0) {\n                        var temp_ratio = -row.constant() / temp;\n                        if (temp_ratio < ratio) {\n                            ratio = temp_ratio;\n                            found = symbol;\n                        }\n                    }\n                }\n            }\n            return found;\n        };\n        /**\n         * Compute the leaving symbol for a marker variable.\n         *\n         * This method will return a symbol corresponding to a basic row\n         * which holds the given marker variable. The row will be chosen\n         * according to the following precedence:\n         *\n         * 1) The row with a restricted basic varible and a negative coefficient\n         *    for the marker with the smallest ratio of -constant / coefficient.\n         *\n         * 2) The row with a restricted basic variable and the smallest ratio\n         *    of constant / coefficient.\n         *\n         * 3) The last unrestricted row which contains the marker.\n         *\n         * If the marker does not exist in any row, an invalid symbol will be\n         * returned. This indicates an internal solver error since the marker\n         * *should* exist somewhere in the tableau.\n         *\n         * @private\n         */\n        Solver.prototype._getMarkerLeavingSymbol = function (marker) {\n            var dmax = Number.MAX_VALUE;\n            var r1 = dmax;\n            var r2 = dmax;\n            var invalid = INVALID_SYMBOL;\n            var first = invalid;\n            var second = invalid;\n            var third = invalid;\n            var rows = this._rowMap;\n            for (var i = 0, n = rows.size(); i < n; ++i) {\n                var pair = rows.itemAt(i);\n                var row = pair.second;\n                var c = row.coefficientFor(marker);\n                if (c === 0.0) {\n                    continue;\n                }\n                var symbol = pair.first;\n                if (symbol.type() === 1 /* External */) {\n                    third = symbol;\n                }\n                else if (c < 0.0) {\n                    var r = -row.constant() / c;\n                    if (r < r1) {\n                        r1 = r;\n                        first = symbol;\n                    }\n                }\n                else {\n                    var r = row.constant() / c;\n                    if (r < r2) {\n                        r2 = r;\n                        second = symbol;\n                    }\n                }\n            }\n            if (first !== invalid) {\n                return first;\n            }\n            if (second !== invalid) {\n                return second;\n            }\n            return third;\n        };\n        /**\n         * Remove the effects of a constraint on the objective function.\n         *\n         * @private\n         */\n        Solver.prototype._removeConstraintEffects = function (cn, tag) {\n            if (tag.marker.type() === 3 /* Error */) {\n                this._removeMarkerEffects(tag.marker, cn.strength());\n            }\n            if (tag.other.type() === 3 /* Error */) {\n                this._removeMarkerEffects(tag.other, cn.strength());\n            }\n        };\n        /**\n         * Remove the effects of an error marker on the objective function.\n         *\n         * @private\n         */\n        Solver.prototype._removeMarkerEffects = function (marker, strength) {\n            var pair = this._rowMap.find(marker);\n            if (pair !== undefined) {\n                this._objective.insertRow(pair.second, -strength);\n            }\n            else {\n                this._objective.insertSymbol(marker, -strength);\n            }\n        };\n        /**\n         * Get the first Slack or Error symbol in the row.\n         *\n         * If no such symbol is present, an invalid symbol will be returned.\n         *\n         * @private\n         */\n        Solver.prototype._anyPivotableSymbol = function (row) {\n            var cells = row.cells();\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                var type = pair.first.type();\n                if (type === 2 /* Slack */ || type === 3 /* Error */) {\n                    return pair.first;\n                }\n            }\n            return INVALID_SYMBOL;\n        };\n        /**\n         * Returns a new Symbol of the given type.\n         *\n         * @private\n         */\n        Solver.prototype._makeSymbol = function (type) {\n            return new Symbol(type, this._idTick++);\n        };\n        return Solver;\n    })();\n    kiwi.Solver = Solver;\n    /**\n     * Test whether a value is approximately zero.\n     * @private\n     */\n    function nearZero(value) {\n        var eps = 1.0e-8;\n        return value < 0.0 ? -value < eps : value < eps;\n    }\n    /**\n     * An internal function for creating a constraint map.\n     * @private\n     */\n    function createCnMap() {\n        return kiwi.createMap(kiwi.Constraint.Compare);\n    }\n    /**\n     * An internal function for creating a row map.\n     * @private\n     */\n    function createRowMap() {\n        return kiwi.createMap(Symbol.Compare);\n    }\n    /**\n     * An internal function for creating a variable map.\n     * @private\n     */\n    function createVarMap() {\n        return kiwi.createMap(kiwi.Variable.Compare);\n    }\n    /**\n     * An internal function for creating an edit map.\n     * @private\n     */\n    function createEditMap() {\n        return kiwi.createMap(kiwi.Variable.Compare);\n    }\n    /**\n     * An enum defining the available symbol types.\n     * @private\n     */\n    var SymbolType;\n    (function (SymbolType) {\n        SymbolType[SymbolType[\"Invalid\"] = 0] = \"Invalid\";\n        SymbolType[SymbolType[\"External\"] = 1] = \"External\";\n        SymbolType[SymbolType[\"Slack\"] = 2] = \"Slack\";\n        SymbolType[SymbolType[\"Error\"] = 3] = \"Error\";\n        SymbolType[SymbolType[\"Dummy\"] = 4] = \"Dummy\";\n    })(SymbolType || (SymbolType = {}));\n    /**\n     * An internal class representing a symbol in the solver.\n     * @private\n     */\n    var Symbol = (function () {\n        /**\n         * Construct a new Symbol\n         *\n         * @param [type] The type of the symbol.\n         * @param [id] The unique id number of the symbol.\n         */\n        function Symbol(type, id) {\n            this._id = id;\n            this._type = type;\n        }\n        /**\n         * The static Symbol comparison function.\n         */\n        Symbol.Compare = function (a, b) {\n            return a.id() - b.id();\n        };\n        /**\n         * Returns the unique id number of the symbol.\n         */\n        Symbol.prototype.id = function () {\n            return this._id;\n        };\n        /**\n         * Returns the type of the symbol.\n         */\n        Symbol.prototype.type = function () {\n            return this._type;\n        };\n        return Symbol;\n    })();\n    /**\n     * A static invalid symbol\n     * @private\n     */\n    var INVALID_SYMBOL = new Symbol(0 /* Invalid */, -1);\n    /**\n     * An internal row class used by the solver.\n     * @private\n     */\n    var Row = (function () {\n        /**\n         * Construct a new Row.\n         */\n        function Row(constant) {\n            if (constant === void 0) { constant = 0.0; }\n            this._cellMap = kiwi.createMap(Symbol.Compare);\n            this._constant = constant;\n        }\n        /**\n         * Returns the mapping of symbols to coefficients.\n         */\n        Row.prototype.cells = function () {\n            return this._cellMap;\n        };\n        /**\n         * Returns the constant for the row.\n         */\n        Row.prototype.constant = function () {\n            return this._constant;\n        };\n        /**\n         * Returns true if the row is a constant value.\n         */\n        Row.prototype.isConstant = function () {\n            return this._cellMap.empty();\n        };\n        /**\n         * Returns true if the Row has all dummy symbols.\n         */\n        Row.prototype.allDummies = function () {\n            var cells = this._cellMap;\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                if (pair.first.type() !== 4 /* Dummy */) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * Create a copy of the row.\n         */\n        Row.prototype.copy = function () {\n            var theCopy = new Row(this._constant);\n            theCopy._cellMap = this._cellMap.copy();\n            return theCopy;\n        };\n        /**\n         * Add a constant value to the row constant.\n         *\n         * Returns the new value of the constant.\n         */\n        Row.prototype.add = function (value) {\n            return this._constant += value;\n        };\n        /**\n         * Insert the symbol into the row with the given coefficient.\n         *\n         * If the symbol already exists in the row, the coefficient\n         * will be added to the existing coefficient. If the resulting\n         * coefficient is zero, the symbol will be removed from the row.\n         */\n        Row.prototype.insertSymbol = function (symbol, coefficient) {\n            if (coefficient === void 0) { coefficient = 1.0; }\n            var pair = this._cellMap.setDefault(symbol, function () { return 0.0; });\n            if (nearZero(pair.second += coefficient)) {\n                this._cellMap.erase(symbol);\n            }\n        };\n        /**\n         * Insert a row into this row with a given coefficient.\n         *\n         * The constant and the cells of the other row will be\n         * multiplied by the coefficient and added to this row. Any\n         * cell with a resulting coefficient of zero will be removed\n         * from the row.\n         */\n        Row.prototype.insertRow = function (other, coefficient) {\n            if (coefficient === void 0) { coefficient = 1.0; }\n            this._constant += other._constant * coefficient;\n            var cells = other._cellMap;\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                this.insertSymbol(pair.first, pair.second * coefficient);\n            }\n        };\n        /**\n         * Remove a symbol from the row.\n         */\n        Row.prototype.removeSymbol = function (symbol) {\n            this._cellMap.erase(symbol);\n        };\n        /**\n         * Reverse the sign of the constant and cells in the row.\n         */\n        Row.prototype.reverseSign = function () {\n            this._constant = -this._constant;\n            var cells = this._cellMap;\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                var pair = cells.itemAt(i);\n                pair.second = -pair.second;\n            }\n        };\n        /**\n         * Solve the row for the given symbol.\n         *\n         * This method assumes the row is of the form\n         * a * x + b * y + c = 0 and (assuming solve for x) will modify\n         * the row to represent the right hand side of\n         * x = -b/a * y - c / a. The target symbol will be removed from\n         * the row, and the constant and other cells will be multiplied\n         * by the negative inverse of the target coefficient.\n         *\n         * The given symbol *must* exist in the row.\n         */\n        Row.prototype.solveFor = function (symbol) {\n            var cells = this._cellMap;\n            var pair = cells.erase(symbol);\n            var coeff = -1.0 / pair.second;\n            this._constant *= coeff;\n            for (var i = 0, n = cells.size(); i < n; ++i) {\n                cells.itemAt(i).second *= coeff;\n            }\n        };\n        /**\n         * Solve the row for the given symbols.\n         *\n         * This method assumes the row is of the form\n         * x = b * y + c and will solve the row such that\n         * y = x / b - c / b. The rhs symbol will be removed from the\n         * row, the lhs added, and the result divided by the negative\n         * inverse of the rhs coefficient.\n         *\n         * The lhs symbol *must not* exist in the row, and the rhs\n         * symbol must* exist in the row.\n         */\n        Row.prototype.solveForEx = function (lhs, rhs) {\n            this.insertSymbol(lhs, -1.0);\n            this.solveFor(rhs);\n        };\n        /**\n         * Returns the coefficient for the given symbol.\n         */\n        Row.prototype.coefficientFor = function (symbol) {\n            var pair = this._cellMap.find(symbol);\n            return pair !== undefined ? pair.second : 0.0;\n        };\n        /**\n         * Substitute a symbol with the data from another row.\n         *\n         * Given a row of the form a * x + b and a substitution of the\n         * form x = 3 * y + c the row will be updated to reflect the\n         * expression 3 * a * y + a * c + b.\n         *\n         * If the symbol does not exist in the row, this is a no-op.\n         */\n        Row.prototype.substitute = function (symbol, row) {\n            var pair = this._cellMap.erase(symbol);\n            if (pair !== undefined) {\n                this.insertRow(row, pair.second);\n            }\n        };\n        return Row;\n    })();\n})(kiwi || (kiwi = {}));\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\n/// <reference path=\"constraint.ts\"/>\n/// <reference path=\"expression.ts\"/>\n/// <reference path=\"maptype.ts\"/>\n/// <reference path=\"solver.ts\"/>\n/// <reference path=\"strength.ts\"/>\n/// <reference path=\"variable.ts\"/>\n\nreturn kiwi;\n\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/kiwi-solver/bin/kiwi.js\n ** module id = 8\n ** module chunks = 0\n **/","import solver from 'constraint-solver';\nimport Attribute from './Attribute';\n\n/**\n * A SubView is automatically generated when constraints are added to a View.\n *\n * @namespace SubView\n */\nclass SubView {\n    constructor(options) {\n        this._name = options.name;\n        this._type = options.type;\n        this._solver = options.solver;\n        this._attr = {};\n        if (!options.name) {\n            if (process.env.CASSOWARYJS) {\n                this._attr[Attribute.LEFT] = new solver.Variable();\n                this._solver.addConstraint(new solver.StayConstraint(this._attr[Attribute.LEFT], solver.Strength.required));\n                this._attr[Attribute.TOP] = new solver.Variable();\n                this._solver.addConstraint(new solver.StayConstraint(this._attr[Attribute.TOP], solver.Strength.required));\n                this._attr[Attribute.ZINDEX] = new solver.Variable();\n                this._solver.addConstraint(new solver.StayConstraint(this._attr[Attribute.ZINDEX], solver.Strength.required));\n            }\n            else {\n                this._attr[Attribute.LEFT] = new solver.Variable();\n                this._solver.addConstraint(new solver.Constraint(this._attr[Attribute.LEFT], solver.Operator.Eq, 0));\n                this._attr[Attribute.TOP] = new solver.Variable();\n                this._solver.addConstraint(new solver.Constraint(this._attr[Attribute.TOP], solver.Operator.Eq, 0));\n                this._attr[Attribute.ZINDEX] = new solver.Variable();\n                this._solver.addConstraint(new solver.Constraint(this._attr[Attribute.ZINDEX], solver.Operator.Eq, 0));\n            }\n        }\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            left: this.left,\n            top: this.top,\n            width: this.width,\n            height: this.height\n        };\n    }\n    toString() {\n        JSON.stringify(this.toJSON(), undefined, 2);\n    }\n\n    /**\n     * Name of the sub-view.\n     * @readonly\n     * @type {String}\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Left value (`Attribute.LEFT`).\n     * @readonly\n     * @type {Number}\n     */\n    get left() {\n        return this._getAttrValue(Attribute.LEFT);\n    }\n\n    /**\n     * Right value (`Attribute.RIGHT`).\n     * @readonly\n     * @type {Number}\n     */\n    get right() {\n        return this._getAttrValue(Attribute.RIGHT);\n    }\n\n    /**\n     * Width value (`Attribute.WIDTH`).\n     * @type {Number}\n     */\n    get width() {\n        return this._getAttrValue(Attribute.WIDTH);\n    }\n\n    /**\n     * Height value (`Attribute.HEIGHT`).\n     * @readonly\n     * @type {Number}\n     */\n    get height() {\n        return this._getAttrValue(Attribute.HEIGHT);\n    }\n\n    /**\n     * Intrinsic width of the sub-view.\n     *\n     * Use this property to explicitely set the width of the sub-view, e.g.:\n     * ```javascript\n     * var view = new AutoLayout.View(AutoLayout.VisualFormat.parse('|[child1][child2]|'), {\n     *   width: 500\n     * });\n     * view.subViews.child1.intrinsicWidth = 100;\n     * console.log('child2 width: ' + view.subViews.child2.width); // 400\n     * ```\n     *\n     * @type {Number}\n     */\n    get intrinsicWidth() {\n        return this._intrinsicWidth;\n    }\n    set intrinsicWidth(value) {\n        if ((value !== undefined) && (value !== this._intrinsicWidth)) {\n            const attr = this._getAttr(Attribute.WIDTH);\n            if (this._intrinsicWidth === undefined) {\n                if (process.env.CASSOWARYJS) {\n                    this._solver.addEditVar(attr, new solver.Strength('required', this._name ? 998 : 999, 1000, 1000));\n                }\n                else {\n                    this._solver.addEditVariable(attr, solver.Strength.create(this._name ? 998 : 999, 1000, 1000));\n                }\n            }\n            this._intrinsicWidth = value;\n            this._solver.suggestValue(attr, value);\n            if (process.env.CASSOWARYJS) {\n                this._solver.resolve();\n            }\n            else {\n                this._solver.updateVariables();\n            }\n        }\n    }\n\n    /**\n     * Intrinsic height of the sub-view.\n     *\n     * See `intrinsicWidth`.\n     *\n     * @type {Number}\n     */\n    get intrinsicHeight() {\n        return this._intrinsicHeight;\n    }\n    set intrinsicHeight(value) {\n        if ((value !== undefined) && (value !== this._intrinsicHeight)) {\n            const attr = this._getAttr(Attribute.HEIGHT);\n            if (this._intrinsicHeight === undefined) {\n                if (process.env.CASSOWARYJS) {\n                    this._solver.addEditVar(attr, new solver.Strength('required', this._name ? 998 : 999, 1000, 1000));\n                }\n                else {\n                    this._solver.addEditVariable(attr, solver.Strength.create(this._name ? 998 : 999, 1000, 1000));\n                }\n            }\n            this._intrinsicHeight = value;\n            this._solver.suggestValue(attr, value);\n            if (process.env.CASSOWARYJS) {\n                this._solver.resolve();\n            }\n            else {\n                this._solver.updateVariables();\n            }\n        }\n    }\n\n    /**\n     * Top value (`Attribute.TOP`).\n     * @readonly\n     * @type {Number}\n     */\n    get top() {\n        return this._getAttrValue(Attribute.TOP);\n    }\n\n    /**\n     * Bottom value (`Attribute.BOTTOM`).\n     * @readonly\n     * @type {Number}\n     */\n    get bottom() {\n        return this._getAttrValue(Attribute.BOTTOM);\n    }\n\n    /**\n     * Horizontal center (`Attribute.CENTERX`).\n     * @readonly\n     * @type {Number}\n     */\n    get centerX() {\n        return this._getAttrValue(Attribute.CENTERX);\n    }\n\n    /**\n     * Vertical center (`Attribute.CENTERY`).\n     * @readonly\n     * @type {Number}\n     */\n    get centerY() {\n        return this._getAttrValue(Attribute.CENTERY);\n    }\n\n    /**\n     * Z-index (`Attribute.ZINDEX`).\n     * @readonly\n     * @type {Number}\n     */\n    get zIndex() {\n        return this._getAttrValue(Attribute.ZINDEX);\n    }\n\n    /**\n     * Returns the type of the sub-view.\n     * @readonly\n     * @type {String}\n     */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * Gets the value of one of the attributes.\n     *\n     * @param {String|Attribute} attr Attribute name (e.g. 'right', 'centerY', Attribute.TOP).\n     * @return {Number} value or `undefined`\n     */\n    getValue(attr) {\n        return this._attr[attr] ? this._attr[attr].value() : undefined;\n    }\n\n    /**\n     * @private\n     */\n    _getAttr(attr) {\n        if (this._attr[attr]) {\n            return this._attr[attr];\n        }\n        this._attr[attr] = process.env.CASSOWARYJS ? new solver.Variable() : new solver.Variable();\n        switch (attr) {\n            case Attribute.RIGHT:\n                this._getAttr(Attribute.LEFT);\n                this._getAttr(Attribute.WIDTH);\n                if (process.env.CASSOWARYJS) {\n                    this._solver.addConstraint(new solver.Equation(this._attr[attr], solver.plus(this._attr[Attribute.LEFT], this._attr[Attribute.WIDTH])));\n                }\n                else {\n                    this._solver.addConstraint(new solver.Constraint(this._attr[attr], solver.Operator.Eq, this._attr[Attribute.LEFT].plus(this._attr[Attribute.WIDTH])));\n                }\n                break;\n            case Attribute.BOTTOM:\n                this._getAttr(Attribute.TOP);\n                this._getAttr(Attribute.HEIGHT);\n                if (process.env.CASSOWARYJS) {\n                    this._solver.addConstraint(new solver.Equation(this._attr[attr], solver.plus(this._attr[Attribute.TOP], this._attr[Attribute.HEIGHT])));\n                }\n                else {\n                    this._solver.addConstraint(new solver.Constraint(this._attr[attr], solver.Operator.Eq, this._attr[Attribute.TOP].plus(this._attr[Attribute.HEIGHT])));\n                }\n                break;\n            case Attribute.CENTERX:\n                this._getAttr(Attribute.LEFT);\n                this._getAttr(Attribute.WIDTH);\n                if (process.env.CASSOWARYJS) {\n                    this._solver.addConstraint(new solver.Equation(this._attr[attr], solver.plus(this._attr[Attribute.LEFT], solver.divide(this._attr[Attribute.WIDTH], 2))));\n                }\n                else {\n                    this._solver.addConstraint(new solver.Constraint(this._attr[attr], solver.Operator.Eq, this._attr[Attribute.LEFT].plus(this._attr[Attribute.WIDTH].divide(2))));\n                }\n                break;\n            case Attribute.CENTERY:\n                this._getAttr(Attribute.TOP);\n                this._getAttr(Attribute.HEIGHT);\n                if (process.env.CASSOWARYJS) {\n                    this._solver.addConstraint(new solver.Equation(this._attr[attr], solver.plus(this._attr[Attribute.TOP], solver.divide(this._attr[Attribute.HEIGHT], 2))));\n                }\n                else {\n                    this._solver.addConstraint(new solver.Constraint(this._attr[attr], solver.Operator.Eq, this._attr[Attribute.TOP].plus(this._attr[Attribute.HEIGHT].divide(2))));\n                }\n                break;\n        }\n        if (!process.env.CASSOWARYJS) {\n            this._solver.updateVariables();\n        }\n        return this._attr[attr];\n    }\n\n    /**\n     * @private\n     */\n    _getAttrValue(attr) {\n        if (process.env.CASSOWARYJS) {\n            return this._getAttr(attr).value;\n        }\n        else {\n            return this._getAttr(attr).value();\n        }\n    }\n}\n\nexport default SubView;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/SubView.js\n **/"],"sourceRoot":""}